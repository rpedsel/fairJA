set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 30.9459, <2> 28.3687, <3> 32.8216, <4> 28.1574, <5> 34.2862, <6> 36.5281, <7> 13.4952, <8> 24.5596, <9> 27.8165, <10> 35.4901, <11> 26.6611, <12> 21.3, <13> 24.0771, <14> 19.7544, <15> 30.9223, <16> 31.2678, <17> 21.2531, <18> 28.6692, <19> 27.1864, <20> 24.8068;
param workload[JOB] := <1> 15.4117, <2> 16.7014, <3> 8.9146, <4> 20.7695, <5> 20.2635, <6> 24.1292, <7> 9.8871, <8> 28.5265, <9> 20.0368, <10> 24.4694, <11> 49.9553, <12> 28.5134, <13> 2.3224, <14> 3.1969, <15> 48.4498, <16> 39.7883, <17> 22.4006, <18> 12.986, <19> 1.356, <20> 15.748;
param capacity[MACHINE] := <1> 413.8264, <2> 413.8264, <3> 413.8264, <4> 413.8264, <5> 413.8264, <6> 413.8264, <7> 413.8264;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
