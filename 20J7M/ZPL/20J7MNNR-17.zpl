set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 35.6015, <2> 22.103, <3> 31.636, <4> 21.4935, <5> 22.6921, <6> 20.7166, <7> 19.7173, <8> 26.5627, <9> 23.597, <10> 27.547, <11> 26.6901, <12> 24.6521, <13> 24.7831, <14> 28.8725, <15> 18.9195, <16> 33.2104, <17> 18.2385, <18> 19.1624, <19> 31.6367, <20> 21.6681;
param workload[JOB] := <1> 6.8306, <2> 30.6168, <3> 8.0343, <4> 26.0579, <5> 7.9543, <6> 37.3803, <7> 38.6198, <8> 21.1392, <9> 17.5136, <10> 48.4467, <11> 8.7681, <12> 21.6729, <13> 33.5695, <14> 23.5427, <15> 38.3938, <16> 2.5426, <17> 23.1842, <18> 14.8998, <19> 49.3647, <20> 16.4194;
param capacity[MACHINE] := <1> 474.9512, <2> 474.9512, <3> 474.9512, <4> 474.9512, <5> 474.9512, <6> 474.9512, <7> 474.9512;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
