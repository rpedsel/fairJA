set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 34.3731, <2> 7.4709, <3> 49.9929, <4> 34.9494, <5> 36.4674, <6> 1.8516, <7> 19.7278, <8> 40.3661, <9> 5.5989, <10> 30.389, <11> 33.8319, <12> 8.7882, <13> 3.3357, <14> 45.7561, <15> 1.5504, <16> 14.32, <17> 41.4749, <18> 35.8248, <19> 28.6629, <20> 0.2937;
param workload[JOB] := <1> 1181.51, <2> 55.8143, <3> 2499.2901, <4> 1221.4606, <5> 1329.8713, <6> 3.4284, <7> 389.1861, <8> 1629.422, <9> 31.3477, <10> 923.4913, <11> 1144.5975, <12> 77.2325, <13> 11.1269, <14> 2093.6207, <15> 2.4037, <16> 205.0624, <17> 1720.1673, <18> 1283.4163, <19> 821.5618, <20> 0.0863;
param capacity[MACHINE] := <1> 2619.139, <2> 2619.139, <3> 2619.139, <4> 2619.139, <5> 2619.139, <6> 2619.139, <7> 2619.139;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
