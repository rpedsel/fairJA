set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 40.2515, <2> 21.3596, <3> 22.8528, <4> 34.6303, <5> 40.9411, <6> 47.3094, <7> 38.2395, <8> 2.1501, <9> 37.8195, <10> 40.4197, <11> 7.9038, <12> 31.4898, <13> 16.7702, <14> 46.8623, <15> 43.4384, <16> 15.1835, <17> 42.6466, <18> 12.4452, <19> 7.5716, <20> 5.1658;
param workload[JOB] := <1> 1620.1833, <2> 456.2325, <3> 522.2505, <4> 1199.2577, <5> 1676.1737, <6> 2238.1793, <7> 1462.2594, <8> 4.6229, <9> 1430.3146, <10> 1633.7521, <11> 62.4701, <12> 991.6075, <13> 281.2396, <14> 2196.0752, <15> 1886.8946, <16> 230.5387, <17> 1818.7325, <18> 154.883, <19> 57.3291, <20> 26.6855;
param capacity[MACHINE] := <1> 19949.6818, <2> 19949.6818, <3> 19949.6818, <4> 19949.6818, <5> 19949.6818, <6> 19949.6818, <7> 19949.6818;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
