set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 41.2221, <2> 12.6658, <3> 19.4835, <4> 13.8088, <5> 21.1018, <6> 42.9013, <7> 30.7731, <8> 41.2769, <9> 40.9065, <10> 9.4517, <11> 26.2316, <12> 13.0595, <13> 9.7008, <14> 4.1255, <15> 25.0932, <16> 25.6746, <17> 15.9068, <18> 5.0657, <19> 8.8, <20> 12.3103;
param workload[JOB] := <1> 1699.2615, <2> 160.4225, <3> 379.6068, <4> 190.683, <5> 445.286, <6> 1840.5215, <7> 946.9837, <8> 1703.7825, <9> 1673.3417, <10> 89.3346, <11> 688.0968, <12> 170.5505, <13> 94.1055, <14> 17.0198, <15> 629.6687, <16> 659.1851, <17> 253.0263, <18> 25.6613, <19> 77.44, <20> 151.5435;
param capacity[MACHINE] := <1> 11895.5213, <2> 11895.5213, <3> 11895.5213, <4> 11895.5213, <5> 11895.5213, <6> 11895.5213, <7> 11895.5213;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
