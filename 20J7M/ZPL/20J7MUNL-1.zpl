set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 12.2103, <2> 39.5465, <3> 34.6416, <4> 7.7263, <5> 43.968, <6> 7.4533, <7> 39.6638, <8> 3.9628, <9> 9.901, <10> 14.7643, <11> 19.9351, <12> 21.2692, <13> 38.9023, <14> 34.6482, <15> 34.6643, <16> 43.9028, <17> 10.2353, <18> 14.4625, <19> 3.3281, <20> 5.6268;
param workload[JOB] := <1> 12.2103, <2> 39.5465, <3> 34.6416, <4> 7.7263, <5> 43.968, <6> 7.4533, <7> 39.6638, <8> 3.9628, <9> 9.901, <10> 14.7643, <11> 19.9351, <12> 21.2692, <13> 38.9023, <14> 34.6482, <15> 34.6643, <16> 43.9028, <17> 10.2353, <18> 14.4625, <19> 3.3281, <20> 5.6268;
param capacity[MACHINE] := <1> 440.8125, <2> 440.8125, <3> 440.8125, <4> 440.8125, <5> 440.8125, <6> 440.8125, <7> 440.8125;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
