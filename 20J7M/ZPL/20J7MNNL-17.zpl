set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 23.5259, <2> 29.9147, <3> 28.0827, <4> 17.0602, <5> 23.3753, <6> 33.2535, <7> 17.3157, <8> 29.7773, <9> 20.3786, <10> 21.3902, <11> 24.3237, <12> 22.8984, <13> 24.1315, <14> 18.8762, <15> 29.4688, <16> 24.1117, <17> 19.9316, <18> 23.815, <19> 21.8012, <20> 24.1842;
param workload[JOB] := <1> 23.5259, <2> 29.9147, <3> 28.0827, <4> 17.0602, <5> 23.3753, <6> 33.2535, <7> 17.3157, <8> 29.7773, <9> 20.3786, <10> 21.3902, <11> 24.3237, <12> 22.8984, <13> 24.1315, <14> 18.8762, <15> 29.4688, <16> 24.1117, <17> 19.9316, <18> 23.815, <19> 21.8012, <20> 24.1842;
param capacity[MACHINE] := <1> 477.6164, <2> 477.6164, <3> 477.6164, <4> 477.6164, <5> 477.6164, <6> 477.6164, <7> 477.6164;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
