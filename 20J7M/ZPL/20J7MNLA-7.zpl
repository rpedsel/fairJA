set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 31.8474, <2> 27.5576, <3> 14.8852, <4> 26.4017, <5> 22.8995, <6> 26.3941, <7> 23.644, <8> 19.9672, <9> 29.1274, <10> 17.3012, <11> 34.5455, <12> 31.2592, <13> 28.1871, <14> 22.2453, <15> 35.9855, <16> 19.7306, <17> 22.8346, <18> 20.7728, <19> 27.675, <20> 22.3582;
param workload[JOB] := <1> 1014.2569, <2> 759.4213, <3> 221.5692, <4> 697.0498, <5> 524.3871, <6> 696.6485, <7> 559.0387, <8> 398.6891, <9> 848.4054, <10> 299.3315, <11> 1193.3916, <12> 977.1376, <13> 794.5126, <14> 494.8534, <15> 1294.9562, <16> 389.2966, <17> 521.419, <18> 431.5092, <19> 765.9056, <20> 499.8891;
param capacity[MACHINE] := <1> 1911.6669, <2> 1911.6669, <3> 1911.6669, <4> 1911.6669, <5> 1911.6669, <6> 1911.6669, <7> 1911.6669;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
