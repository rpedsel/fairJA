set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 21.7319, <2> 19.1246, <3> 25.2102, <4> 22.81, <5> 19.2042, <6> 31.3158, <7> 31.4099, <8> 28.0205, <9> 27.4858, <10> 27.0396, <11> 14.5711, <12> 20.8695, <13> 29.3256, <14> 24.7984, <15> 28.1595, <16> 18.7206, <17> 21.1663, <18> 22.943, <19> 24.9939, <20> 26.9725;
param workload[JOB] := <1> 21.7319, <2> 19.1246, <3> 25.2102, <4> 22.81, <5> 19.2042, <6> 31.3158, <7> 31.4099, <8> 28.0205, <9> 27.4858, <10> 27.0396, <11> 14.5711, <12> 20.8695, <13> 29.3256, <14> 24.7984, <15> 28.1595, <16> 18.7206, <17> 21.1663, <18> 22.943, <19> 24.9939, <20> 26.9725;
param capacity[MACHINE] := <1> 52.0578, <2> 52.0578, <3> 52.0578, <4> 52.0578, <5> 52.0578, <6> 52.0578, <7> 52.0578;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
