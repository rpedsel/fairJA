set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 16.4933, <2> 21.6475, <3> 26.3152, <4> 27.8296, <5> 9.635, <6> 22.4583, <7> 29.3333, <8> 19.8239, <9> 18.8982, <10> 23.7968, <11> 24.6446, <12> 28.8257, <13> 24.3287, <14> 26.5527, <15> 29.3378, <16> 24.9176, <17> 28.5443, <18> 25.0515, <19> 21.8314, <20> 21.6477;
param workload[JOB] := <1> 16.4933, <2> 21.6475, <3> 26.3152, <4> 27.8296, <5> 9.635, <6> 22.4583, <7> 29.3333, <8> 19.8239, <9> 18.8982, <10> 23.7968, <11> 24.6446, <12> 28.8257, <13> 24.3287, <14> 26.5527, <15> 29.3378, <16> 24.9176, <17> 28.5443, <18> 25.0515, <19> 21.8314, <20> 21.6477;
param capacity[MACHINE] := <1> 50.5622, <2> 50.5622, <3> 50.5622, <4> 50.5622, <5> 50.5622, <6> 50.5622, <7> 50.5622;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
