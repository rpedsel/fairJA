set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 25.7515, <2> 16.3652, <3> 21.138, <4> 26.2411, <5> 28.0644, <6> 25.6249, <7> 30.2543, <8> 29.0526, <9> 32.6192, <10> 23.49, <11> 21.443, <12> 20.4598, <13> 28.748, <14> 25.6421, <15> 16.3865, <16> 20.9274, <17> 17.9939, <18> 39.0886, <19> 25.9839, <20> 29.6129;
param workload[JOB] := <1> 8.4208, <2> 20.3947, <3> 8.3294, <4> 9.7523, <5> 8.4655, <6> 37.5796, <7> 11.5958, <8> 34.4307, <9> 5.3623, <10> 12.3076, <11> 10.4111, <12> 15.2316, <13> 22.2723, <14> 36.667, <15> 46.2971, <16> 38.1472, <17> 25.0261, <18> 15.8381, <19> 12.712, <20> 18.6685;
param capacity[MACHINE] := <1> 397.9097, <2> 397.9097, <3> 397.9097, <4> 397.9097, <5> 397.9097, <6> 397.9097, <7> 397.9097;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
