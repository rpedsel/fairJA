set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 30.9087, <2> 17.5332, <3> 24.3274, <4> 23.2126, <5> 25.5112, <6> 32.402, <7> 23.3884, <8> 20.603, <9> 23.7766, <10> 10.8872, <11> 32.4802, <12> 32.971, <13> 22.5797, <14> 22.6486, <15> 21.0987, <16> 31.554, <17> 38.1115, <18> 23.5937, <19> 23.37, <20> 33.1742;
param workload[JOB] := <1> 36.1442, <2> 33.7964, <3> 27.0111, <4> 32.8039, <5> 28.9203, <6> 48.3075, <7> 37.6709, <8> 6.4075, <9> 44.1455, <10> 49.6208, <11> 1.4193, <12> 45.7193, <13> 49.4424, <14> 17.6665, <15> 24.0018, <16> 16.5063, <17> 13.592, <18> 8.8758, <19> 48.9331, <20> 26.193;
param capacity[MACHINE] := <1> 597.1776, <2> 597.1776, <3> 597.1776, <4> 597.1776, <5> 597.1776, <6> 597.1776, <7> 597.1776;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
