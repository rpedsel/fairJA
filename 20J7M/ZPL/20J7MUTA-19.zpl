set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 30.8541, <2> 28.2491, <3> 2.1306, <4> 38.1022, <5> 42.5249, <6> 36.5104, <7> 44.1133, <8> 16.9037, <9> 1.8961, <10> 31.2793, <11> 15.992, <12> 16.3638, <13> 47.0606, <14> 12.2577, <15> 5.6341, <16> 48.2362, <17> 39.4296, <18> 1.2949, <19> 27.2124, <20> 29.0402;
param workload[JOB] := <1> 951.9755, <2> 798.0117, <3> 4.5395, <4> 1451.7776, <5> 1808.3671, <6> 1333.0093, <7> 1945.9832, <8> 285.7351, <9> 3.5952, <10> 978.3946, <11> 255.7441, <12> 267.774, <13> 2214.7001, <14> 150.2512, <15> 31.7431, <16> 2326.731, <17> 1554.6934, <18> 1.6768, <19> 740.5147, <20> 843.3332;
param capacity[MACHINE] := <1> 2573.3071, <2> 2573.3071, <3> 2573.3071, <4> 2573.3071, <5> 2573.3071, <6> 2573.3071, <7> 2573.3071;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
