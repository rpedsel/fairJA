set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 26.0814, <2> 34.6421, <3> 24.2291, <4> 24.1912, <5> 23.5664, <6> 24.0918, <7> 34.6502, <8> 40.1829, <9> 48.6515, <10> 16.0628, <11> 24.2635, <12> 32.2495, <13> 28.6138, <14> 43.6655, <15> 16.8244, <16> 13.097, <17> 21.4235, <18> 8.2263, <19> 18.2699, <20> 22.8294;
param workload[JOB] := <1> 680.2394, <2> 1200.0751, <3> 587.0493, <4> 585.2142, <5> 555.3752, <6> 580.4148, <7> 1200.6364, <8> 1614.6655, <9> 2366.9685, <10> 258.0135, <11> 588.7174, <12> 1040.0303, <13> 818.7496, <14> 1906.6759, <15> 283.0604, <16> 171.5314, <17> 458.9664, <18> 67.672, <19> 333.7892, <20> 521.1815;
param capacity[MACHINE] := <1> 1694.8957, <2> 1694.8957, <3> 1694.8957, <4> 1694.8957, <5> 1694.8957, <6> 1694.8957, <7> 1694.8957;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
