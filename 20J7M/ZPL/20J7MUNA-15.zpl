set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 3.9297, <2> 23.3387, <3> 24.3545, <4> 37.311, <5> 34.884, <6> 6.0388, <7> 36.4298, <8> 45.3202, <9> 38.5408, <10> 33.3969, <11> 0.4841, <12> 27.7477, <13> 24.5812, <14> 25.2687, <15> 22.7254, <16> 14.9247, <17> 4.1537, <18> 32.8945, <19> 43.3829, <20> 32.5745;
param workload[JOB] := <1> 15.4425, <2> 544.6949, <3> 593.1417, <4> 1392.1107, <5> 1216.8935, <6> 36.4671, <7> 1327.1303, <8> 2053.9205, <9> 1485.3933, <10> 1115.3529, <11> 0.2344, <12> 769.9349, <13> 604.2354, <14> 638.5072, <15> 516.4438, <16> 222.7467, <17> 17.2532, <18> 1082.0481, <19> 1882.076, <20> 1061.0981;
param capacity[MACHINE] := <1> 16575.1252, <2> 16575.1252, <3> 16575.1252, <4> 16575.1252, <5> 16575.1252, <6> 16575.1252, <7> 16575.1252;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
