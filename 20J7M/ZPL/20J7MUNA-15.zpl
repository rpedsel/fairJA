set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 2.8572, <2> 0.5826, <3> 8.5546, <4> 49.8185, <5> 30.9504, <6> 10.9108, <7> 34.5238, <8> 30.1034, <9> 37.5081, <10> 18.8187, <11> 13.5806, <12> 28.6779, <13> 39.911, <14> 14.0782, <15> 34.0633, <16> 14.5393, <17> 45.7172, <18> 30.0514, <19> 32.0156, <20> 32.6048;
param workload[JOB] := <1> 8.1636, <2> 0.3394, <3> 73.1812, <4> 2481.8829, <5> 957.9273, <6> 119.0456, <7> 1191.8928, <8> 906.2147, <9> 1406.8576, <10> 354.1435, <11> 184.4327, <12> 822.4219, <13> 1592.8879, <14> 198.1957, <15> 1160.3084, <16> 211.3912, <17> 2090.0624, <18> 903.0866, <19> 1024.9986, <20> 1063.073;
param capacity[MACHINE] := <1> 16750.507, <2> 16750.507, <3> 16750.507, <4> 16750.507, <5> 16750.507, <6> 16750.507, <7> 16750.507;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
