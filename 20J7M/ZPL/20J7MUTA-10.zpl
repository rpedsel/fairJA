set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 47.3122, <2> 48.6102, <3> 23.2977, <4> 6.5331, <5> 40.8945, <6> 46.2563, <7> 49.9681, <8> 45.7987, <9> 26.483, <10> 6.4388, <11> 24.2512, <12> 34.2647, <13> 1.0831, <14> 24.7109, <15> 36.0368, <16> 13.104, <17> 21.6091, <18> 22.8811, <19> 9.8092, <20> 22.0566;
param workload[JOB] := <1> 2238.4443, <2> 2362.9515, <3> 542.7828, <4> 42.6814, <5> 1672.3601, <6> 2139.6453, <7> 2496.811, <8> 2097.5209, <9> 701.3493, <10> 41.4581, <11> 588.1207, <12> 1174.0697, <13> 1.1731, <14> 610.6286, <15> 1298.651, <16> 171.7148, <17> 466.9532, <18> 523.5447, <19> 96.2204, <20> 486.4936;
param capacity[MACHINE] := <1> 2576.5681, <2> 2576.5681, <3> 2576.5681, <4> 2576.5681, <5> 2576.5681, <6> 2576.5681, <7> 2576.5681;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
