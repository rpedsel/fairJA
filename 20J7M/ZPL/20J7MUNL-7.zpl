set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 12.2527, <2> 35.639, <3> 20.0427, <4> 30.9903, <5> 25.1703, <6> 18.5755, <7> 38.4786, <8> 17.5361, <9> 38.5645, <10> 4.3159, <11> 44.6365, <12> 40.857, <13> 10.5093, <14> 41.8232, <15> 21.0011, <16> 25.8282, <17> 38.722, <18> 38.5101, <19> 34.4084, <20> 2.9177;
param workload[JOB] := <1> 12.2527, <2> 35.639, <3> 20.0427, <4> 30.9903, <5> 25.1703, <6> 18.5755, <7> 38.4786, <8> 17.5361, <9> 38.5645, <10> 4.3159, <11> 44.6365, <12> 40.857, <13> 10.5093, <14> 41.8232, <15> 21.0011, <16> 25.8282, <17> 38.722, <18> 38.5101, <19> 34.4084, <20> 2.9177;
param capacity[MACHINE] := <1> 540.7791, <2> 540.7791, <3> 540.7791, <4> 540.7791, <5> 540.7791, <6> 540.7791, <7> 540.7791;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
