set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 17.3906, <2> 6.1719, <3> 10.1005, <4> 2.577, <5> 21.4166, <6> 14.4239, <7> 5.7918, <8> 5.3582, <9> 42.1106, <10> 4.2783, <11> 49.3773, <12> 24.2463, <13> 26.2371, <14> 16.7715, <15> 16.3311, <16> 1.2052, <17> 43.2034, <18> 47.6105, <19> 31.8978, <20> 37.9652;
param workload[JOB] := <1> 302.433, <2> 38.0923, <3> 102.0201, <4> 6.6409, <5> 458.6708, <6> 208.0489, <7> 33.5449, <8> 28.7103, <9> 1773.3026, <10> 18.3039, <11> 2438.1178, <12> 587.8831, <13> 688.3854, <14> 281.2832, <15> 266.7048, <16> 1.4525, <17> 1866.5338, <18> 2266.7597, <19> 1017.4696, <20> 1441.3564;
param capacity[MACHINE] := <1> 13825.714, <2> 13825.714, <3> 13825.714, <4> 13825.714, <5> 13825.714, <6> 13825.714, <7> 13825.714;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
