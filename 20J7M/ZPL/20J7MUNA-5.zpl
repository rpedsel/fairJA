set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 3.6589, <2> 44.7219, <3> 10.4156, <4> 42.8335, <5> 46.99, <6> 28.2211, <7> 48.4719, <8> 7.5078, <9> 24.1021, <10> 1.4937, <11> 25.3014, <12> 45.0183, <13> 21.3824, <14> 22.249, <15> 34.4955, <16> 14.5201, <17> 25.4857, <18> 43.1912, <19> 12.2577, <20> 34.2314;
param workload[JOB] := <1> 13.3875, <2> 2000.0483, <3> 108.4847, <4> 1834.7087, <5> 2208.0601, <6> 796.4305, <7> 2349.5251, <8> 56.3671, <9> 580.9112, <10> 2.2311, <11> 640.1608, <12> 2026.6473, <13> 457.207, <14> 495.018, <15> 1189.9395, <16> 210.8333, <17> 649.5209, <18> 1865.4798, <19> 150.2512, <20> 1171.7887;
param capacity[MACHINE] := <1> 18807.0008, <2> 18807.0008, <3> 18807.0008, <4> 18807.0008, <5> 18807.0008, <6> 18807.0008, <7> 18807.0008;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
