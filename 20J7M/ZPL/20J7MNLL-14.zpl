set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 32.1767, <2> 24.1021, <3> 27.1203, <4> 39.4949, <5> 18.7877, <6> 19.4151, <7> 25.3881, <8> 24.9581, <9> 20.1233, <10> 21.0091, <11> 18.8851, <12> 16.949, <13> 31.9025, <14> 20.3364, <15> 20.689, <16> 31.1386, <17> 24.3804, <18> 22.4997, <19> 24.6393, <20> 30.2031;
param workload[JOB] := <1> 32.1767, <2> 24.1021, <3> 27.1203, <4> 39.4949, <5> 18.7877, <6> 19.4151, <7> 25.3881, <8> 24.9581, <9> 20.1233, <10> 21.0091, <11> 18.8851, <12> 16.949, <13> 31.9025, <14> 20.3364, <15> 20.689, <16> 31.1386, <17> 24.3804, <18> 22.4997, <19> 24.6393, <20> 30.2031;
param capacity[MACHINE] := <1> 70.5998, <2> 70.5998, <3> 70.5998, <4> 70.5998, <5> 70.5998, <6> 70.5998, <7> 70.5998;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
