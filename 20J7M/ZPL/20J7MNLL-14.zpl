set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 28.003, <2> 27.052, <3> 22.59, <4> 28.9625, <5> 27.6137, <6> 28.7299, <7> 29.8315, <8> 33.9176, <9> 22.5803, <10> 18.5788, <11> 30.0752, <12> 27.7731, <13> 27.4705, <14> 25.0282, <15> 18.1821, <16> 26.1256, <17> 26.5976, <18> 14.8699, <19> 30.3462, <20> 17.1368;
param workload[JOB] := <1> 28.003, <2> 27.052, <3> 22.59, <4> 28.9625, <5> 27.6137, <6> 28.7299, <7> 29.8315, <8> 33.9176, <9> 22.5803, <10> 18.5788, <11> 30.0752, <12> 27.7731, <13> 27.4705, <14> 25.0282, <15> 18.1821, <16> 26.1256, <17> 26.5976, <18> 14.8699, <19> 30.3462, <20> 17.1368;
param capacity[MACHINE] := <1> 73.0664, <2> 73.0664, <3> 73.0664, <4> 73.0664, <5> 73.0664, <6> 73.0664, <7> 73.0664;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
