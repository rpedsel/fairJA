set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 41.1478, <2> 47.1921, <3> 42.4156, <4> 11.5718, <5> 13.8081, <6> 17.4753, <7> 0.4636, <8> 45.1828, <9> 22.0432, <10> 26.1251, <11> 47.0902, <12> 28.4188, <13> 43.9897, <14> 35.0025, <15> 30.2484, <16> 1.617, <17> 38.3143, <18> 26.2103, <19> 10.9387, <20> 27.7018;
param workload[JOB] := <1> 15.1585, <2> 38.3207, <3> 3.8451, <4> 44.0324, <5> 17.6764, <6> 8.0042, <7> 19.2847, <8> 26.2931, <9> 6.6737, <10> 38.2181, <11> 2.0125, <12> 45.7549, <13> 8.6001, <14> 48.2642, <15> 26.9467, <16> 31.2739, <17> 20.8216, <18> 7.6779, <19> 23.2644, <20> 46.0968;
param capacity[MACHINE] := <1> 51.2378, <2> 51.2378, <3> 51.2378, <4> 51.2378, <5> 51.2378, <6> 51.2378, <7> 51.2378;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
