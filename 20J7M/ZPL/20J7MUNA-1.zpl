set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 14.8325, <2> 48.6339, <3> 43.0339, <4> 41.1379, <5> 41.7626, <6> 30.7504, <7> 40.4708, <8> 16.0686, <9> 12.1459, <10> 40.5021, <11> 13.037, <12> 4.1175, <13> 24.1157, <14> 10.2387, <15> 26.1675, <16> 29.8273, <17> 12.8177, <18> 12.5744, <19> 32.3285, <20> 32.6222;
param workload[JOB] := <1> 220.0031, <2> 2365.2562, <3> 1851.9165, <4> 1692.3268, <5> 1744.1148, <6> 945.5871, <7> 1637.8857, <8> 258.1999, <9> 147.5229, <10> 1640.4201, <11> 169.9634, <12> 16.9538, <13> 581.567, <14> 104.831, <15> 684.7381, <16> 889.6678, <17> 164.2934, <18> 158.1155, <19> 1045.1319, <20> 1064.2079;
param capacity[MACHINE] := <1> 17382.7029, <2> 17382.7029, <3> 17382.7029, <4> 17382.7029, <5> 17382.7029, <6> 17382.7029, <7> 17382.7029;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
