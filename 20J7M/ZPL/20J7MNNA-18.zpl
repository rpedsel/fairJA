set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 24.9304, <2> 19.4259, <3> 27.663, <4> 24.0402, <5> 12.5906, <6> 29.5471, <7> 17.6645, <8> 14.0385, <9> 25.4065, <10> 22.3455, <11> 30.8993, <12> 25.3373, <13> 21.4109, <14> 33.8866, <15> 23.8517, <16> 25.2782, <17> 28.3213, <18> 29.113, <19> 24.8555, <20> 18.6628;
param workload[JOB] := <1> 621.5248, <2> 377.3656, <3> 765.2416, <4> 577.9312, <5> 158.5232, <6> 873.0311, <7> 312.0346, <8> 197.0795, <9> 645.4902, <10> 499.3214, <11> 954.7667, <12> 641.9788, <13> 458.4266, <14> 1148.3017, <15> 568.9036, <16> 638.9874, <17> 802.096, <18> 847.5668, <19> 617.7959, <20> 348.3001;
param capacity[MACHINE] := <1> 12054.6668, <2> 12054.6668, <3> 12054.6668, <4> 12054.6668, <5> 12054.6668, <6> 12054.6668, <7> 12054.6668;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
