set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 28.5029, <2> 21.441, <3> 27.338, <4> 28.6891, <5> 24.8043, <6> 21.9066, <7> 29.9959, <8> 23.6577, <9> 13.2652, <10> 27.5668, <11> 33.5345, <12> 22.3261, <13> 37.3892, <14> 21.6333, <15> 23.5741, <16> 23.9439, <17> 23.9388, <18> 29.5331, <19> 27.8354, <20> 25.8543;
param workload[JOB] := <1> 812.4153, <2> 459.7165, <3> 747.3662, <4> 823.0645, <5> 615.2533, <6> 479.8991, <7> 899.754, <8> 559.6868, <9> 175.9655, <10> 759.9285, <11> 1124.5627, <12> 498.4547, <13> 1397.9523, <14> 467.9997, <15> 555.7382, <16> 573.3103, <17> 573.0661, <18> 872.204, <19> 774.8095, <20> 668.4448;
param capacity[MACHINE] := <1> 13839.592, <2> 13839.592, <3> 13839.592, <4> 13839.592, <5> 13839.592, <6> 13839.592, <7> 13839.592;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
