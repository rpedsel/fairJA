set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 27.3465, <2> 27.4551, <3> 23.0354, <4> 14.5187, <5> 22.2225, <6> 14.9221, <7> 24.3992, <8> 20.5428, <9> 32.619, <10> 29.3332, <11> 25.4737, <12> 20.5396, <13> 34.1482, <14> 19.6126, <15> 27.5197, <16> 29.1046, <17> 30.6791, <18> 21.4899, <19> 22.2419, <20> 20.2679;
param workload[JOB] := <1> 26.443, <2> 9.4458, <3> 23.9372, <4> 36.7211, <5> 46.6906, <6> 8.1435, <7> 41.9912, <8> 6.9657, <9> 6.6402, <10> 46.7969, <11> 46.0441, <12> 31.3755, <13> 0.057, <14> 43.0931, <15> 16.6882, <16> 32.6939, <17> 43.5911, <18> 42.348, <19> 48.0355, <20> 33.5035;
param capacity[MACHINE] := <1> 63.3434, <2> 63.3434, <3> 63.3434, <4> 63.3434, <5> 63.3434, <6> 63.3434, <7> 63.3434;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
