set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 32.1303, <2> 40.9683, <3> 10.7437, <4> 49.018, <5> 16.5006, <6> 48.5582, <7> 42.9994, <8> 20.6606, <9> 21.7728, <10> 15.4727, <11> 9.2643, <12> 18.73, <13> 28.7372, <14> 42.4591, <15> 30.0916, <16> 16.6213, <17> 4.6205, <18> 23.7473, <19> 3.0932, <20> 3.115;
param workload[JOB] := <1> 5.6598, <2> 21.1026, <3> 14.4998, <4> 48.6247, <5> 15.3309, <6> 46.014, <7> 4.7424, <8> 9.9031, <9> 20.6084, <10> 9.2631, <11> 0.0551, <12> 24.4482, <13> 15.9642, <14> 17.1259, <15> 6.1716, <16> 47.5777, <17> 22.0947, <18> 46.2232, <19> 45.3582, <20> 42.7925;
param capacity[MACHINE] := <1> 463.5601, <2> 463.5601, <3> 463.5601, <4> 463.5601, <5> 463.5601, <6> 463.5601, <7> 463.5601;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
