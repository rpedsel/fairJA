set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 23.7946, <2> 16.7579, <3> 21.2328, <4> 28.1596, <5> 29.4753, <6> 30.0385, <7> 26.7663, <8> 26.5671, <9> 27.1131, <10> 29.684, <11> 20.6342, <12> 26.0052, <13> 20.2418, <14> 34.9362, <15> 15.0366, <16> 21.9209, <17> 19.7491, <18> 23.6217, <19> 23.553, <20> 24.7008;
param workload[JOB] := <1> 566.183, <2> 280.8272, <3> 450.8318, <4> 792.9631, <5> 868.7933, <6> 902.3115, <7> 716.4348, <8> 705.8108, <9> 735.1202, <10> 881.1399, <11> 425.7702, <12> 676.2704, <13> 409.7305, <14> 1220.5381, <15> 226.0993, <16> 480.5259, <17> 390.027, <18> 557.9847, <19> 554.7438, <20> 610.1295;
param capacity[MACHINE] := <1> 1778.8907, <2> 1778.8907, <3> 1778.8907, <4> 1778.8907, <5> 1778.8907, <6> 1778.8907, <7> 1778.8907;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
