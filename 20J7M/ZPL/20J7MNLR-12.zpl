set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 22.3065, <2> 18.1441, <3> 25.1516, <4> 22.0248, <5> 20.9415, <6> 21.1617, <7> 27.1314, <8> 30.6669, <9> 22.0691, <10> 20.2551, <11> 27.6942, <12> 25.5227, <13> 13.8052, <14> 21.6771, <15> 30.4022, <16> 25.2517, <17> 23.5574, <18> 23.5671, <19> 20.6252, <20> 30.1886;
param workload[JOB] := <1> 47.3744, <2> 23.7197, <3> 34.4576, <4> 35.0209, <5> 34.1429, <6> 39.7834, <7> 22.0359, <8> 49.9087, <9> 36.7619, <10> 47.0002, <11> 14.8021, <12> 19.1617, <13> 16.629, <14> 18.0782, <15> 25.2571, <16> 40.0419, <17> 1.9351, <18> 1.9941, <19> 4.7186, <20> 28.4016;
param capacity[MACHINE] := <1> 77.3179, <2> 77.3179, <3> 77.3179, <4> 77.3179, <5> 77.3179, <6> 77.3179, <7> 77.3179;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
