set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 33.1154, <2> 28.4573, <3> 33.5254, <4> 32.727, <5> 24.1482, <6> 17.1509, <7> 32.3166, <8> 25.0271, <9> 27.4494, <10> 15.7631, <11> 26.8182, <12> 13.9525, <13> 17.7379, <14> 27.4084, <15> 28.9261, <16> 26.9481, <17> 15.1032, <18> 25.0727, <19> 28.8115, <20> 22.4362;
param workload[JOB] := <1> 6.3645, <2> 34.0142, <3> 29.0803, <4> 24.7381, <5> 14.973, <6> 22.8286, <7> 43.5433, <8> 49.6132, <9> 0.4227, <10> 38.9223, <11> 23.2204, <12> 46.6674, <13> 49.0546, <14> 29.2613, <15> 13.9102, <16> 5.1721, <17> 39.2245, <18> 41.6385, <19> 23.7456, <20> 9.0037;
param capacity[MACHINE] := <1> 77.9141, <2> 77.9141, <3> 77.9141, <4> 77.9141, <5> 77.9141, <6> 77.9141, <7> 77.9141;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
