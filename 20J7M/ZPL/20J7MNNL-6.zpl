set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 21.7314, <2> 28.8391, <3> 23.6448, <4> 24.8437, <5> 16.9991, <6> 29.9782, <7> 19.3423, <8> 30.4645, <9> 21.527, <10> 23.99, <11> 27.8121, <12> 28.1079, <13> 20.0516, <14> 30.1095, <15> 24.5132, <16> 30.6347, <17> 28.1089, <18> 27.9985, <19> 27.3854, <20> 22.3431;
param workload[JOB] := <1> 21.7314, <2> 28.8391, <3> 23.6448, <4> 24.8437, <5> 16.9991, <6> 29.9782, <7> 19.3423, <8> 30.4645, <9> 21.527, <10> 23.99, <11> 27.8121, <12> 28.1079, <13> 20.0516, <14> 30.1095, <15> 24.5132, <16> 30.6347, <17> 28.1089, <18> 27.9985, <19> 27.3854, <20> 22.3431;
param capacity[MACHINE] := <1> 508.425, <2> 508.425, <3> 508.425, <4> 508.425, <5> 508.425, <6> 508.425, <7> 508.425;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
