set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 24.4837, <2> 18.1926, <3> 24.9928, <4> 22.9158, <5> 22.3745, <6> 28.2273, <7> 18.5512, <8> 18.0812, <9> 39.673, <10> 24.0021, <11> 25.7948, <12> 24.4373, <13> 28.8422, <14> 27.8913, <15> 16.5047, <16> 30.1812, <17> 31.1343, <18> 23.5072, <19> 31.3499, <20> 20.0799;
param workload[JOB] := <1> 599.4516, <2> 330.9707, <3> 624.6401, <4> 525.1339, <5> 500.6183, <6> 796.7805, <7> 344.147, <8> 326.9298, <9> 1573.9469, <10> 576.1008, <11> 665.3717, <12> 597.1816, <13> 831.8725, <14> 777.9246, <15> 272.4051, <16> 910.9048, <17> 969.3446, <18> 552.5885, <19> 982.8162, <20> 403.2024;
param capacity[MACHINE] := <1> 1410.2498, <2> 1410.2498, <3> 1410.2498, <4> 1410.2498, <5> 1410.2498, <6> 1410.2498, <7> 1410.2498;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
