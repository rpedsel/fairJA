set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 17.3542, <2> 27.685, <3> 20.8902, <4> 26.532, <5> 33.2345, <6> 21.6395, <7> 28.6676, <8> 21.8033, <9> 29.0633, <10> 17.6655, <11> 34.6157, <12> 20.4457, <13> 20.0311, <14> 30.3403, <15> 31.4364, <16> 15.8309, <17> 21.1281, <18> 29.5122, <19> 21.6063, <20> 25.3606;
param workload[JOB] := <1> 17.3542, <2> 27.685, <3> 20.8902, <4> 26.532, <5> 33.2345, <6> 21.6395, <7> 28.6676, <8> 21.8033, <9> 29.0633, <10> 17.6655, <11> 34.6157, <12> 20.4457, <13> 20.0311, <14> 30.3403, <15> 31.4364, <16> 15.8309, <17> 21.1281, <18> 29.5122, <19> 21.6063, <20> 25.3606;
param capacity[MACHINE] := <1> 494.8424, <2> 494.8424, <3> 494.8424, <4> 494.8424, <5> 494.8424, <6> 494.8424, <7> 494.8424;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
