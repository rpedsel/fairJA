set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 30.4357, <2> 18.9562, <3> 29.7667, <4> 28.2633, <5> 20.8449, <6> 27.4648, <7> 23.3823, <8> 24.7369, <9> 28.4986, <10> 31.0198, <11> 10.4675, <12> 19.8589, <13> 25.1887, <14> 33.7396, <15> 22.1386, <16> 20.0732, <17> 28.0528, <18> 21.6074, <19> 22.2942, <20> 26.4882;
param workload[JOB] := <1> 30.4357, <2> 18.9562, <3> 29.7667, <4> 28.2633, <5> 20.8449, <6> 27.4648, <7> 23.3823, <8> 24.7369, <9> 28.4986, <10> 31.0198, <11> 10.4675, <12> 19.8589, <13> 25.1887, <14> 33.7396, <15> 22.1386, <16> 20.0732, <17> 28.0528, <18> 21.6074, <19> 22.2942, <20> 26.4882;
param capacity[MACHINE] := <1> 70.4683, <2> 70.4683, <3> 70.4683, <4> 70.4683, <5> 70.4683, <6> 70.4683, <7> 70.4683;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
