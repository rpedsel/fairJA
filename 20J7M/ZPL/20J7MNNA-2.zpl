set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 28.7078, <2> 19.0823, <3> 23.2678, <4> 20.993, <5> 15.7576, <6> 31.7523, <7> 32.6813, <8> 29.7896, <9> 24.6196, <10> 30.0212, <11> 29.3075, <12> 15.8234, <13> 30.4802, <14> 28.1296, <15> 18.6255, <16> 31.2169, <17> 24.8372, <18> 23.3607, <19> 13.3944, <20> 21.8258;
param workload[JOB] := <1> 824.1378, <2> 364.1342, <3> 541.3905, <4> 440.706, <5> 248.302, <6> 1008.2086, <7> 1068.0674, <8> 887.4203, <9> 606.1247, <10> 901.2724, <11> 858.9296, <12> 250.38, <13> 929.0426, <14> 791.2744, <15> 346.9093, <16> 974.4948, <17> 616.8865, <18> 545.7223, <19> 179.41, <20> 476.3655;
param capacity[MACHINE] := <1> 12859.1789, <2> 12859.1789, <3> 12859.1789, <4> 12859.1789, <5> 12859.1789, <6> 12859.1789, <7> 12859.1789;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
