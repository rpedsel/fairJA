set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 25.1598, <2> 23.5809, <3> 29.3161, <4> 27.7945, <5> 24.0665, <6> 35.5446, <7> 22.084, <8> 17.8121, <9> 26.7063, <10> 29.2224, <11> 37.4444, <12> 20.2129, <13> 32.5644, <14> 30.4999, <15> 25.7784, <16> 16.4958, <17> 29.2863, <18> 24.3638, <19> 24.1346, <20> 26.7011;
param workload[JOB] := <1> 633.0155, <2> 556.0588, <3> 859.4337, <4> 772.5342, <5> 579.1964, <6> 1263.4186, <7> 487.7031, <8> 317.2709, <9> 713.2265, <10> 853.9487, <11> 1402.0831, <12> 408.5613, <13> 1060.4401, <14> 930.2439, <15> 664.5259, <16> 272.1114, <17> 857.6874, <18> 593.5948, <19> 582.4789, <20> 712.9487;
param capacity[MACHINE] := <1> 14520.4819, <2> 14520.4819, <3> 14520.4819, <4> 14520.4819, <5> 14520.4819, <6> 14520.4819, <7> 14520.4819;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
