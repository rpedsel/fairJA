set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 26.9084, <2> 23.1654, <3> 34.5448, <4> 28.864, <5> 27.5313, <6> 23.0568, <7> 21.8931, <8> 28.0984, <9> 17.173, <10> 22.2524, <11> 27.0625, <12> 35.1536, <13> 18.307, <14> 25.6938, <15> 18.403, <16> 21.8667, <17> 28.1688, <18> 26.5809, <19> 19.9231, <20> 23.9974;
param workload[JOB] := <1> 724.062, <2> 536.6358, <3> 1193.3432, <4> 833.1305, <5> 757.9725, <6> 531.616, <7> 479.3078, <8> 789.5201, <9> 294.9119, <10> 495.1693, <11> 732.3789, <12> 1235.7756, <13> 335.1462, <14> 660.1714, <15> 338.6704, <16> 478.1526, <17> 793.4813, <18> 706.5442, <19> 396.9299, <20> 575.8752;
param capacity[MACHINE] := <1> 12888.7948, <2> 12888.7948, <3> 12888.7948, <4> 12888.7948, <5> 12888.7948, <6> 12888.7948, <7> 12888.7948;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
