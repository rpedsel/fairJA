set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 30.0271, <2> 29.9622, <3> 25.5322, <4> 26.5188, <5> 26.8482, <6> 27.5966, <7> 24.7844, <8> 27.122, <9> 29.1016, <10> 23.2092, <11> 24.879, <12> 21.2743, <13> 20.5941, <14> 23.1693, <15> 18.4584, <16> 22.1998, <17> 29.3946, <18> 16.8284, <19> 18.2963, <20> 23.7561;
param workload[JOB] := <1> 24.8537, <2> 21.4104, <3> 43.3362, <4> 37.8407, <5> 26.4132, <6> 0.4657, <7> 34.1044, <8> 24.809, <9> 32.1712, <10> 2.6151, <11> 18.2903, <12> 23.8077, <13> 20.3414, <14> 40.2022, <15> 33.6278, <16> 38.0261, <17> 12.4528, <18> 25.8547, <19> 43.115, <20> 16.9112;
param capacity[MACHINE] := <1> 520.6488, <2> 520.6488, <3> 520.6488, <4> 520.6488, <5> 520.6488, <6> 520.6488, <7> 520.6488;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
