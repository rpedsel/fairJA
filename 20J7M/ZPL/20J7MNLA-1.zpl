set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 27.7886, <2> 23.549, <3> 24.1327, <4> 27.3481, <5> 18.7779, <6> 20.4668, <7> 26.067, <8> 23.9425, <9> 26.2744, <10> 25.7499, <11> 26.1147, <12> 20.5977, <13> 20.5145, <14> 24.644, <15> 24.2076, <16> 25.0141, <17> 23.8038, <18> 19.6126, <19> 20.6932, <20> 27.5165;
param workload[JOB] := <1> 772.2063, <2> 554.5554, <3> 582.3872, <4> 747.9186, <5> 352.6095, <6> 418.8899, <7> 679.4885, <8> 573.2433, <9> 690.3441, <10> 663.0574, <11> 681.9776, <12> 424.2652, <13> 420.8447, <14> 607.3267, <15> 586.0079, <16> 625.7052, <17> 566.6209, <18> 384.6541, <19> 428.2085, <20> 757.1578;
param capacity[MACHINE] := <1> 1645.3527, <2> 1645.3527, <3> 1645.3527, <4> 1645.3527, <5> 1645.3527, <6> 1645.3527, <7> 1645.3527;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
