set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 16.6291, <2> 30.2545, <3> 24.3362, <4> 33.0768, <5> 29.3056, <6> 28.2762, <7> 20.17, <8> 20.4614, <9> 23.7522, <10> 24.6344, <11> 21.8571, <12> 24.2916, <13> 27.8707, <14> 31.0206, <15> 24.604, <16> 30.1005, <17> 34.1183, <18> 26.5509, <19> 30.3848, <20> 22.6173;
param workload[JOB] := <1> 276.527, <2> 915.3348, <3> 592.2506, <4> 1094.0747, <5> 858.8182, <6> 799.5435, <7> 406.8289, <8> 418.6689, <9> 564.167, <10> 606.8537, <11> 477.7328, <12> 590.0818, <13> 776.7759, <14> 962.2776, <15> 605.3568, <16> 906.0401, <17> 1164.0584, <18> 704.9503, <19> 923.2361, <20> 511.5423;
param capacity[MACHINE] := <1> 14155.1194, <2> 14155.1194, <3> 14155.1194, <4> 14155.1194, <5> 14155.1194, <6> 14155.1194, <7> 14155.1194;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
