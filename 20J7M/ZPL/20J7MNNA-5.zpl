set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 30.9422, <2> 26.585, <3> 30.566, <4> 27.2194, <5> 31.6466, <6> 26.8558, <7> 21.3517, <8> 25.4806, <9> 23.3366, <10> 26.0457, <11> 25.1052, <12> 24.6167, <13> 18.6543, <14> 31.5925, <15> 24.0632, <16> 19.7022, <17> 14.1365, <18> 30.1745, <19> 11.9084, <20> 26.0923;
param workload[JOB] := <1> 957.4197, <2> 706.7622, <3> 934.2804, <4> 740.8957, <5> 1001.5073, <6> 721.234, <7> 455.8951, <8> 649.261, <9> 544.5969, <10> 678.3785, <11> 630.2711, <12> 605.9819, <13> 347.9829, <14> 998.0861, <15> 579.0376, <16> 388.1767, <17> 199.8406, <18> 910.5005, <19> 141.81, <20> 680.8081;
param capacity[MACHINE] := <1> 12872.7263, <2> 12872.7263, <3> 12872.7263, <4> 12872.7263, <5> 12872.7263, <6> 12872.7263, <7> 12872.7263;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
