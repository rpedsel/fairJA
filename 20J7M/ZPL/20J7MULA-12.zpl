set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 45.6084, <2> 33.3062, <3> 1.5242, <4> 42.8328, <5> 20.0889, <6> 49.3232, <7> 11.6917, <8> 4.6773, <9> 10.0322, <10> 19.6569, <11> 36.26, <12> 16.4844, <13> 49.6437, <14> 13.5427, <15> 0.1252, <16> 8.9893, <17> 32.41, <18> 48.9254, <19> 0.9374, <20> 8.9462;
param workload[JOB] := <1> 2080.1262, <2> 1109.303, <3> 2.3232, <4> 1834.6488, <5> 403.5639, <6> 2432.7781, <7> 136.6958, <8> 21.8771, <9> 100.645, <10> 386.3937, <11> 1314.7876, <12> 271.7354, <13> 2464.4969, <14> 183.4047, <15> 0.0157, <16> 80.8075, <17> 1050.4081, <18> 2393.6948, <19> 0.8787, <20> 80.0345;
param capacity[MACHINE] := <1> 2976.4911, <2> 2976.4911, <3> 2976.4911, <4> 2976.4911, <5> 2976.4911, <6> 2976.4911, <7> 2976.4911;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
