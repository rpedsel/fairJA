set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 40.4192, <2> 6.3992, <3> 43.9693, <4> 10.501, <5> 19.7918, <6> 33.8514, <7> 5.4017, <8> 10.5307, <9> 47.3228, <10> 3.6545, <11> 32.2441, <12> 43.4578, <13> 18.671, <14> 36.544, <15> 12.1516, <16> 27.7817, <17> 46.5835, <18> 25.4388, <19> 33.8569, <20> 29.8432;
param workload[JOB] := <1> 1633.7117, <2> 40.9498, <3> 1933.2993, <4> 110.271, <5> 391.7153, <6> 1145.9173, <7> 29.1784, <8> 110.8956, <9> 2239.4474, <10> 13.3554, <11> 1039.682, <12> 1888.5804, <13> 348.6062, <14> 1335.4639, <15> 147.6614, <16> 771.8229, <17> 2170.0225, <18> 647.1325, <19> 1146.2897, <20> 890.6166;
param capacity[MACHINE] := <1> 2576.3742, <2> 2576.3742, <3> 2576.3742, <4> 2576.3742, <5> 2576.3742, <6> 2576.3742, <7> 2576.3742;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
