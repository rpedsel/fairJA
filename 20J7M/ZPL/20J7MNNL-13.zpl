set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 21.0065, <2> 22.3931, <3> 30.5249, <4> 22.1054, <5> 33.9224, <6> 25.5763, <7> 26.8507, <8> 26.8044, <9> 30.1619, <10> 31.8559, <11> 27.1997, <12> 22.5884, <13> 36.4992, <14> 28.6727, <15> 17.9192, <16> 22.1579, <17> 19.0059, <18> 18.7666, <19> 21.7064, <20> 12.8212;
param workload[JOB] := <1> 21.0065, <2> 22.3931, <3> 30.5249, <4> 22.1054, <5> 33.9224, <6> 25.5763, <7> 26.8507, <8> 26.8044, <9> 30.1619, <10> 31.8559, <11> 27.1997, <12> 22.5884, <13> 36.4992, <14> 28.6727, <15> 17.9192, <16> 22.1579, <17> 19.0059, <18> 18.7666, <19> 21.7064, <20> 12.8212;
param capacity[MACHINE] := <1> 498.5387, <2> 498.5387, <3> 498.5387, <4> 498.5387, <5> 498.5387, <6> 498.5387, <7> 498.5387;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
