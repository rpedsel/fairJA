set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 3.2733, <2> 23.6263, <3> 17.1182, <4> 33.9642, <5> 39.5081, <6> 44.9855, <7> 15.6851, <8> 41.9927, <9> 44.1442, <10> 39.7481, <11> 44.9812, <12> 44.644, <13> 4.0488, <14> 1.7712, <15> 40.3427, <16> 31.3949, <17> 44.6795, <18> 33.8545, <19> 17.0905, <20> 2.5773;
param workload[JOB] := <1> 10.7145, <2> 558.2021, <3> 293.0328, <4> 1153.5669, <5> 1560.89, <6> 2023.6952, <7> 246.0224, <8> 1763.3869, <9> 1948.7104, <10> 1579.9115, <11> 2023.3084, <12> 1993.0867, <13> 16.3928, <14> 3.1371, <15> 1627.5334, <16> 985.6397, <17> 1996.2577, <18> 1146.1272, <19> 292.0852, <20> 6.6425;
param capacity[MACHINE] := <1> 2274.4654, <2> 2274.4654, <3> 2274.4654, <4> 2274.4654, <5> 2274.4654, <6> 2274.4654, <7> 2274.4654;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
