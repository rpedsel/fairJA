set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 29.754, <2> 40.1015, <3> 11.7654, <4> 9.6645, <5> 37.3941, <6> 33.1386, <7> 22.7245, <8> 43.7281, <9> 3.0593, <10> 20.1563, <11> 3.8365, <12> 25.1608, <13> 20.5586, <14> 19.9089, <15> 32.0258, <16> 0.5227, <17> 4.4201, <18> 32.1507, <19> 27.979, <20> 39.1939;
param workload[JOB] := <1> 885.3005, <2> 1608.1303, <3> 138.4246, <4> 93.4026, <5> 1398.3187, <6> 1098.1668, <7> 516.4029, <8> 1912.1467, <9> 9.3593, <10> 406.2764, <11> 14.7187, <12> 633.0659, <13> 422.656, <14> 396.3643, <15> 1025.6519, <16> 0.2732, <17> 19.5373, <18> 1033.6675, <19> 782.8244, <20> 1536.1618;
param capacity[MACHINE] := <1> 2000.9363, <2> 2000.9363, <3> 2000.9363, <4> 2000.9363, <5> 2000.9363, <6> 2000.9363, <7> 2000.9363;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
