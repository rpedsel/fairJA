set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 39.1207, <2> 37.9132, <3> 17.4354, <4> 11.0526, <5> 23.4286, <6> 29.2712, <7> 48.7298, <8> 45.0511, <9> 13.2025, <10> 40.0454, <11> 17.9953, <12> 0.1476, <13> 39.3022, <14> 11.6793, <15> 7.7646, <16> 46.8578, <17> 5.6242, <18> 2.0154, <19> 34.7561, <20> 15.8222;
param workload[JOB] := <1> 39.1207, <2> 37.9132, <3> 17.4354, <4> 11.0526, <5> 23.4286, <6> 29.2712, <7> 48.7298, <8> 45.0511, <9> 13.2025, <10> 40.0454, <11> 17.9953, <12> 0.1476, <13> 39.3022, <14> 11.6793, <15> 7.7646, <16> 46.8578, <17> 5.6242, <18> 2.0154, <19> 34.7561, <20> 15.8222;
param capacity[MACHINE] := <1> 52.2017, <2> 52.2017, <3> 52.2017, <4> 52.2017, <5> 52.2017, <6> 52.2017, <7> 52.2017;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
