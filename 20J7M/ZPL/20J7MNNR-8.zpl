set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 22.3058, <2> 26.7545, <3> 18.0354, <4> 20.4852, <5> 26.6203, <6> 28.6186, <7> 22.8994, <8> 26.5012, <9> 28.7865, <10> 22.8278, <11> 25.78, <12> 19.562, <13> 29.7518, <14> 17.8602, <15> 32.7099, <16> 30.9057, <17> 30.0047, <18> 17.0921, <19> 29.5131, <20> 13.8052;
param workload[JOB] := <1> 25.4976, <2> 32.4924, <3> 24.5472, <4> 22.7886, <5> 27.0843, <6> 13.2883, <7> 27.6872, <8> 37.8524, <9> 1.7343, <10> 6.5079, <11> 6.1637, <12> 31.7624, <13> 40.8359, <14> 6.6788, <15> 36.5703, <16> 21.2558, <17> 39.9487, <18> 10.5761, <19> 3.9792, <20> 24.639;
param capacity[MACHINE] := <1> 441.8901, <2> 441.8901, <3> 441.8901, <4> 441.8901, <5> 441.8901, <6> 441.8901, <7> 441.8901;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
