set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 23.4919, <2> 20.3176, <3> 18.2132, <4> 34.0751, <5> 39.93, <6> 3.7902, <7> 31.0549, <8> 18.6698, <9> 18.1304, <10> 6.2046, <11> 9.65, <12> 7.429, <13> 27.876, <14> 37.6589, <15> 15.1311, <16> 44.5128, <17> 34.5053, <18> 23.1848, <19> 10.038, <20> 9.5944;
param workload[JOB] := <1> 551.8694, <2> 412.8049, <3> 331.7207, <4> 1161.1124, <5> 1594.4049, <6> 14.3656, <7> 964.4068, <8> 348.5614, <9> 328.7114, <10> 38.4971, <11> 93.1225, <12> 55.19, <13> 777.0714, <14> 1418.1927, <15> 228.9502, <16> 1981.3894, <17> 1190.6157, <18> 537.535, <19> 100.7614, <20> 92.0525;
param capacity[MACHINE] := <1> 2812.4394, <2> 2812.4394, <3> 2812.4394, <4> 2812.4394, <5> 2812.4394, <6> 2812.4394, <7> 2812.4394;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
