set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 31.2306, <2> 13.362, <3> 16.9047, <4> 27.5529, <5> 29.109, <6> 12.6299, <7> 8.8012, <8> 34.983, <9> 38.8107, <10> 8.1739, <11> 1.9557, <12> 11.563, <13> 12.6643, <14> 15.2395, <15> 40.7827, <16> 24.3036, <17> 32.4472, <18> 22.7065, <19> 19.9301, <20> 19.6739;
param workload[JOB] := <1> 975.3504, <2> 178.543, <3> 285.7689, <4> 759.1623, <5> 847.3339, <6> 159.5144, <7> 77.4611, <8> 1223.8103, <9> 1506.2704, <10> 66.8126, <11> 3.8248, <12> 133.703, <13> 160.3845, <14> 232.2424, <15> 1663.2286, <16> 590.665, <17> 1052.8208, <18> 515.5851, <19> 397.2089, <20> 387.0623;
param capacity[MACHINE] := <1> 1602.3932, <2> 1602.3932, <3> 1602.3932, <4> 1602.3932, <5> 1602.3932, <6> 1602.3932, <7> 1602.3932;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
