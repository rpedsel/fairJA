set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 24.6578, <2> 21.7143, <3> 23.3668, <4> 27.234, <5> 24.8136, <6> 24.7501, <7> 29.9912, <8> 26.631, <9> 18.1112, <10> 22.5292, <11> 28.759, <12> 16.8466, <13> 28.9751, <14> 25.2567, <15> 24.1036, <16> 30.2395, <17> 19.4892, <18> 22.5535, <19> 31.5887, <20> 20.3573;
param workload[JOB] := <1> 6.2975, <2> 5.0592, <3> 0.1242, <4> 9.5086, <5> 33.7804, <6> 38.6744, <7> 6.0319, <8> 15.8946, <9> 10.9227, <10> 17.8894, <11> 25.2244, <12> 6.1095, <13> 10.3629, <14> 44.4374, <15> 44.7012, <16> 13.0074, <17> 49.3399, <18> 22.8775, <19> 39.5128, <20> 23.2409;
param capacity[MACHINE] := <1> 60.4281, <2> 60.4281, <3> 60.4281, <4> 60.4281, <5> 60.4281, <6> 60.4281, <7> 60.4281;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
