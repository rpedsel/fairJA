set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 16.5792, <2> 24.2004, <3> 21.5499, <4> 29.7031, <5> 28.074, <6> 24.0878, <7> 27.5556, <8> 24.4171, <9> 28.4978, <10> 20.1813, <11> 21.7802, <12> 21.638, <13> 27.2832, <14> 22.3083, <15> 23.3121, <16> 23.8419, <17> 25.2243, <18> 25.7307, <19> 22.9653, <20> 30.4419;
param workload[JOB] := <1> 40.2159, <2> 21.672, <3> 9.7956, <4> 36.1229, <5> 18.2351, <6> 11.3626, <7> 1.1459, <8> 25.1408, <9> 19.7865, <10> 46.9058, <11> 21.6035, <12> 9.6921, <13> 46.9632, <14> 29.7507, <15> 3.8526, <16> 21.7753, <17> 23.0618, <18> 26.3622, <19> 32.5534, <20> 8.2707;
param capacity[MACHINE] := <1> 64.8955, <2> 64.8955, <3> 64.8955, <4> 64.8955, <5> 64.8955, <6> 64.8955, <7> 64.8955;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
