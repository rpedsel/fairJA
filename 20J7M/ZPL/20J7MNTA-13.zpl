set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 22.2455, <2> 18.1275, <3> 26.136, <4> 24.8264, <5> 25.4208, <6> 34.1678, <7> 22.5278, <8> 29.6583, <9> 30.4465, <10> 29.2769, <11> 22.6443, <12> 24.6786, <13> 32.2354, <14> 32.2676, <15> 33.0227, <16> 27.1071, <17> 28.693, <18> 22.4151, <19> 22.281, <20> 33.4233;
param workload[JOB] := <1> 494.8623, <2> 328.6063, <3> 683.0905, <4> 616.3501, <5> 646.2171, <6> 1167.4386, <7> 507.5018, <8> 879.6148, <9> 926.9894, <10> 857.1369, <11> 512.7643, <12> 609.0333, <13> 1039.121, <14> 1041.198, <15> 1090.4987, <16> 734.7949, <17> 823.2882, <18> 502.4367, <19> 496.443, <20> 1117.117;
param capacity[MACHINE] := <1> 1615.1253, <2> 1615.1253, <3> 1615.1253, <4> 1615.1253, <5> 1615.1253, <6> 1615.1253, <7> 1615.1253;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
