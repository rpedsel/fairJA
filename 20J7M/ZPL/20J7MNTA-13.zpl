set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 32.5883, <2> 33.5467, <3> 16.732, <4> 26.7105, <5> 30.9578, <6> 20.8941, <7> 22.7493, <8> 22.3011, <9> 27.8109, <10> 28.7335, <11> 21.3018, <12> 34.0572, <13> 18.3885, <14> 29.4202, <15> 25.7464, <16> 23.4439, <17> 22.4752, <18> 32.4419, <19> 24.2085, <20> 28.1484;
param workload[JOB] := <1> 1061.9973, <2> 1125.3811, <3> 279.9598, <4> 713.4508, <5> 958.3854, <6> 436.5634, <7> 517.5307, <8> 497.3391, <9> 773.4462, <10> 825.614, <11> 453.7667, <12> 1159.8929, <13> 338.1369, <14> 865.5482, <15> 662.8771, <16> 549.6164, <17> 505.1346, <18> 1052.4769, <19> 586.0515, <20> 792.3324;
param capacity[MACHINE] := <1> 1516.6609, <2> 1516.6609, <3> 1516.6609, <4> 1516.6609, <5> 1516.6609, <6> 1516.6609, <7> 1516.6609;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
