set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 23.3696, <2> 15.6113, <3> 27.1632, <4> 27.6457, <5> 26.8489, <6> 32.8031, <7> 19.8886, <8> 13.7871, <9> 26.3307, <10> 25.97, <11> 27.6838, <12> 31.0162, <13> 25.4967, <14> 28.7319, <15> 20.7024, <16> 27.6625, <17> 18.1089, <18> 22.228, <19> 26.0524, <20> 29.6566;
param workload[JOB] := <1> 23.3696, <2> 15.6113, <3> 27.1632, <4> 27.6457, <5> 26.8489, <6> 32.8031, <7> 19.8886, <8> 13.7871, <9> 26.3307, <10> 25.97, <11> 27.6838, <12> 31.0162, <13> 25.4967, <14> 28.7319, <15> 20.7024, <16> 27.6625, <17> 18.1089, <18> 22.228, <19> 26.0524, <20> 29.6566;
param capacity[MACHINE] := <1> 70.9654, <2> 70.9654, <3> 70.9654, <4> 70.9654, <5> 70.9654, <6> 70.9654, <7> 70.9654;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
