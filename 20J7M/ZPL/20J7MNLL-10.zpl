set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 26.5906, <2> 10.3717, <3> 21.2577, <4> 31.1048, <5> 22.739, <6> 38.3312, <7> 26.4267, <8> 23.407, <9> 18.0656, <10> 25.9714, <11> 29.2696, <12> 25.3742, <13> 31.4222, <14> 25.9132, <15> 15.0886, <16> 26.7065, <17> 20.2618, <18> 19.866, <19> 20.1036, <20> 27.0054;
param workload[JOB] := <1> 26.5906, <2> 10.3717, <3> 21.2577, <4> 31.1048, <5> 22.739, <6> 38.3312, <7> 26.4267, <8> 23.407, <9> 18.0656, <10> 25.9714, <11> 29.2696, <12> 25.3742, <13> 31.4222, <14> 25.9132, <15> 15.0886, <16> 26.7065, <17> 20.2618, <18> 19.866, <19> 20.1036, <20> 27.0054;
param capacity[MACHINE] := <1> 69.3253, <2> 69.3253, <3> 69.3253, <4> 69.3253, <5> 69.3253, <6> 69.3253, <7> 69.3253;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
