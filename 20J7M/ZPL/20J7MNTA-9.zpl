set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 16.8345, <2> 25.3943, <3> 21.8646, <4> 33.8929, <5> 32.7186, <6> 19.1794, <7> 21.0428, <8> 26.9579, <9> 22.9266, <10> 25.8053, <11> 19.8956, <12> 32.6996, <13> 22.3597, <14> 19.9098, <15> 22.4787, <16> 24.0396, <17> 16.0399, <18> 30.4522, <19> 34.8133, <20> 26.4538;
param workload[JOB] := <1> 283.4004, <2> 644.8705, <3> 478.0607, <4> 1148.7287, <5> 1070.5068, <6> 367.8494, <7> 442.7994, <8> 726.7284, <9> 525.629, <10> 665.9135, <11> 395.8349, <12> 1069.2638, <13> 499.9562, <14> 396.4001, <15> 505.292, <16> 577.9024, <17> 257.2784, <18> 927.3365, <19> 1211.9659, <20> 699.8035;
param capacity[MACHINE] := <1> 1381.6629, <2> 1381.6629, <3> 1381.6629, <4> 1381.6629, <5> 1381.6629, <6> 1381.6629, <7> 1381.6629;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
