set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 26.6739, <2> 25.4345, <3> 24.8782, <4> 29.994, <5> 20.2596, <6> 24.1177, <7> 16.0215, <8> 18.569, <9> 20.6044, <10> 26.7933, <11> 25.8514, <12> 23.7144, <13> 28.4317, <14> 22.8669, <15> 20.2407, <16> 30.6186, <17> 25.9987, <18> 33.9947, <19> 34.761, <20> 21.3468;
param workload[JOB] := <1> 26.6739, <2> 25.4345, <3> 24.8782, <4> 29.994, <5> 20.2596, <6> 24.1177, <7> 16.0215, <8> 18.569, <9> 20.6044, <10> 26.7933, <11> 25.8514, <12> 23.7144, <13> 28.4317, <14> 22.8669, <15> 20.2407, <16> 30.6186, <17> 25.9987, <18> 33.9947, <19> 34.761, <20> 21.3468;
param capacity[MACHINE] := <1> 53.6969, <2> 53.6969, <3> 53.6969, <4> 53.6969, <5> 53.6969, <6> 53.6969, <7> 53.6969;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
