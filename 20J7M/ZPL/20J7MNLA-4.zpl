set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 28.1326, <2> 22.0699, <3> 24.4577, <4> 21.895, <5> 28.3746, <6> 25.5555, <7> 23.0038, <8> 28.8828, <9> 30.4637, <10> 18.8345, <11> 18.449, <12> 17.3564, <13> 25.8573, <14> 22.118, <15> 15.8245, <16> 16.6166, <17> 18.1449, <18> 26.5782, <19> 22.598, <20> 24.3577;
param workload[JOB] := <1> 791.4432, <2> 487.0805, <3> 598.1791, <4> 479.391, <5> 805.1179, <6> 653.0836, <7> 529.1748, <8> 834.2161, <9> 928.037, <10> 354.7384, <11> 340.3656, <12> 301.2446, <13> 668.6, <14> 489.2059, <15> 250.4148, <16> 276.1114, <17> 329.2374, <18> 706.4007, <19> 510.6696, <20> 593.2975;
param capacity[MACHINE] := <1> 1560.8584, <2> 1560.8584, <3> 1560.8584, <4> 1560.8584, <5> 1560.8584, <6> 1560.8584, <7> 1560.8584;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
