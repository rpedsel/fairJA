set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 5.7738, <2> 23.9346, <3> 35.9452, <4> 48.5153, <5> 21.3614, <6> 24.9291, <7> 41.9731, <8> 22.5618, <9> 42.8099, <10> 8.3312, <11> 45.2403, <12> 23.0923, <13> 48.7803, <14> 13.5064, <15> 46.7624, <16> 29.74, <17> 29.5309, <18> 14.5164, <19> 48.7813, <20> 23.8847;
param workload[JOB] := <1> 5.7738, <2> 23.9346, <3> 35.9452, <4> 48.5153, <5> 21.3614, <6> 24.9291, <7> 41.9731, <8> 22.5618, <9> 42.8099, <10> 8.3312, <11> 45.2403, <12> 23.0923, <13> 48.7803, <14> 13.5064, <15> 46.7624, <16> 29.74, <17> 29.5309, <18> 14.5164, <19> 48.7813, <20> 23.8847;
param capacity[MACHINE] := <1> 85.7101, <2> 85.7101, <3> 85.7101, <4> 85.7101, <5> 85.7101, <6> 85.7101, <7> 85.7101;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
