set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 33.6959, <2> 40.8522, <3> 33.4172, <4> 46.3646, <5> 0.8469, <6> 42.2845, <7> 48.8517, <8> 16.3393, <9> 14.5509, <10> 5.8107, <11> 18.2988, <12> 40.0445, <13> 48.1098, <14> 35.8942, <15> 14.9107, <16> 25.8037, <17> 19.8953, <18> 27.43, <19> 28.4376, <20> 7.0233;
param workload[JOB] := <1> 1135.4137, <2> 1668.9022, <3> 1116.7093, <4> 2149.6761, <5> 0.7172, <6> 1787.9789, <7> 2386.4886, <8> 266.9727, <9> 211.7287, <10> 33.7642, <11> 334.8461, <12> 1603.562, <13> 2314.5529, <14> 1288.3936, <15> 222.329, <16> 665.8309, <17> 395.823, <18> 752.4049, <19> 808.6971, <20> 49.3267;
param capacity[MACHINE] := <1> 2742.0168, <2> 2742.0168, <3> 2742.0168, <4> 2742.0168, <5> 2742.0168, <6> 2742.0168, <7> 2742.0168;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
