set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 24.4508, <2> 13.4517, <3> 27.2596, <4> 33.384, <5> 40.8836, <6> 11.2317, <7> 35.0762, <8> 13.7827, <9> 34.5935, <10> 39.7137, <11> 34.4108, <12> 40.4965, <13> 20.0686, <14> 32.6111, <15> 19.8265, <16> 39.0338, <17> 8.6752, <18> 14.5209, <19> 47.3745, <20> 0.4391;
param workload[JOB] := <1> 597.8416, <2> 180.9482, <3> 743.0858, <4> 1114.4915, <5> 1671.4687, <6> 126.1511, <7> 1230.3398, <8> 189.9628, <9> 1196.7102, <10> 1577.178, <11> 1184.1032, <12> 1639.9665, <13> 402.7487, <14> 1063.4838, <15> 393.0901, <16> 1523.6375, <17> 75.2591, <18> 210.8565, <19> 2244.3433, <20> 0.1928;
param capacity[MACHINE] := <1> 2480.837, <2> 2480.837, <3> 2480.837, <4> 2480.837, <5> 2480.837, <6> 2480.837, <7> 2480.837;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
