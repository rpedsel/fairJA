set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 36.3201, <2> 34.9654, <3> 28.5646, <4> 19.9908, <5> 26.2603, <6> 36.7012, <7> 24.111, <8> 20.9262, <9> 16.6793, <10> 32.989, <11> 26.1974, <12> 32.5136, <13> 19.6198, <14> 26.3878, <15> 30.2223, <16> 20.6934, <17> 26.6807, <18> 27.8606, <19> 16.9509, <20> 21.8242;
param workload[JOB] := <1> 36.3201, <2> 34.9654, <3> 28.5646, <4> 19.9908, <5> 26.2603, <6> 36.7012, <7> 24.111, <8> 20.9262, <9> 16.6793, <10> 32.989, <11> 26.1974, <12> 32.5136, <13> 19.6198, <14> 26.3878, <15> 30.2223, <16> 20.6934, <17> 26.6807, <18> 27.8606, <19> 16.9509, <20> 21.8242;
param capacity[MACHINE] := <1> 56.4063, <2> 56.4063, <3> 56.4063, <4> 56.4063, <5> 56.4063, <6> 56.4063, <7> 56.4063;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
