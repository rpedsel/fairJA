set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 25.1384, <2> 22.1073, <3> 16.6855, <4> 23.9267, <5> 32.2314, <6> 29.8084, <7> 21.3515, <8> 31.8642, <9> 24.2284, <10> 24.1727, <11> 15.9829, <12> 16.8196, <13> 22.9743, <14> 27.312, <15> 17.5998, <16> 28.1664, <17> 27.3668, <18> 21.6113, <19> 27.2261, <20> 22.335;
param workload[JOB] := <1> 49.8483, <2> 16.9022, <3> 34.8408, <4> 13.7577, <5> 25.486, <6> 39.114, <7> 39.9856, <8> 25.6944, <9> 37.4012, <10> 27.6463, <11> 24.3062, <12> 38.0795, <13> 42.5349, <14> 1.7811, <15> 11.1765, <16> 1.9823, <17> 7.7594, <18> 4.3051, <19> 27.106, <20> 29.4236;
param capacity[MACHINE] := <1> 499.1311, <2> 499.1311, <3> 499.1311, <4> 499.1311, <5> 499.1311, <6> 499.1311, <7> 499.1311;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
