set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 20.5619, <2> 25.2722, <3> 21.1894, <4> 37.9568, <5> 34.2472, <6> 35.6286, <7> 14.269, <8> 36.5496, <9> 26.2185, <10> 21.5568, <11> 21.6284, <12> 16.1156, <13> 46.7983, <14> 34.1656, <15> 47.2674, <16> 39.2536, <17> 9.7434, <18> 5.2238, <19> 14.4689, <20> 30.3531;
param workload[JOB] := <1> 422.7917, <2> 638.6841, <3> 448.9907, <4> 1440.7187, <5> 1172.8707, <6> 1269.3971, <7> 203.6044, <8> 1335.8733, <9> 687.4097, <10> 464.6956, <11> 467.7877, <12> 259.7126, <13> 2190.0809, <14> 1167.2882, <15> 2234.2071, <16> 1540.8451, <17> 94.9338, <18> 27.2881, <19> 209.3491, <20> 921.3107;
param capacity[MACHINE] := <1> 17197.8393, <2> 17197.8393, <3> 17197.8393, <4> 17197.8393, <5> 17197.8393, <6> 17197.8393, <7> 17197.8393;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
