set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 30.0572, <2> 24.5582, <3> 26.9975, <4> 27.2755, <5> 28.1068, <6> 17.7329, <7> 28.866, <8> 24.3334, <9> 17.5658, <10> 32.7253, <11> 28.6819, <12> 37.7508, <13> 27.4456, <14> 23.3098, <15> 17.3329, <16> 27.7319, <17> 31.7958, <18> 26.026, <19> 28.1546, <20> 27.3602;
param workload[JOB] := <1> 17.8454, <2> 7.9445, <3> 32.2357, <4> 11.5873, <5> 19.0179, <6> 6.6744, <7> 8.3065, <8> 46.0578, <9> 5.9185, <10> 2.4828, <11> 6.2437, <12> 49.0515, <13> 1.1271, <14> 17.8725, <15> 43.1427, <16> 38.2157, <17> 15.1631, <18> 16.3096, <19> 26.8553, <20> 48.3828;
param capacity[MACHINE] := <1> 420.4348, <2> 420.4348, <3> 420.4348, <4> 420.4348, <5> 420.4348, <6> 420.4348, <7> 420.4348;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
