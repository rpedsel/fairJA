set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 28.4934, <2> 19.7967, <3> 23.1418, <4> 24.6429, <5> 24.1288, <6> 19.501, <7> 28.6715, <8> 22.1418, <9> 21.024, <10> 28.3406, <11> 14.5873, <12> 34.5957, <13> 26.8347, <14> 31.009, <15> 24.1703, <16> 31.2234, <17> 32.1939, <18> 28.0269, <19> 25.6332, <20> 28.9533;
param workload[JOB] := <1> 3.8976, <2> 25.3822, <3> 43.6859, <4> 0.2817, <5> 31.6218, <6> 8.7105, <7> 13.4541, <8> 22.2806, <9> 12.831, <10> 27.2818, <11> 28.9038, <12> 15.7689, <13> 35.5508, <14> 1.843, <15> 13.7972, <16> 14.8272, <17> 43.4525, <18> 3.431, <19> 37.2381, <20> 39.1775;
param capacity[MACHINE] := <1> 423.4172, <2> 423.4172, <3> 423.4172, <4> 423.4172, <5> 423.4172, <6> 423.4172, <7> 423.4172;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
