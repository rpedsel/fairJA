set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 1.9367, <2> 37.9746, <3> 17.5679, <4> 26.2411, <5> 16.1271, <6> 1.4956, <7> 22.629, <8> 35.6222, <9> 40.5648, <10> 25.9386, <11> 7.1547, <12> 13.8048, <13> 39.2172, <14> 26.1114, <15> 11.4585, <16> 31.088, <17> 4.8259, <18> 41.435, <19> 4.9727, <20> 20.9863;
param workload[JOB] := <1> 12.4252, <2> 27.9005, <3> 32.357, <4> 36.4951, <5> 4.3991, <6> 19.8837, <7> 35.652, <8> 2.1367, <9> 13.0294, <10> 24.8885, <11> 16.9531, <12> 27.3191, <13> 33.8542, <14> 13.9335, <15> 16.2658, <16> 28.0462, <17> 47.581, <18> 33.2885, <19> 48.3731, <20> 45.6346;
param capacity[MACHINE] := <1> 520.4163, <2> 520.4163, <3> 520.4163, <4> 520.4163, <5> 520.4163, <6> 520.4163, <7> 520.4163;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
