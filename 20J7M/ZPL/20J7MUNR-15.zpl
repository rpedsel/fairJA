set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 49.2789, <2> 22.242, <3> 45.1026, <4> 23.6094, <5> 43.5771, <6> 19.4717, <7> 31.0208, <8> 46.5257, <9> 19.6476, <10> 36.593, <11> 1.4302, <12> 49.8938, <13> 49.6476, <14> 3.714, <15> 10.5125, <16> 7.2239, <17> 12.5993, <18> 30.712, <19> 43.7565, <20> 19.4379;
param workload[JOB] := <1> 31.8539, <2> 44.3297, <3> 41.9509, <4> 45.4343, <5> 12.1384, <6> 26.1832, <7> 47.6338, <8> 16.4724, <9> 36.4992, <10> 7.147, <11> 26.1661, <12> 10.8159, <13> 21.2934, <14> 36.8838, <15> 37.6746, <16> 0.7035, <17> 47.2686, <18> 15.3976, <19> 4.976, <20> 18.1105;
param capacity[MACHINE] := <1> 528.9328, <2> 528.9328, <3> 528.9328, <4> 528.9328, <5> 528.9328, <6> 528.9328, <7> 528.9328;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
