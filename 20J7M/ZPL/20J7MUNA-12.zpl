set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 22.295, <2> 31.8371, <3> 27.7398, <4> 6.2302, <5> 18.7376, <6> 17.3943, <7> 46.9525, <8> 44.6058, <9> 11.2894, <10> 30.2869, <11> 16.0032, <12> 25.0322, <13> 3.9025, <14> 10.1838, <15> 44.0468, <16> 19.3919, <17> 42.0195, <18> 44.7795, <19> 15.0063, <20> 19.1502;
param workload[JOB] := <1> 497.067, <2> 1013.6009, <3> 769.4965, <4> 38.8154, <5> 351.0977, <6> 302.5617, <7> 2204.5373, <8> 1989.6774, <9> 127.4506, <10> 917.2963, <11> 256.1024, <12> 626.611, <13> 15.2295, <14> 103.7098, <15> 1940.1206, <16> 376.0458, <17> 1765.6384, <18> 2005.2036, <19> 225.189, <20> 366.7302;
param capacity[MACHINE] := <1> 15892.1811, <2> 15892.1811, <3> 15892.1811, <4> 15892.1811, <5> 15892.1811, <6> 15892.1811, <7> 15892.1811;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
