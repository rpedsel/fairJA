set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 38.6383, <2> 13.7028, <3> 12.9953, <4> 20.068, <5> 3.8425, <6> 12.3447, <7> 19.6896, <8> 37.3039, <9> 38.7651, <10> 22.7469, <11> 13.5692, <12> 44.1257, <13> 41.1515, <14> 19.8673, <15> 18.9146, <16> 25.2226, <17> 35.3055, <18> 44.7893, <19> 44.5203, <20> 27.1593;
param workload[JOB] := <1> 38.6383, <2> 13.7028, <3> 12.9953, <4> 20.068, <5> 3.8425, <6> 12.3447, <7> 19.6896, <8> 37.3039, <9> 38.7651, <10> 22.7469, <11> 13.5692, <12> 44.1257, <13> 41.1515, <14> 19.8673, <15> 18.9146, <16> 25.2226, <17> 35.3055, <18> 44.7893, <19> 44.5203, <20> 27.1593;
param capacity[MACHINE] := <1> 76.3889, <2> 76.3889, <3> 76.3889, <4> 76.3889, <5> 76.3889, <6> 76.3889, <7> 76.3889;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
