set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 31.0024, <2> 22.1607, <3> 19.5225, <4> 20.6327, <5> 21.9301, <6> 20.2078, <7> 23.3189, <8> 29.3097, <9> 22.2246, <10> 23.0107, <11> 21.0569, <12> 14.6276, <13> 24.3751, <14> 22.943, <15> 12.756, <16> 25.2509, <17> 27.3119, <18> 31.2139, <19> 19.8544, <20> 25.8657;
param workload[JOB] := <1> 961.1488, <2> 491.0966, <3> 381.128, <4> 425.7083, <5> 480.9293, <6> 408.3552, <7> 543.7711, <8> 859.0585, <9> 493.9328, <10> 529.4923, <11> 443.393, <12> 213.9667, <13> 594.1455, <14> 526.3812, <15> 162.7155, <16> 637.608, <17> 745.9399, <18> 974.3076, <19> 394.1972, <20> 669.0344;
param capacity[MACHINE] := <1> 1562.33, <2> 1562.33, <3> 1562.33, <4> 1562.33, <5> 1562.33, <6> 1562.33, <7> 1562.33;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
