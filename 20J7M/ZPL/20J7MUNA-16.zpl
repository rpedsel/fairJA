set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 49.8712, <2> 18.2946, <3> 28.4534, <4> 9.7787, <5> 38.0604, <6> 42.8336, <7> 33.4149, <8> 44.744, <9> 45.3255, <10> 25.044, <11> 6.9537, <12> 14.9265, <13> 19.3943, <14> 17.6524, <15> 25.8839, <16> 2.4712, <17> 14.0193, <18> 32.0733, <19> 25.9018, <20> 42.3573;
param workload[JOB] := <1> 2487.1366, <2> 334.6924, <3> 809.596, <4> 95.623, <5> 1448.594, <6> 1834.7173, <7> 1116.5555, <8> 2002.0255, <9> 2054.401, <10> 627.2019, <11> 48.3539, <12> 222.8004, <13> 376.1389, <14> 311.6072, <15> 669.9763, <16> 6.1068, <17> 196.5408, <18> 1028.6966, <19> 670.9032, <20> 1794.1409;
param capacity[MACHINE] := <1> 18135.8082, <2> 18135.8082, <3> 18135.8082, <4> 18135.8082, <5> 18135.8082, <6> 18135.8082, <7> 18135.8082;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
