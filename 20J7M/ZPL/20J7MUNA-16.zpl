set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 45.1323, <2> 26.5036, <3> 2.2236, <4> 17.5261, <5> 34.3843, <6> 8.7705, <7> 21.92, <8> 1.1072, <9> 47.3793, <10> 6.8954, <11> 46.8727, <12> 24.1278, <13> 37.1179, <14> 48.0926, <15> 11.7296, <16> 12.3374, <17> 10.9335, <18> 20.4828, <19> 31.7313, <20> 14.4839;
param workload[JOB] := <1> 2036.9245, <2> 702.4408, <3> 4.9444, <4> 307.1642, <5> 1182.2801, <6> 76.9217, <7> 480.4864, <8> 1.2259, <9> 2244.7981, <10> 47.5465, <11> 2197.05, <12> 582.1507, <13> 1377.7385, <14> 2312.8982, <15> 137.5835, <16> 152.2114, <17> 119.5414, <18> 419.5451, <19> 1006.8754, <20> 209.7834;
param capacity[MACHINE] := <1> 15600.1102, <2> 15600.1102, <3> 15600.1102, <4> 15600.1102, <5> 15600.1102, <6> 15600.1102, <7> 15600.1102;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
