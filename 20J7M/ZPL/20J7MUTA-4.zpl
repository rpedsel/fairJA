set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 40.3272, <2> 44.612, <3> 10.2098, <4> 6.1643, <5> 48.0661, <6> 4.202, <7> 12.8616, <8> 37.1868, <9> 4.488, <10> 13.8934, <11> 2.3731, <12> 21.5625, <13> 10.2248, <14> 13.3802, <15> 45.1954, <16> 12.0794, <17> 40.4657, <18> 49.2567, <19> 0.0663, <20> 35.4336;
param workload[JOB] := <1> 1626.2831, <2> 1990.2305, <3> 104.24, <4> 37.9986, <5> 2310.35, <6> 17.6568, <7> 165.4208, <8> 1382.8581, <9> 20.1421, <10> 193.0266, <11> 5.6316, <12> 464.9414, <13> 104.5465, <14> 179.0298, <15> 2042.6242, <16> 145.9119, <17> 1637.4729, <18> 2426.2225, <19> 0.0044, <20> 1255.54;
param capacity[MACHINE] := <1> 2907.5941, <2> 2907.5941, <3> 2907.5941, <4> 2907.5941, <5> 2907.5941, <6> 2907.5941, <7> 2907.5941;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
