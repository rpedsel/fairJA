set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 28.9564, <2> 29.9106, <3> 42.8766, <4> 13.185, <5> 13.4734, <6> 20.5094, <7> 11.348, <8> 12.2599, <9> 22.518, <10> 5.0901, <11> 47.3552, <12> 36.7608, <13> 45.1866, <14> 41.3847, <15> 20.8425, <16> 2.4167, <17> 25.9895, <18> 3.2955, <19> 25.5621, <20> 1.3056;
param workload[JOB] := <1> 838.4731, <2> 894.644, <3> 1838.4028, <4> 173.8442, <5> 181.5325, <6> 420.6355, <7> 128.7771, <8> 150.3051, <9> 507.0603, <10> 25.9091, <11> 2242.515, <12> 1351.3564, <13> 2041.8288, <14> 1712.6934, <15> 434.4098, <16> 5.8404, <17> 675.4541, <18> 10.8603, <19> 653.421, <20> 1.7046;
param capacity[MACHINE] := <1> 1531.0358, <2> 1531.0358, <3> 1531.0358, <4> 1531.0358, <5> 1531.0358, <6> 1531.0358, <7> 1531.0358;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
