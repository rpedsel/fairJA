set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 21.2392, <2> 29.4442, <3> 25.7877, <4> 25.0826, <5> 20.8319, <6> 23.1034, <7> 31.3705, <8> 43.4659, <9> 25.1057, <10> 9.2192, <11> 20.8741, <12> 30.3726, <13> 27.5435, <14> 26.0545, <15> 28.3866, <16> 25.77, <17> 21.2412, <18> 21.2105, <19> 25.71, <20> 12.2514;
param workload[JOB] := <1> 21.2392, <2> 29.4442, <3> 25.7877, <4> 25.0826, <5> 20.8319, <6> 23.1034, <7> 31.3705, <8> 43.4659, <9> 25.1057, <10> 9.2192, <11> 20.8741, <12> 30.3726, <13> 27.5435, <14> 26.0545, <15> 28.3866, <16> 25.77, <17> 21.2412, <18> 21.2105, <19> 25.71, <20> 12.2514;
param capacity[MACHINE] := <1> 494.0647, <2> 494.0647, <3> 494.0647, <4> 494.0647, <5> 494.0647, <6> 494.0647, <7> 494.0647;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
