set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 24.6449, <2> 28.2631, <3> 27.6279, <4> 28.7466, <5> 28.3155, <6> 24.8157, <7> 24.7066, <8> 26.3266, <9> 23.8771, <10> 31.2086, <11> 22.3653, <12> 25.0753, <13> 32.9665, <14> 17.7648, <15> 25.6728, <16> 19.9852, <17> 21.8224, <18> 16.758, <19> 18.6281, <20> 24.3915;
param workload[JOB] := <1> 607.3711, <2> 798.8028, <3> 763.3009, <4> 826.367, <5> 801.7675, <6> 615.819, <7> 610.4161, <8> 693.0899, <9> 570.1159, <10> 973.9767, <11> 500.2066, <12> 628.7707, <13> 1086.7901, <14> 315.5881, <15> 659.0927, <16> 399.4082, <17> 476.2171, <18> 280.8306, <19> 347.0061, <20> 594.9453;
param capacity[MACHINE] := <1> 1792.8403, <2> 1792.8403, <3> 1792.8403, <4> 1792.8403, <5> 1792.8403, <6> 1792.8403, <7> 1792.8403;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
