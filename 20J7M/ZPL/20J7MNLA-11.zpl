set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 30.2849, <2> 28.7531, <3> 19.6294, <4> 28.4047, <5> 26.3708, <6> 30.8004, <7> 24.1719, <8> 38.8957, <9> 31.6551, <10> 22.4612, <11> 23.5453, <12> 31.9956, <13> 16.5451, <14> 27.1272, <15> 23.8662, <16> 30.9282, <17> 24.6214, <18> 29.2003, <19> 28.7068, <20> 25.547;
param workload[JOB] := <1> 917.1752, <2> 826.7408, <3> 385.3133, <4> 806.827, <5> 695.4191, <6> 948.6646, <7> 584.2807, <8> 1512.8755, <9> 1002.0454, <10> 504.5055, <11> 554.3812, <12> 1023.7184, <13> 273.7403, <14> 735.885, <15> 569.5955, <16> 956.5536, <17> 606.2133, <18> 852.6575, <19> 824.0804, <20> 652.6492;
param capacity[MACHINE] := <1> 2176.1888, <2> 2176.1888, <3> 2176.1888, <4> 2176.1888, <5> 2176.1888, <6> 2176.1888, <7> 2176.1888;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
