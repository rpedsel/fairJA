set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 8.9294, <2> 12.6192, <3> 27.8581, <4> 43.6251, <5> 43.5005, <6> 0.2562, <7> 39.7973, <8> 0.8947, <9> 35.979, <10> 8.9693, <11> 9.8133, <12> 10.4828, <13> 49.3187, <14> 15.5353, <15> 29.5839, <16> 29.828, <17> 15.7476, <18> 23.1993, <19> 12.6534, <20> 19.5325;
param workload[JOB] := <1> 79.7342, <2> 159.2442, <3> 776.0737, <4> 1903.1494, <5> 1892.2935, <6> 0.0656, <7> 1583.8251, <8> 0.8005, <9> 1294.4884, <10> 80.4483, <11> 96.3009, <12> 109.8891, <13> 2432.3342, <14> 241.3455, <15> 875.2071, <16> 889.7096, <17> 247.9869, <18> 538.2075, <19> 160.1085, <20> 381.5186;
param capacity[MACHINE] := <1> 13742.7308, <2> 13742.7308, <3> 13742.7308, <4> 13742.7308, <5> 13742.7308, <6> 13742.7308, <7> 13742.7308;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
