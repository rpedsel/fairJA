set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 34.1378, <2> 11.0194, <3> 9.4953, <4> 47.9748, <5> 30.8341, <6> 31.6907, <7> 19.675, <8> 18.5002, <9> 45.481, <10> 3.2175, <11> 9.9072, <12> 4.3944, <13> 8.7475, <14> 47.3834, <15> 5.6525, <16> 9.3014, <17> 10.5022, <18> 46.4012, <19> 33.4109, <20> 31.5625;
param workload[JOB] := <1> 1165.3894, <2> 121.4272, <3> 90.1607, <4> 2301.5814, <5> 950.7417, <6> 1004.3005, <7> 387.1056, <8> 342.2574, <9> 2068.5214, <10> 10.3523, <11> 98.1526, <12> 19.3108, <13> 76.5188, <14> 2245.1866, <15> 31.9508, <16> 86.516, <17> 110.2962, <18> 2153.0714, <19> 1116.2882, <20> 996.1914;
param capacity[MACHINE] := <1> 15375.3204, <2> 15375.3204, <3> 15375.3204, <4> 15375.3204, <5> 15375.3204, <6> 15375.3204, <7> 15375.3204;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
