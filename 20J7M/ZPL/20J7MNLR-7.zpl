set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 21.9649, <2> 22.1884, <3> 19.6474, <4> 30.9636, <5> 23.5365, <6> 14.4958, <7> 23.2646, <8> 26.6445, <9> 22.167, <10> 26.1543, <11> 21.1535, <12> 23.3705, <13> 24.5849, <14> 18.8365, <15> 20.9377, <16> 23.3114, <17> 22.4407, <18> 25.6334, <19> 23.4527, <20> 27.1067;
param workload[JOB] := <1> 34.8545, <2> 18.606, <3> 16.0611, <4> 31.3451, <5> 29.2857, <6> 39.0148, <7> 13.6561, <8> 29.6231, <9> 22.4882, <10> 24.7285, <11> 38.9072, <12> 5.0417, <13> 23.9738, <14> 44.7196, <15> 20.9894, <16> 21.7171, <17> 39.467, <18> 34.9909, <19> 26.4514, <20> 37.3083;
param capacity[MACHINE] := <1> 79.0328, <2> 79.0328, <3> 79.0328, <4> 79.0328, <5> 79.0328, <6> 79.0328, <7> 79.0328;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
