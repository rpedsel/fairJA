set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 18.0461, <2> 10.4568, <3> 28.018, <4> 13.8407, <5> 40.5631, <6> 24.0011, <7> 13.6196, <8> 27.7121, <9> 15.2766, <10> 30.2931, <11> 15.9423, <12> 10.2685, <13> 7.3334, <14> 2.5779, <15> 27.1359, <16> 14.5199, <17> 16.9944, <18> 15.1741, <19> 19.5202, <20> 40.4655;
param workload[JOB] := <1> 18.0461, <2> 10.4568, <3> 28.018, <4> 13.8407, <5> 40.5631, <6> 24.0011, <7> 13.6196, <8> 27.7121, <9> 15.2766, <10> 30.2931, <11> 15.9423, <12> 10.2685, <13> 7.3334, <14> 2.5779, <15> 27.1359, <16> 14.5199, <17> 16.9944, <18> 15.1741, <19> 19.5202, <20> 40.4655;
param capacity[MACHINE] := <1> 391.7593, <2> 391.7593, <3> 391.7593, <4> 391.7593, <5> 391.7593, <6> 391.7593, <7> 391.7593;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
