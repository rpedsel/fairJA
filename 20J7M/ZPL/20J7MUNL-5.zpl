set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 28.5914, <2> 9.7745, <3> 36.7391, <4> 7.5727, <5> 11.5571, <6> 18.1832, <7> 26.0043, <8> 48.1112, <9> 8.2129, <10> 36.5531, <11> 16.5929, <12> 19.2417, <13> 2.7287, <14> 46.0839, <15> 48.6782, <16> 16.5138, <17> 19.1722, <18> 0.5511, <19> 14.5768, <20> 32.6097;
param workload[JOB] := <1> 28.5914, <2> 9.7745, <3> 36.7391, <4> 7.5727, <5> 11.5571, <6> 18.1832, <7> 26.0043, <8> 48.1112, <9> 8.2129, <10> 36.5531, <11> 16.5929, <12> 19.2417, <13> 2.7287, <14> 46.0839, <15> 48.6782, <16> 16.5138, <17> 19.1722, <18> 0.5511, <19> 14.5768, <20> 32.6097;
param capacity[MACHINE] := <1> 448.0485, <2> 448.0485, <3> 448.0485, <4> 448.0485, <5> 448.0485, <6> 448.0485, <7> 448.0485;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
