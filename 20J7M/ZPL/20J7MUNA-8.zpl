set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 45.6058, <2> 25.5076, <3> 17.0812, <4> 3.2502, <5> 43.4247, <6> 7.6881, <7> 7.5022, <8> 16.2339, <9> 45.1147, <10> 15.208, <11> 6.9857, <12> 0.3244, <13> 30.9866, <14> 38.5255, <15> 13.7059, <16> 27.2083, <17> 29.3684, <18> 19.3031, <19> 17.1142, <20> 2.9551;
param workload[JOB] := <1> 2079.889, <2> 650.6377, <3> 291.7674, <4> 10.5638, <5> 1885.7046, <6> 59.1069, <7> 56.283, <8> 263.5395, <9> 2035.3362, <10> 231.2833, <11> 48.8, <12> 0.1052, <13> 960.1694, <14> 1484.2142, <15> 187.8517, <16> 740.2916, <17> 862.5029, <18> 372.6097, <19> 292.8958, <20> 8.7326;
param capacity[MACHINE] := <1> 12522.2845, <2> 12522.2845, <3> 12522.2845, <4> 12522.2845, <5> 12522.2845, <6> 12522.2845, <7> 12522.2845;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
