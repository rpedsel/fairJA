set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 3.4061, <2> 27.2547, <3> 4.8268, <4> 31.4626, <5> 21.4711, <6> 26.7327, <7> 49.065, <8> 33.268, <9> 15.1759, <10> 0.6292, <11> 33.2022, <12> 27.4396, <13> 39.7745, <14> 24.6294, <15> 26.1593, <16> 33.0607, <17> 23.6065, <18> 44.2463, <19> 8.0619, <20> 23.7258;
param workload[JOB] := <1> 11.6015, <2> 742.8187, <3> 23.298, <4> 989.8952, <5> 461.0081, <6> 714.6372, <7> 2407.3742, <8> 1106.7598, <9> 230.3079, <10> 0.3959, <11> 1102.3861, <12> 752.9316, <13> 1582.0109, <14> 606.6073, <15> 684.309, <16> 1093.0099, <17> 557.2668, <18> 1957.7351, <19> 64.9942, <20> 562.9136;
param capacity[MACHINE] := <1> 15652.261, <2> 15652.261, <3> 15652.261, <4> 15652.261, <5> 15652.261, <6> 15652.261, <7> 15652.261;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
