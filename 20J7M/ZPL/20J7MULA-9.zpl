set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 9.7326, <2> 37.9659, <3> 2.0811, <4> 1.1554, <5> 0.9751, <6> 38.8814, <7> 37.83, <8> 18.757, <9> 16.6585, <10> 11.8857, <11> 13.842, <12> 16.0261, <13> 5.9483, <14> 37.509, <15> 0.41, <16> 2.6618, <17> 12.2133, <18> 3.125, <19> 17.5454, <20> 0.6129;
param workload[JOB] := <1> 94.7235, <2> 1441.4096, <3> 4.331, <4> 1.3349, <5> 0.9508, <6> 1511.7633, <7> 1431.1089, <8> 351.825, <9> 277.5056, <10> 141.2699, <11> 191.601, <12> 256.8359, <13> 35.3823, <14> 1406.9251, <15> 0.1681, <16> 7.0852, <17> 149.1647, <18> 9.7656, <19> 307.8411, <20> 0.3756;
param capacity[MACHINE] := <1> 1088.7667, <2> 1088.7667, <3> 1088.7667, <4> 1088.7667, <5> 1088.7667, <6> 1088.7667, <7> 1088.7667;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
