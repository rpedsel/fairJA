set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 25.1791, <2> 21.2171, <3> 18.0176, <4> 20.6082, <5> 23.1178, <6> 28.1316, <7> 26.1487, <8> 10.3621, <9> 18.1368, <10> 32.7798, <11> 21.7399, <12> 21.3531, <13> 22.0957, <14> 32.4761, <15> 20.5959, <16> 27.9896, <17> 21.1639, <18> 21.1812, <19> 34.3699, <20> 30.8352;
param workload[JOB] := <1> 1.0799, <2> 48.0215, <3> 25.4988, <4> 16.4728, <5> 11.1796, <6> 23.211, <7> 35.2084, <8> 38.1511, <9> 13.0382, <10> 0.9689, <11> 12.2137, <12> 41.6347, <13> 48.4441, <14> 25.9913, <15> 12.1469, <16> 25.1019, <17> 43.4705, <18> 15.3385, <19> 25.3011, <20> 1.7036;
param capacity[MACHINE] := <1> 66.3109, <2> 66.3109, <3> 66.3109, <4> 66.3109, <5> 66.3109, <6> 66.3109, <7> 66.3109;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
