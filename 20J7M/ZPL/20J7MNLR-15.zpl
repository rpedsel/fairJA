set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 24.2209, <2> 26.1186, <3> 22.5134, <4> 24.4039, <5> 28.1632, <6> 22.3866, <7> 26.5999, <8> 18.2139, <9> 20.3568, <10> 17.9613, <11> 28.2046, <12> 19.9921, <13> 20.2456, <14> 21.5571, <15> 30.3874, <16> 23.3501, <17> 26.9758, <18> 18.1063, <19> 32.6268, <20> 21.0585;
param workload[JOB] := <1> 4.2373, <2> 36.8586, <3> 33.5222, <4> 41.3961, <5> 21.9418, <6> 43.1167, <7> 2.6867, <8> 31.7722, <9> 7.6056, <10> 8.2697, <11> 25.0775, <12> 34.8897, <13> 23.5625, <14> 9.5386, <15> 22.4174, <16> 10.4365, <17> 36.7474, <18> 15.9192, <19> 24.6592, <20> 19.962;
param capacity[MACHINE] := <1> 64.9453, <2> 64.9453, <3> 64.9453, <4> 64.9453, <5> 64.9453, <6> 64.9453, <7> 64.9453;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
