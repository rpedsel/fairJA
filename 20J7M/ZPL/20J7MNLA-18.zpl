set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 32.1558, <2> 26.3608, <3> 22.7478, <4> 30.1955, <5> 25.3969, <6> 30.7572, <7> 29.4547, <8> 27.2446, <9> 29.1458, <10> 28.242, <11> 23.5763, <12> 25.375, <13> 22.0483, <14> 30.9619, <15> 25.0518, <16> 21.661, <17> 16.6951, <18> 30.694, <19> 19.1047, <20> 20.4646;
param workload[JOB] := <1> 1033.9955, <2> 694.8918, <3> 517.4624, <4> 911.7682, <5> 645.0025, <6> 946.0054, <7> 867.5794, <8> 742.2682, <9> 849.4777, <10> 797.6106, <11> 555.8419, <12> 643.8906, <13> 486.1275, <14> 958.6393, <15> 627.5927, <16> 469.1989, <17> 278.7264, <18> 942.1216, <19> 364.9896, <20> 418.7999;
param capacity[MACHINE] := <1> 1964.57, <2> 1964.57, <3> 1964.57, <4> 1964.57, <5> 1964.57, <6> 1964.57, <7> 1964.57;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
