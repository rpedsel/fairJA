set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 21.2361, <2> 23.3221, <3> 25.7867, <4> 27.3375, <5> 19.7466, <6> 19.692, <7> 34.6854, <8> 21.5451, <9> 29.6782, <10> 30.8975, <11> 26.0264, <12> 24.6575, <13> 19.5842, <14> 30.2221, <15> 31.7665, <16> 17.862, <17> 29.4701, <18> 31.1284, <19> 29.3106, <20> 23.6389;
param workload[JOB] := <1> 450.9719, <2> 543.9203, <3> 664.9539, <4> 747.3389, <5> 389.9282, <6> 387.7749, <7> 1203.077, <8> 464.1913, <9> 880.7956, <10> 954.6555, <11> 677.3735, <12> 607.9923, <13> 383.5409, <14> 913.3753, <15> 1009.1105, <16> 319.051, <17> 868.4868, <18> 968.9773, <19> 859.1113, <20> 558.7976;
param capacity[MACHINE] := <1> 1979.0606, <2> 1979.0606, <3> 1979.0606, <4> 1979.0606, <5> 1979.0606, <6> 1979.0606, <7> 1979.0606;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
