set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 22.8894, <2> 20.9274, <3> 19.4841, <4> 18.526, <5> 30.4394, <6> 34.4559, <7> 23.7036, <8> 22.1132, <9> 26.4722, <10> 12.1676, <11> 21.0276, <12> 22.95, <13> 17.7395, <14> 24.0447, <15> 25.8155, <16> 26.6164, <17> 25.3104, <18> 21.7564, <19> 26.2662, <20> 17.5405;
param workload[JOB] := <1> 29.5745, <2> 21.7687, <3> 37.9306, <4> 16.6111, <5> 6.2788, <6> 15.9992, <7> 32.911, <8> 25.6058, <9> 22.0267, <10> 30.3996, <11> 27.2479, <12> 19.3047, <13> 42.8882, <14> 31.8792, <15> 47.8738, <16> 29.5404, <17> 10.2978, <18> 12.6469, <19> 1.8468, <20> 16.0678;
param capacity[MACHINE] := <1> 478.6995, <2> 478.6995, <3> 478.6995, <4> 478.6995, <5> 478.6995, <6> 478.6995, <7> 478.6995;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
