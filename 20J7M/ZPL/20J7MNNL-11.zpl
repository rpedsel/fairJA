set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 33.4134, <2> 29.4643, <3> 19.4204, <4> 16.8366, <5> 21.873, <6> 22.1432, <7> 24.2645, <8> 28.7583, <9> 32.3476, <10> 24.7578, <11> 22.7151, <12> 26.581, <13> 27.8436, <14> 22.2099, <15> 16.1731, <16> 35.8111, <17> 32.4395, <18> 25.1058, <19> 21.5993, <20> 28.9232;
param workload[JOB] := <1> 33.4134, <2> 29.4643, <3> 19.4204, <4> 16.8366, <5> 21.873, <6> 22.1432, <7> 24.2645, <8> 28.7583, <9> 32.3476, <10> 24.7578, <11> 22.7151, <12> 26.581, <13> 27.8436, <14> 22.2099, <15> 16.1731, <16> 35.8111, <17> 32.4395, <18> 25.1058, <19> 21.5993, <20> 28.9232;
param capacity[MACHINE] := <1> 512.6807, <2> 512.6807, <3> 512.6807, <4> 512.6807, <5> 512.6807, <6> 512.6807, <7> 512.6807;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
