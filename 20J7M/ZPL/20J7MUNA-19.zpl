set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 4.9588, <2> 9.9024, <3> 26.2392, <4> 36.6514, <5> 5.3638, <6> 2.523, <7> 18.4883, <8> 22.7298, <9> 45.2928, <10> 14.2528, <11> 28.2578, <12> 11.3029, <13> 0.5948, <14> 3.1012, <15> 14.3222, <16> 11.2135, <17> 44.6811, <18> 15.4633, <19> 20.7422, <20> 18.6801;
param workload[JOB] := <1> 24.5897, <2> 98.0575, <3> 688.4956, <4> 1343.3251, <5> 28.7704, <6> 6.3655, <7> 341.8172, <8> 516.6438, <9> 2051.4377, <10> 203.1423, <11> 798.5033, <12> 127.7555, <13> 0.3538, <14> 9.6174, <15> 205.1254, <16> 125.7426, <17> 1996.4007, <18> 239.1136, <19> 430.2389, <20> 348.9461;
param capacity[MACHINE] := <1> 9584.4421, <2> 9584.4421, <3> 9584.4421, <4> 9584.4421, <5> 9584.4421, <6> 9584.4421, <7> 9584.4421;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
