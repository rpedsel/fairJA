set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 26.5817, <2> 23.9913, <3> 21.8555, <4> 19.4538, <5> 28.6968, <6> 29.0199, <7> 27.973, <8> 33.0771, <9> 21.9797, <10> 21.0455, <11> 36.8272, <12> 36.3349, <13> 25.9298, <14> 31.0209, <15> 30.4926, <16> 28.956, <17> 26.9224, <18> 15.5753, <19> 24.2706, <20> 28.3044;
param workload[JOB] := <1> 7.9202, <2> 14.2653, <3> 28.8315, <4> 12.2398, <5> 28.8274, <6> 34.7542, <7> 18.099, <8> 9.7334, <9> 21.4926, <10> 36.3073, <11> 48.543, <12> 18.5927, <13> 14.3884, <14> 42.5576, <15> 42.5877, <16> 43.9676, <17> 21.8624, <18> 20.4691, <19> 16.8157, <20> 44.897;
param capacity[MACHINE] := <1> 527.1519, <2> 527.1519, <3> 527.1519, <4> 527.1519, <5> 527.1519, <6> 527.1519, <7> 527.1519;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
