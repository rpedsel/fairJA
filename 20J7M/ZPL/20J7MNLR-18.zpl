set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 30.3413, <2> 21.3796, <3> 28.7089, <4> 17.9509, <5> 29.1635, <6> 21.5822, <7> 32.2699, <8> 24.9343, <9> 24.3653, <10> 23.4557, <11> 24.9209, <12> 23.6922, <13> 14.567, <14> 12.3414, <15> 20.8048, <16> 26.0186, <17> 17.0261, <18> 34.2322, <19> 21.7979, <20> 22.725;
param workload[JOB] := <1> 38.0501, <2> 11.0341, <3> 16.4312, <4> 40.2276, <5> 29.1372, <6> 2.451, <7> 2.5654, <8> 25.9724, <9> 21.9575, <10> 45.0666, <11> 17.6415, <12> 8.8803, <13> 43.5622, <14> 16.0358, <15> 33.7883, <16> 45.3547, <17> 28.4656, <18> 47.8236, <19> 15.7457, <20> 3.3586;
param capacity[MACHINE] := <1> 70.5071, <2> 70.5071, <3> 70.5071, <4> 70.5071, <5> 70.5071, <6> 70.5071, <7> 70.5071;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
