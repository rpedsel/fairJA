set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 26.0111, <2> 21.9245, <3> 29.9949, <4> 13.1902, <5> 14.3288, <6> 27.8733, <7> 25.6974, <8> 21.0377, <9> 23.1473, <10> 24.7864, <11> 33.368, <12> 20.5015, <13> 30.4141, <14> 19.0938, <15> 26.0955, <16> 28.0338, <17> 17.5255, <18> 24.9191, <19> 25.8274, <20> 19.009;
param workload[JOB] := <1> 42.3844, <2> 3.8634, <3> 37.3264, <4> 22.4325, <5> 31.8646, <6> 47.2538, <7> 27.7984, <8> 28.1808, <9> 15.631, <10> 14.6023, <11> 15.4517, <12> 18.0612, <13> 46.0578, <14> 5.3724, <15> 24.2706, <16> 22.8257, <17> 5.3068, <18> 22.1555, <19> 19.374, <20> 39.7816;
param capacity[MACHINE] := <1> 69.9993, <2> 69.9993, <3> 69.9993, <4> 69.9993, <5> 69.9993, <6> 69.9993, <7> 69.9993;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
