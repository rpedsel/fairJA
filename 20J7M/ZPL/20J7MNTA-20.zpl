set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 27.6793, <2> 27.1394, <3> 27.3666, <4> 23.5459, <5> 35.7514, <6> 20.4531, <7> 24.5779, <8> 30.0484, <9> 21.6912, <10> 26.4523, <11> 23.3842, <12> 23.4823, <13> 22.4559, <14> 22.9764, <15> 27.1756, <16> 30.9275, <17> 24.0449, <18> 23.5936, <19> 20.3066, <20> 30.7656;
param workload[JOB] := <1> 766.1436, <2> 736.547, <3> 748.9308, <4> 554.4094, <5> 1278.1626, <6> 418.3293, <7> 604.0732, <8> 902.9063, <9> 470.5082, <10> 699.7242, <11> 546.8208, <12> 551.4184, <13> 504.2674, <14> 527.915, <15> 738.5132, <16> 956.5103, <17> 578.1572, <18> 556.658, <19> 412.358, <20> 946.5221;
param capacity[MACHINE] := <1> 1446.308, <2> 1446.308, <3> 1446.308, <4> 1446.308, <5> 1446.308, <6> 1446.308, <7> 1446.308;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
