set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 0.1483, <2> 14.5028, <3> 40.6684, <4> 18.2327, <5> 1.4342, <6> 3.9101, <7> 21.7255, <8> 40.8638, <9> 13.8087, <10> 20.026, <11> 44.4539, <12> 48.9347, <13> 4.9127, <14> 34.0033, <15> 36.3399, <16> 28.297, <17> 0.5352, <18> 27.3158, <19> 48.7923, <20> 39.555;
param workload[JOB] := <1> 0.1483, <2> 14.5028, <3> 40.6684, <4> 18.2327, <5> 1.4342, <6> 3.9101, <7> 21.7255, <8> 40.8638, <9> 13.8087, <10> 20.026, <11> 44.4539, <12> 48.9347, <13> 4.9127, <14> 34.0033, <15> 36.3399, <16> 28.297, <17> 0.5352, <18> 27.3158, <19> 48.7923, <20> 39.555;
param capacity[MACHINE] := <1> 488.4603, <2> 488.4603, <3> 488.4603, <4> 488.4603, <5> 488.4603, <6> 488.4603, <7> 488.4603;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
