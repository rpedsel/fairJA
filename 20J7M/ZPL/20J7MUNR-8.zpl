set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 32.5963, <2> 39.412, <3> 46.3584, <4> 14.3619, <5> 39.232, <6> 25.2497, <7> 5.4821, <8> 27.1672, <9> 3.7214, <10> 9.589, <11> 23.7241, <12> 40.889, <13> 16.1013, <14> 0.5032, <15> 28.2514, <16> 23.6711, <17> 7.0279, <18> 46.6666, <19> 12.3574, <20> 9.5155;
param workload[JOB] := <1> 32.0679, <2> 23.8833, <3> 42.0376, <4> 29.7839, <5> 49.2204, <6> 28.4113, <7> 40.2129, <8> 20.4011, <9> 19.7048, <10> 11.3004, <11> 29.6137, <12> 31.968, <13> 1.396, <14> 29.9588, <15> 19.1594, <16> 2.6009, <17> 48.5346, <18> 12.6151, <19> 43.7659, <20> 36.8549;
param capacity[MACHINE] := <1> 553.4909, <2> 553.4909, <3> 553.4909, <4> 553.4909, <5> 553.4909, <6> 553.4909, <7> 553.4909;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
