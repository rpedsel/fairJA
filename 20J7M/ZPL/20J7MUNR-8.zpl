set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 44.7367, <2> 35.7075, <3> 27.1852, <4> 7.4898, <5> 46.706, <6> 36.8337, <7> 24.3786, <8> 3.3916, <9> 30.1391, <10> 44.2282, <11> 48.3391, <12> 33.9047, <13> 8.0549, <14> 32.3636, <15> 39.1684, <16> 17.4943, <17> 40.2305, <18> 44.6431, <19> 29.1915, <20> 26.6769;
param workload[JOB] := <1> 40.9375, <2> 4.3079, <3> 5.0396, <4> 41.8362, <5> 3.5932, <6> 32.4183, <7> 19.1413, <8> 19.8526, <9> 6.5422, <10> 45.0639, <11> 38.3299, <12> 35.9779, <13> 23.8413, <14> 6.8452, <15> 37.8197, <16> 33.0458, <17> 45.8132, <18> 28.9275, <19> 8.2673, <20> 22.5171;
param capacity[MACHINE] := <1> 500.1176, <2> 500.1176, <3> 500.1176, <4> 500.1176, <5> 500.1176, <6> 500.1176, <7> 500.1176;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
