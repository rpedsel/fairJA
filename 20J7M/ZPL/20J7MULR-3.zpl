set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 36.0517, <2> 22.6539, <3> 6.8818, <4> 32.4076, <5> 15.3074, <6> 3.3561, <7> 25.5895, <8> 33.5152, <9> 33.6171, <10> 34.2774, <11> 29.8987, <12> 24.3528, <13> 5.4333, <14> 28.2757, <15> 39.3088, <16> 10.4625, <17> 20.0537, <18> 33.4006, <19> 36.1911, <20> 33.7742;
param workload[JOB] := <1> 43.3162, <2> 40.5728, <3> 10.8789, <4> 12.6985, <5> 6.4032, <6> 25.6536, <7> 1.3299, <8> 7.3954, <9> 20.3498, <10> 12.4876, <11> 20.9737, <12> 31.579, <13> 28.9907, <14> 44.4085, <15> 42.1138, <16> 25.5569, <17> 49.9639, <18> 19.5042, <19> 13.2078, <20> 47.2053;
param capacity[MACHINE] := <1> 72.0842, <2> 72.0842, <3> 72.0842, <4> 72.0842, <5> 72.0842, <6> 72.0842, <7> 72.0842;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
