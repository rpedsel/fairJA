set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 19.4063, <2> 21.1717, <3> 23.7191, <4> 14.9302, <5> 24.6909, <6> 21.1366, <7> 37.0972, <8> 30.264, <9> 19.3211, <10> 31.1111, <11> 20.3329, <12> 27.6862, <13> 29.7152, <14> 26.8072, <15> 26.8889, <16> 26.9181, <17> 25.1293, <18> 32.0218, <19> 25.7251, <20> 29.5392;
param workload[JOB] := <1> 46.7687, <2> 8.5766, <3> 36.6678, <4> 33.8307, <5> 19.5122, <6> 25.8135, <7> 28.5782, <8> 6.3738, <9> 43.782, <10> 5.1704, <11> 11.9583, <12> 19.1371, <13> 15.3344, <14> 34.3385, <15> 13.6149, <16> 33.2569, <17> 21.1739, <18> 25.497, <19> 48.6054, <20> 33.5371;
param capacity[MACHINE] := <1> 73.0753, <2> 73.0753, <3> 73.0753, <4> 73.0753, <5> 73.0753, <6> 73.0753, <7> 73.0753;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
