set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 30.6407, <2> 18.4202, <3> 27.348, <4> 33.5063, <5> 32.7372, <6> 25.4003, <7> 16.5801, <8> 28.9422, <9> 26.6762, <10> 32.34, <11> 26.729, <12> 25.4377, <13> 20.2829, <14> 32.8123, <15> 29.9207, <16> 24.7864, <17> 20.631, <18> 30.8621, <19> 21.2921, <20> 28.104;
param workload[JOB] := <1> 30.6407, <2> 18.4202, <3> 27.348, <4> 33.5063, <5> 32.7372, <6> 25.4003, <7> 16.5801, <8> 28.9422, <9> 26.6762, <10> 32.34, <11> 26.729, <12> 25.4377, <13> 20.2829, <14> 32.8123, <15> 29.9207, <16> 24.7864, <17> 20.631, <18> 30.8621, <19> 21.2921, <20> 28.104;
param capacity[MACHINE] := <1> 533.4494, <2> 533.4494, <3> 533.4494, <4> 533.4494, <5> 533.4494, <6> 533.4494, <7> 533.4494;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
