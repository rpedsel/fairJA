set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 15.7702, <2> 36.4904, <3> 22.5225, <4> 1.8928, <5> 3.6356, <6> 9.347, <7> 26.6343, <8> 33.5393, <9> 14.2985, <10> 7.862, <11> 34.8266, <12> 16.3659, <13> 49.6865, <14> 16.9678, <15> 16.05, <16> 7.8792, <17> 6.0588, <18> 13.8586, <19> 44.4654, <20> 10.8032;
param workload[JOB] := <1> 248.6992, <2> 1331.5493, <3> 507.263, <4> 3.5827, <5> 13.2176, <6> 87.3664, <7> 709.3859, <8> 1124.8846, <9> 204.4471, <10> 61.811, <11> 1212.8921, <12> 267.8427, <13> 2468.7483, <14> 287.9062, <15> 257.6025, <16> 62.0818, <17> 36.7091, <18> 192.0608, <19> 1977.1718, <20> 116.7091;
param capacity[MACHINE] := <1> 2859.3091, <2> 2859.3091, <3> 2859.3091, <4> 2859.3091, <5> 2859.3091, <6> 2859.3091, <7> 2859.3091;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
