set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 25.7847, <2> 27.5541, <3> 27.1662, <4> 21.8772, <5> 24.0414, <6> 31.7482, <7> 23.536, <8> 35.715, <9> 29.4262, <10> 28.4105, <11> 23.2541, <12> 21.164, <13> 17.9826, <14> 21.277, <15> 26.0998, <16> 28.9152, <17> 24.7007, <18> 16.8712, <19> 23.0781, <20> 21.7062;
param workload[JOB] := <1> 25.7847, <2> 27.5541, <3> 27.1662, <4> 21.8772, <5> 24.0414, <6> 31.7482, <7> 23.536, <8> 35.715, <9> 29.4262, <10> 28.4105, <11> 23.2541, <12> 21.164, <13> 17.9826, <14> 21.277, <15> 26.0998, <16> 28.9152, <17> 24.7007, <18> 16.8712, <19> 23.0781, <20> 21.7062;
param capacity[MACHINE] := <1> 71.4726, <2> 71.4726, <3> 71.4726, <4> 71.4726, <5> 71.4726, <6> 71.4726, <7> 71.4726;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
