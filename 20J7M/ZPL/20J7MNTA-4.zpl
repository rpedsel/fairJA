set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 24.1211, <2> 31.3408, <3> 16.3955, <4> 23.6379, <5> 39.7494, <6> 28.7412, <7> 17.2615, <8> 30.0652, <9> 25.1326, <10> 19.8515, <11> 23.5907, <12> 30.281, <13> 20.8723, <14> 28.5433, <15> 26.1783, <16> 23.9517, <17> 24.9492, <18> 18.1934, <19> 32.6917, <20> 21.1753;
param workload[JOB] := <1> 581.8275, <2> 982.2457, <3> 268.8124, <4> 558.7503, <5> 1580.0148, <6> 826.0566, <7> 297.9594, <8> 903.9163, <9> 631.6476, <10> 394.0821, <11> 556.5211, <12> 916.939, <13> 435.6529, <14> 814.72, <15> 685.3034, <16> 573.6839, <17> 622.4626, <18> 330.9998, <19> 1068.7472, <20> 448.3933;
param capacity[MACHINE] := <1> 1599.2684, <2> 1599.2684, <3> 1599.2684, <4> 1599.2684, <5> 1599.2684, <6> 1599.2684, <7> 1599.2684;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
