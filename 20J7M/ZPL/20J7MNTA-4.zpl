set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 24.2973, <2> 24.9772, <3> 21.4409, <4> 27.8014, <5> 24.9608, <6> 22.0185, <7> 29.7911, <8> 33.7555, <9> 20.47, <10> 27.8197, <11> 19.1232, <12> 27.142, <13> 20.6831, <14> 21.9717, <15> 26.7849, <16> 31.9677, <17> 30.2451, <18> 23.9407, <19> 25.8438, <20> 11.0451;
param workload[JOB] := <1> 590.3588, <2> 623.8605, <3> 459.7122, <4> 772.9178, <5> 623.0415, <6> 484.8143, <7> 887.5096, <8> 1139.4338, <9> 419.0209, <10> 773.9357, <11> 365.6968, <12> 736.6882, <13> 427.7906, <14> 482.7556, <15> 717.4309, <16> 1021.9338, <17> 914.7661, <18> 573.1571, <19> 667.902, <20> 121.9942;
param capacity[MACHINE] := <1> 1371.9343, <2> 1371.9343, <3> 1371.9343, <4> 1371.9343, <5> 1371.9343, <6> 1371.9343, <7> 1371.9343;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
