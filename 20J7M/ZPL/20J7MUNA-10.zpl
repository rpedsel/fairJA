set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 38.8102, <2> 20.7868, <3> 10.8121, <4> 17.8195, <5> 12.2358, <6> 36.9847, <7> 40.2047, <8> 6.5647, <9> 29.4354, <10> 2.1233, <11> 30.9546, <12> 37.264, <13> 35.4783, <14> 24.1233, <15> 35.6013, <16> 39.0367, <17> 10.3268, <18> 5.7662, <19> 44.1509, <20> 4.4855;
param workload[JOB] := <1> 1506.2316, <2> 432.0911, <3> 116.9015, <4> 317.5346, <5> 149.7148, <6> 1367.868, <7> 1616.4179, <8> 43.0953, <9> 866.4428, <10> 4.5084, <11> 958.1873, <12> 1388.6057, <13> 1258.7098, <14> 581.9336, <15> 1267.4526, <16> 1523.8639, <17> 106.6428, <18> 33.2491, <19> 1949.302, <20> 20.1197;
param capacity[MACHINE] := <1> 15508.8725, <2> 15508.8725, <3> 15508.8725, <4> 15508.8725, <5> 15508.8725, <6> 15508.8725, <7> 15508.8725;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
