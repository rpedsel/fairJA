set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 12.7246, <2> 6.2422, <3> 32.517, <4> 1.101, <5> 35.1408, <6> 0.5137, <7> 13.3135, <8> 14.3274, <9> 40.6586, <10> 9.7204, <11> 5.0276, <12> 39.8967, <13> 20.4848, <14> 8.281, <15> 30.8351, <16> 48.2958, <17> 4.7272, <18> 49.7348, <19> 42.335, <20> 37.5673;
param workload[JOB] := <1> 161.9154, <2> 38.9651, <3> 1057.3553, <4> 1.2122, <5> 1234.8758, <6> 0.2639, <7> 177.2493, <8> 205.2744, <9> 1653.1218, <10> 94.4862, <11> 25.2768, <12> 1591.7467, <13> 419.627, <14> 68.575, <15> 950.8034, <16> 2332.4843, <17> 22.3464, <18> 2473.5503, <19> 1792.2522, <20> 1411.302;
param capacity[MACHINE] := <1> 15712.6835, <2> 15712.6835, <3> 15712.6835, <4> 15712.6835, <5> 15712.6835, <6> 15712.6835, <7> 15712.6835;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
