set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 27.6484, <2> 21.1215, <3> 14.1286, <4> 28.6661, <5> 22.4378, <6> 31.0334, <7> 25.7406, <8> 30.4515, <9> 23.7687, <10> 22.1062, <11> 25.0694, <12> 20.669, <13> 22.177, <14> 17.7581, <15> 20.1944, <16> 22.9135, <17> 26.1982, <18> 18.388, <19> 23.717, <20> 30.8221;
param workload[JOB] := <1> 764.434, <2> 446.1178, <3> 199.6173, <4> 821.7453, <5> 503.4549, <6> 963.0719, <7> 662.5785, <8> 927.2939, <9> 564.9511, <10> 488.6841, <11> 628.4748, <12> 427.2076, <13> 491.8193, <14> 315.3501, <15> 407.8138, <16> 525.0285, <17> 686.3457, <18> 338.1185, <19> 562.4961, <20> 950.0018;
param capacity[MACHINE] := <1> 11674.605, <2> 11674.605, <3> 11674.605, <4> 11674.605, <5> 11674.605, <6> 11674.605, <7> 11674.605;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
