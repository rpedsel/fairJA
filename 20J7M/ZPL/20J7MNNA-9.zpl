set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 27.174, <2> 23.0016, <3> 30.9943, <4> 16.6851, <5> 26.3137, <6> 23.7623, <7> 32.3487, <8> 21.9827, <9> 31.0662, <10> 28.3069, <11> 28.4214, <12> 25.7132, <13> 25.4019, <14> 16.1594, <15> 26.4313, <16> 23.725, <17> 21.5015, <18> 22.5541, <19> 28.165, <20> 27.8141;
param workload[JOB] := <1> 738.4263, <2> 529.0736, <3> 960.6466, <4> 278.3926, <5> 692.4108, <6> 564.6469, <7> 1046.4384, <8> 483.2391, <9> 965.1088, <10> 801.2806, <11> 807.776, <12> 661.1687, <13> 645.2565, <14> 261.1262, <15> 698.6136, <16> 562.8756, <17> 462.3145, <18> 508.6874, <19> 793.2672, <20> 773.6242;
param capacity[MACHINE] := <1> 13234.3736, <2> 13234.3736, <3> 13234.3736, <4> 13234.3736, <5> 13234.3736, <6> 13234.3736, <7> 13234.3736;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
