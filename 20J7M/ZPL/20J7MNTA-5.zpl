set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 23.1419, <2> 37.5169, <3> 31.0383, <4> 22.7765, <5> 20.1732, <6> 21.1899, <7> 26.4638, <8> 27.9474, <9> 26.2475, <10> 28.2021, <11> 28.3658, <12> 20.1981, <13> 20.8769, <14> 25.888, <15> 24.7814, <16> 25.8948, <17> 30.5327, <18> 25.4543, <19> 22.0541, <20> 22.3716;
param workload[JOB] := <1> 535.5475, <2> 1407.5178, <3> 963.3761, <4> 518.769, <5> 406.958, <6> 449.0119, <7> 700.3327, <8> 781.0572, <9> 688.9313, <10> 795.3584, <11> 804.6186, <12> 407.9632, <13> 435.845, <14> 670.1885, <15> 614.1178, <16> 670.5407, <17> 932.2458, <18> 647.9214, <19> 486.3833, <20> 500.4885;
param capacity[MACHINE] := <1> 1437.5543, <2> 1437.5543, <3> 1437.5543, <4> 1437.5543, <5> 1437.5543, <6> 1437.5543, <7> 1437.5543;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
