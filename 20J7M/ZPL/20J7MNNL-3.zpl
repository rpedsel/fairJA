set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 21.0949, <2> 25.4094, <3> 14.9585, <4> 20.5834, <5> 23.3261, <6> 32.4435, <7> 31.6235, <8> 18.8996, <9> 24.403, <10> 21.3764, <11> 27.02, <12> 17.5764, <13> 23.7155, <14> 28.7235, <15> 28.2311, <16> 27.7341, <17> 28.9122, <18> 24.0146, <19> 19.5337, <20> 32.6069;
param workload[JOB] := <1> 21.0949, <2> 25.4094, <3> 14.9585, <4> 20.5834, <5> 23.3261, <6> 32.4435, <7> 31.6235, <8> 18.8996, <9> 24.403, <10> 21.3764, <11> 27.02, <12> 17.5764, <13> 23.7155, <14> 28.7235, <15> 28.2311, <16> 27.7341, <17> 28.9122, <18> 24.0146, <19> 19.5337, <20> 32.6069;
param capacity[MACHINE] := <1> 492.1863, <2> 492.1863, <3> 492.1863, <4> 492.1863, <5> 492.1863, <6> 492.1863, <7> 492.1863;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
