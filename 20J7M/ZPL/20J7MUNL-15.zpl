set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 4.5057, <2> 26.2157, <3> 37.6424, <4> 16.1536, <5> 41.8127, <6> 44.026, <7> 0.8958, <8> 42.1513, <9> 42.8692, <10> 16.2831, <11> 17.3428, <12> 24.8626, <13> 20.0414, <14> 30.3271, <15> 17.0649, <16> 39.1645, <17> 36.8434, <18> 3.8737, <19> 0.5088, <20> 36.7629;
param workload[JOB] := <1> 4.5057, <2> 26.2157, <3> 37.6424, <4> 16.1536, <5> 41.8127, <6> 44.026, <7> 0.8958, <8> 42.1513, <9> 42.8692, <10> 16.2831, <11> 17.3428, <12> 24.8626, <13> 20.0414, <14> 30.3271, <15> 17.0649, <16> 39.1645, <17> 36.8434, <18> 3.8737, <19> 0.5088, <20> 36.7629;
param capacity[MACHINE] := <1> 499.3476, <2> 499.3476, <3> 499.3476, <4> 499.3476, <5> 499.3476, <6> 499.3476, <7> 499.3476;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
