set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 22.4316, <2> 49.3493, <3> 2.4553, <4> 35.3505, <5> 20.8803, <6> 25.8197, <7> 7.3319, <8> 1.3266, <9> 47.5855, <10> 31.8153, <11> 7.4805, <12> 25.6782, <13> 33.2742, <14> 15.0842, <15> 24.2773, <16> 44.4001, <17> 9.9406, <18> 6.4636, <19> 16.5286, <20> 49.7662;
param workload[JOB] := <1> 22.4316, <2> 49.3493, <3> 2.4553, <4> 35.3505, <5> 20.8803, <6> 25.8197, <7> 7.3319, <8> 1.3266, <9> 47.5855, <10> 31.8153, <11> 7.4805, <12> 25.6782, <13> 33.2742, <14> 15.0842, <15> 24.2773, <16> 44.4001, <17> 9.9406, <18> 6.4636, <19> 16.5286, <20> 49.7662;
param capacity[MACHINE] := <1> 477.2395, <2> 477.2395, <3> 477.2395, <4> 477.2395, <5> 477.2395, <6> 477.2395, <7> 477.2395;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
