set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 32.5468, <2> 29.1109, <3> 32.9802, <4> 25.9019, <5> 26.1449, <6> 25.7156, <7> 20.045, <8> 26.7402, <9> 26.3651, <10> 25.3251, <11> 33.4947, <12> 28.789, <13> 31.403, <14> 35.7129, <15> 26.826, <16> 23.7065, <17> 25.6175, <18> 32.6174, <19> 22.6655, <20> 25.7958;
param workload[JOB] := <1> 10.734, <2> 3.7496, <3> 39.2879, <4> 14.3557, <5> 19.2032, <6> 37.5407, <7> 24.3455, <8> 23.3383, <9> 6.2047, <10> 41.2494, <11> 33.0486, <12> 30.2742, <13> 24.9304, <14> 12.6463, <15> 26.9547, <16> 24.8441, <17> 37.9317, <18> 47.9795, <19> 5.1792, <20> 46.8552;
param capacity[MACHINE] := <1> 54.7128, <2> 54.7128, <3> 54.7128, <4> 54.7128, <5> 54.7128, <6> 54.7128, <7> 54.7128;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
