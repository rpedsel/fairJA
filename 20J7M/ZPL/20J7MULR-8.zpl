set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 36.0892, <2> 19.6009, <3> 48.2337, <4> 4.4559, <5> 37.7398, <6> 37.5499, <7> 2.6458, <8> 43.0838, <9> 49.4536, <10> 35.6816, <11> 13.2582, <12> 35.8517, <13> 16.6685, <14> 45.7755, <15> 20.8911, <16> 3.4779, <17> 46.5982, <18> 4.7825, <19> 28.3048, <20> 1.9978;
param workload[JOB] := <1> 43.1591, <2> 27.7418, <3> 17.6287, <4> 35.0003, <5> 42.2949, <6> 43.6195, <7> 42.7279, <8> 34.0418, <9> 19.3017, <10> 31.7393, <11> 1.9807, <12> 48.4402, <13> 29.4873, <14> 47.0826, <15> 22.6319, <16> 22.2436, <17> 13.6135, <18> 37.9324, <19> 3.2272, <20> 33.1909;
param capacity[MACHINE] := <1> 85.2979, <2> 85.2979, <3> 85.2979, <4> 85.2979, <5> 85.2979, <6> 85.2979, <7> 85.2979;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
