set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 45.2181, <2> 33.0989, <3> 30.8423, <4> 34.6453, <5> 30.2151, <6> 27.2749, <7> 37.7298, <8> 14.7238, <9> 44.355, <10> 46.2537, <11> 49.955, <12> 5.6658, <13> 45.3957, <14> 21.1388, <15> 6.8153, <16> 25.2127, <17> 17.0378, <18> 35.8913, <19> 23.3968, <20> 12.948;
param workload[JOB] := <1> 29.7272, <2> 0.0942, <3> 13.3186, <4> 26.5432, <5> 37.1384, <6> 18.484, <7> 44.1502, <8> 32.389, <9> 43.378, <10> 11.0482, <11> 24.7312, <12> 38.9188, <13> 33.289, <14> 23.4135, <15> 15.1675, <16> 41.5646, <17> 13.8546, <18> 9.6534, <19> 23.9703, <20> 27.7506;
param capacity[MACHINE] := <1> 508.5845, <2> 508.5845, <3> 508.5845, <4> 508.5845, <5> 508.5845, <6> 508.5845, <7> 508.5845;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
