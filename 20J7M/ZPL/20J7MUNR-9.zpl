set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 20.1853, <2> 2.1545, <3> 40.6597, <4> 2.8792, <5> 17.3837, <6> 25.7648, <7> 20.9911, <8> 16.3404, <9> 36.3657, <10> 47.237, <11> 40.1679, <12> 4.9873, <13> 0.4558, <14> 44.12, <15> 8.7953, <16> 25.1742, <17> 11.5825, <18> 4.7936, <19> 11.8019, <20> 11.8833;
param workload[JOB] := <1> 44.1687, <2> 14.4764, <3> 32.1041, <4> 16.9169, <5> 49.3036, <6> 38.1032, <7> 14.6917, <8> 40.2811, <9> 34.116, <10> 32.6071, <11> 43.4204, <12> 41.8138, <13> 40.1313, <14> 48.6187, <15> 47.0149, <16> 8.8803, <17> 16.7978, <18> 5.7547, <19> 43.4258, <20> 0.1302;
param capacity[MACHINE] := <1> 612.7567, <2> 612.7567, <3> 612.7567, <4> 612.7567, <5> 612.7567, <6> 612.7567, <7> 612.7567;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
