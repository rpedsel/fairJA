set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 31.8432, <2> 16.7036, <3> 27.9339, <4> 30.5644, <5> 24.1878, <6> 19.0623, <7> 30.0668, <8> 16.1069, <9> 25.5481, <10> 27.9133, <11> 31.9874, <12> 25.7159, <13> 23.8223, <14> 29.0429, <15> 23.7994, <16> 26.8526, <17> 38.3927, <18> 20.0634, <19> 20.3219, <20> 28.0137;
param workload[JOB] := <1> 1013.9894, <2> 279.0103, <3> 780.3028, <4> 934.1825, <5> 585.0497, <6> 363.3713, <7> 904.0125, <8> 259.4322, <9> 652.7054, <10> 779.1523, <11> 1023.1938, <12> 661.3075, <13> 567.502, <14> 843.49, <15> 566.4114, <16> 721.0621, <17> 1473.9994, <18> 402.54, <19> 412.9796, <20> 784.7674;
param capacity[MACHINE] := <1> 2001.2088, <2> 2001.2088, <3> 2001.2088, <4> 2001.2088, <5> 2001.2088, <6> 2001.2088, <7> 2001.2088;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
