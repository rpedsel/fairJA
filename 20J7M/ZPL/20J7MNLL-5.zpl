set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 25.4816, <2> 18.7721, <3> 26.6862, <4> 27.2743, <5> 20.1709, <6> 31.1288, <7> 27.182, <8> 21.7092, <9> 32.597, <10> 27.242, <11> 27.448, <12> 25.6952, <13> 21.3277, <14> 26.6508, <15> 23.5272, <16> 19.2906, <17> 27.9617, <18> 26.1955, <19> 17.1667, <20> 27.3131;
param workload[JOB] := <1> 25.4816, <2> 18.7721, <3> 26.6862, <4> 27.2743, <5> 20.1709, <6> 31.1288, <7> 27.182, <8> 21.7092, <9> 32.597, <10> 27.242, <11> 27.448, <12> 25.6952, <13> 21.3277, <14> 26.6508, <15> 23.5272, <16> 19.2906, <17> 27.9617, <18> 26.1955, <19> 17.1667, <20> 27.3131;
param capacity[MACHINE] := <1> 71.5458, <2> 71.5458, <3> 71.5458, <4> 71.5458, <5> 71.5458, <6> 71.5458, <7> 71.5458;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
