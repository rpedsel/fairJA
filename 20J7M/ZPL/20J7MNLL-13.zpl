set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 26.4023, <2> 29.8623, <3> 31.1392, <4> 20.4968, <5> 24.1589, <6> 21.6336, <7> 25.6258, <8> 28.3154, <9> 26.9536, <10> 12.3233, <11> 19.3763, <12> 28.5468, <13> 24.829, <14> 23.1626, <15> 25.1991, <16> 23.4766, <17> 23.3788, <18> 23.6294, <19> 26.1252, <20> 25.0103;
param workload[JOB] := <1> 26.4023, <2> 29.8623, <3> 31.1392, <4> 20.4968, <5> 24.1589, <6> 21.6336, <7> 25.6258, <8> 28.3154, <9> 26.9536, <10> 12.3233, <11> 19.3763, <12> 28.5468, <13> 24.829, <14> 23.1626, <15> 25.1991, <16> 23.4766, <17> 23.3788, <18> 23.6294, <19> 26.1252, <20> 25.0103;
param capacity[MACHINE] := <1> 69.9493, <2> 69.9493, <3> 69.9493, <4> 69.9493, <5> 69.9493, <6> 69.9493, <7> 69.9493;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
