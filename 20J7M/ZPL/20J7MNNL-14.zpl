set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 33.7493, <2> 27.6334, <3> 16.8232, <4> 27.5716, <5> 22.0352, <6> 28.7263, <7> 19.8814, <8> 25.1762, <9> 29.4598, <10> 23.9274, <11> 31.7751, <12> 25.1255, <13> 27.7533, <14> 29.271, <15> 26.8295, <16> 24.9064, <17> 28.6628, <18> 26.9221, <19> 24.4111, <20> 23.7191;
param workload[JOB] := <1> 33.7493, <2> 27.6334, <3> 16.8232, <4> 27.5716, <5> 22.0352, <6> 28.7263, <7> 19.8814, <8> 25.1762, <9> 29.4598, <10> 23.9274, <11> 31.7751, <12> 25.1255, <13> 27.7533, <14> 29.271, <15> 26.8295, <16> 24.9064, <17> 28.6628, <18> 26.9221, <19> 24.4111, <20> 23.7191;
param capacity[MACHINE] := <1> 524.3597, <2> 524.3597, <3> 524.3597, <4> 524.3597, <5> 524.3597, <6> 524.3597, <7> 524.3597;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
