set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 22.8023, <2> 28.3543, <3> 34.8634, <4> 20.9855, <5> 21.7286, <6> 23.8657, <7> 26.3223, <8> 22.0755, <9> 36.2772, <10> 26.0388, <11> 21.0113, <12> 33.5205, <13> 23.5516, <14> 29.4304, <15> 27.4055, <16> 32.5343, <17> 22.233, <18> 26.1872, <19> 26.5712, <20> 16.9275;
param workload[JOB] := <1> 39.2244, <2> 12.9768, <3> 24.4811, <4> 20.8725, <5> 15.0162, <6> 21.391, <7> 9.8944, <8> 31.2969, <9> 48.2897, <10> 27.0939, <11> 30.0066, <12> 34.1055, <13> 37.5634, <14> 39.7248, <15> 3.0336, <16> 45.4126, <17> 33.0699, <18> 41.6379, <19> 40.4574, <20> 18.879;
param capacity[MACHINE] := <1> 61.5458, <2> 61.5458, <3> 61.5458, <4> 61.5458, <5> 61.5458, <6> 61.5458, <7> 61.5458;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
