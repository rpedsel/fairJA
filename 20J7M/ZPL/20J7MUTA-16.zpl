set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 40.9439, <2> 39.8983, <3> 30.074, <4> 19.2717, <5> 5.287, <6> 44.2534, <7> 40.1987, <8> 0.7303, <9> 44.5218, <10> 4.8557, <11> 9.7954, <12> 41.756, <13> 28.6722, <14> 29.9524, <15> 48.1714, <16> 22.2724, <17> 12.9778, <18> 34.6418, <19> 48.4139, <20> 34.3151;
param workload[JOB] := <1> 1676.4029, <2> 1591.8743, <3> 904.4455, <4> 371.3984, <5> 27.9524, <6> 1958.3634, <7> 1615.9355, <8> 0.5333, <9> 1982.1907, <10> 23.5778, <11> 95.9499, <12> 1743.5635, <13> 822.0951, <14> 897.1463, <15> 2320.4838, <16> 496.0598, <17> 168.4233, <18> 1200.0543, <19> 2343.9057, <20> 1177.5261;
param capacity[MACHINE] := <1> 2603.8246, <2> 2603.8246, <3> 2603.8246, <4> 2603.8246, <5> 2603.8246, <6> 2603.8246, <7> 2603.8246;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
