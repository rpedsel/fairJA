set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 46.5032, <2> 43.2189, <3> 14.4906, <4> 9.4253, <5> 12.4448, <6> 16.6501, <7> 46.3703, <8> 26.682, <9> 39.4944, <10> 44.5376, <11> 26.5437, <12> 23.8995, <13> 22.8522, <14> 10.3363, <15> 8.837, <16> 7.4011, <17> 14.7963, <18> 20.0161, <19> 42.0108, <20> 39.5718;
param workload[JOB] := <1> 23.5392, <2> 35.6713, <3> 27.6976, <4> 47.7149, <5> 12.8752, <6> 3.6891, <7> 40.0039, <8> 19.2842, <9> 37.4961, <10> 41.5994, <11> 35.9256, <12> 14.9329, <13> 25.6628, <14> 20.7025, <15> 15.6626, <16> 33.7812, <17> 46.1099, <18> 46.3918, <19> 14.6679, <20> 8.825;
param capacity[MACHINE] := <1> 78.8904, <2> 78.8904, <3> 78.8904, <4> 78.8904, <5> 78.8904, <6> 78.8904, <7> 78.8904;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
