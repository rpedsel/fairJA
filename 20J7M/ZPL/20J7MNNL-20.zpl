set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 29.3724, <2> 23.4942, <3> 32.0882, <4> 15.1036, <5> 26.9049, <6> 27.8831, <7> 26.4315, <8> 30.1237, <9> 22.1387, <10> 21.8357, <11> 22.9577, <12> 24.8407, <13> 18.6579, <14> 20.569, <15> 21.8307, <16> 26.8515, <17> 22.6784, <18> 22.3769, <19> 31.2622, <20> 29.1029;
param workload[JOB] := <1> 29.3724, <2> 23.4942, <3> 32.0882, <4> 15.1036, <5> 26.9049, <6> 27.8831, <7> 26.4315, <8> 30.1237, <9> 22.1387, <10> 21.8357, <11> 22.9577, <12> 24.8407, <13> 18.6579, <14> 20.569, <15> 21.8307, <16> 26.8515, <17> 22.6784, <18> 22.3769, <19> 31.2622, <20> 29.1029;
param capacity[MACHINE] := <1> 496.5039, <2> 496.5039, <3> 496.5039, <4> 496.5039, <5> 496.5039, <6> 496.5039, <7> 496.5039;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
