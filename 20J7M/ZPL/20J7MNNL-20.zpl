set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 25.9211, <2> 25.4919, <3> 22.8736, <4> 29.2314, <5> 29.9916, <6> 28.8949, <7> 32.6391, <8> 15.1681, <9> 29.048, <10> 20.7168, <11> 26.098, <12> 27.2804, <13> 18.5541, <14> 29.0548, <15> 28.5606, <16> 15.57, <17> 23.341, <18> 24.8887, <19> 20.7881, <20> 29.4616;
param workload[JOB] := <1> 25.9211, <2> 25.4919, <3> 22.8736, <4> 29.2314, <5> 29.9916, <6> 28.8949, <7> 32.6391, <8> 15.1681, <9> 29.048, <10> 20.7168, <11> 26.098, <12> 27.2804, <13> 18.5541, <14> 29.0548, <15> 28.5606, <16> 15.57, <17> 23.341, <18> 24.8887, <19> 20.7881, <20> 29.4616;
param capacity[MACHINE] := <1> 503.5738, <2> 503.5738, <3> 503.5738, <4> 503.5738, <5> 503.5738, <6> 503.5738, <7> 503.5738;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
