set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 24.8093, <2> 41.8004, <3> 36.0535, <4> 37.9798, <5> 13.6304, <6> 40.1318, <7> 12.7715, <8> 34.5651, <9> 10.3458, <10> 32.2561, <11> 43.2344, <12> 18.2275, <13> 47.8835, <14> 2.3055, <15> 11.3983, <16> 47.1584, <17> 23.9775, <18> 28.8747, <19> 37.1769, <20> 31.6614;
param workload[JOB] := <1> 47.7883, <2> 1.1179, <3> 43.9682, <4> 33.9505, <5> 9.8509, <6> 22.8482, <7> 16.8241, <8> 31.0924, <9> 47.1139, <10> 15.2736, <11> 39.8544, <12> 1.9929, <13> 38.4233, <14> 25.4557, <15> 40.3773, <16> 23.1758, <17> 35.8484, <18> 1.4007, <19> 9.6521, <20> 30.0959;
param capacity[MACHINE] := <1> 55.2969, <2> 55.2969, <3> 55.2969, <4> 55.2969, <5> 55.2969, <6> 55.2969, <7> 55.2969;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
