set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 32.0568, <2> 28.4444, <3> 23.9482, <4> 29.7589, <5> 25.889, <6> 34.4199, <7> 25.1755, <8> 19.9921, <9> 23.0833, <10> 20.4089, <11> 16.5361, <12> 28.267, <13> 24.0869, <14> 28.7187, <15> 27.4054, <16> 35.3099, <17> 32.2642, <18> 25.556, <19> 26.6436, <20> 23.7846;
param workload[JOB] := <1> 32.0568, <2> 28.4444, <3> 23.9482, <4> 29.7589, <5> 25.889, <6> 34.4199, <7> 25.1755, <8> 19.9921, <9> 23.0833, <10> 20.4089, <11> 16.5361, <12> 28.267, <13> 24.0869, <14> 28.7187, <15> 27.4054, <16> 35.3099, <17> 32.2642, <18> 25.556, <19> 26.6436, <20> 23.7846;
param capacity[MACHINE] := <1> 56.9732, <2> 56.9732, <3> 56.9732, <4> 56.9732, <5> 56.9732, <6> 56.9732, <7> 56.9732;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
