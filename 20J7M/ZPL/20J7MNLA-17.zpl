set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 25.3211, <2> 29.124, <3> 34.5338, <4> 27.0459, <5> 13.6758, <6> 20.6247, <7> 20.9365, <8> 25.7989, <9> 29.2861, <10> 31.475, <11> 24.9331, <12> 30.3282, <13> 17.335, <14> 26.8398, <15> 22.6705, <16> 32.9337, <17> 25.0392, <18> 21.0928, <19> 27.9338, <20> 24.1873;
param workload[JOB] := <1> 641.1581, <2> 848.2074, <3> 1192.5833, <4> 731.4807, <5> 187.0275, <6> 425.3783, <7> 438.337, <8> 665.5832, <9> 857.6757, <10> 990.6756, <11> 621.6595, <12> 919.7997, <13> 300.5022, <14> 720.3749, <15> 513.9516, <16> 1084.6286, <17> 626.9615, <18> 444.9062, <19> 780.2972, <20> 585.0255;
param capacity[MACHINE] := <1> 1939.4591, <2> 1939.4591, <3> 1939.4591, <4> 1939.4591, <5> 1939.4591, <6> 1939.4591, <7> 1939.4591;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
