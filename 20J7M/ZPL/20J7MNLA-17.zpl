set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 28.6465, <2> 29.5691, <3> 30.5241, <4> 21.0824, <5> 27.5418, <6> 20.2711, <7> 33.3979, <8> 25.5594, <9> 28.337, <10> 21.7621, <11> 34.4004, <12> 32.0573, <13> 28.9052, <14> 22.6913, <15> 27.5345, <16> 25.9636, <17> 21.4496, <18> 27.3748, <19> 34.4829, <20> 23.1095;
param workload[JOB] := <1> 820.622, <2> 874.3317, <3> 931.7207, <4> 444.4676, <5> 758.5507, <6> 410.9175, <7> 1115.4197, <8> 653.2829, <9> 802.9856, <10> 473.589, <11> 1183.3875, <12> 1027.6705, <13> 835.5106, <14> 514.8951, <15> 758.1487, <16> 674.1085, <17> 460.0853, <18> 749.3797, <19> 1189.0704, <20> 534.049;
param capacity[MACHINE] := <1> 2173.1704, <2> 2173.1704, <3> 2173.1704, <4> 2173.1704, <5> 2173.1704, <6> 2173.1704, <7> 2173.1704;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
