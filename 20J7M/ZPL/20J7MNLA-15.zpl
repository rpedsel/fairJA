set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 21.223, <2> 28.8035, <3> 24.8431, <4> 22.0212, <5> 22.0849, <6> 28.9388, <7> 20.5023, <8> 27.2378, <9> 33.3482, <10> 21.5634, <11> 27.6686, <12> 27.8253, <13> 18.3318, <14> 30.2761, <15> 22.2744, <16> 25.0631, <17> 23.6292, <18> 30.6194, <19> 28.0639, <20> 24.1113;
param workload[JOB] := <1> 450.4157, <2> 829.6416, <3> 617.1796, <4> 484.9332, <5> 487.7428, <6> 837.4541, <7> 420.3443, <8> 741.8977, <9> 1112.1024, <10> 464.9802, <11> 765.5514, <12> 774.2473, <13> 336.0549, <14> 916.6422, <15> 496.1489, <16> 628.159, <17> 558.3391, <18> 937.5477, <19> 787.5825, <20> 581.3548;
param capacity[MACHINE] := <1> 1889.7599, <2> 1889.7599, <3> 1889.7599, <4> 1889.7599, <5> 1889.7599, <6> 1889.7599, <7> 1889.7599;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
