set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 32.9203, <2> 19.0269, <3> 22.1487, <4> 17.6392, <5> 25.8529, <6> 29.6637, <7> 26.5604, <8> 23.5359, <9> 18.9638, <10> 19.6219, <11> 27.2728, <12> 20.5104, <13> 24.0896, <14> 27.338, <15> 24.5852, <16> 23.9442, <17> 24.45, <18> 25.5378, <19> 24.8894, <20> 25.6527;
param workload[JOB] := <1> 1083.7462, <2> 362.0229, <3> 490.5649, <4> 311.1414, <5> 668.3724, <6> 879.9351, <7> 705.4548, <8> 553.9386, <9> 359.6257, <10> 385.019, <11> 743.8056, <12> 420.6765, <13> 580.3088, <14> 747.3662, <15> 604.4321, <16> 573.3247, <17> 597.8025, <18> 652.1792, <19> 619.4822, <20> 658.061;
param capacity[MACHINE] := <1> 1713.8943, <2> 1713.8943, <3> 1713.8943, <4> 1713.8943, <5> 1713.8943, <6> 1713.8943, <7> 1713.8943;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
