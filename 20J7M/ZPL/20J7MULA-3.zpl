set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 28.7519, <2> 2.577, <3> 35.7392, <4> 22.1268, <5> 18.5668, <6> 16.2999, <7> 37.9228, <8> 49.1321, <9> 21.5235, <10> 21.2576, <11> 21.6489, <12> 11.9863, <13> 31.7519, <14> 47.565, <15> 49.3471, <16> 46.1957, <17> 46.7954, <18> 2.8011, <19> 6.9108, <20> 29.0033;
param workload[JOB] := <1> 826.6718, <2> 6.6409, <3> 1277.2904, <4> 489.5953, <5> 344.7261, <6> 265.6867, <7> 1438.1388, <8> 2413.9633, <9> 463.2611, <10> 451.8856, <11> 468.6749, <12> 143.6714, <13> 1008.1832, <14> 2262.4292, <15> 2435.1363, <16> 2134.0427, <17> 2189.8095, <18> 7.8462, <19> 47.7592, <20> 841.1914;
param capacity[MACHINE] := <1> 2788.0863, <2> 2788.0863, <3> 2788.0863, <4> 2788.0863, <5> 2788.0863, <6> 2788.0863, <7> 2788.0863;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
