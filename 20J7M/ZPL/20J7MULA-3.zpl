set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 44.3276, <2> 39.443, <3> 37.0307, <4> 23.0291, <5> 49.0793, <6> 2.8694, <7> 16.3586, <8> 8.7695, <9> 22.1594, <10> 24.3507, <11> 19.58, <12> 17.0925, <13> 40.4236, <14> 26.3392, <15> 31.0855, <16> 11.0059, <17> 40.3509, <18> 30.8554, <19> 14.4854, <20> 24.7618;
param workload[JOB] := <1> 1964.9361, <2> 1555.7502, <3> 1371.2727, <4> 530.3394, <5> 2408.7777, <6> 8.2335, <7> 267.6038, <8> 76.9041, <9> 491.039, <10> 592.9566, <11> 383.3764, <12> 292.1536, <13> 1634.0674, <14> 693.7535, <15> 966.3083, <16> 121.1298, <17> 1628.1951, <18> 952.0557, <19> 209.8268, <20> 613.1467;
param capacity[MACHINE] := <1> 2549.7073, <2> 2549.7073, <3> 2549.7073, <4> 2549.7073, <5> 2549.7073, <6> 2549.7073, <7> 2549.7073;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
