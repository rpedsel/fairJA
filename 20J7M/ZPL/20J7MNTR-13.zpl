set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 27.2792, <2> 23.5182, <3> 19.3194, <4> 29.5162, <5> 29.1505, <6> 27.3599, <7> 27.959, <8> 23.0833, <9> 27.4418, <10> 33.0283, <11> 24.0785, <12> 23.9318, <13> 22.6173, <14> 23.602, <15> 17.3505, <16> 34.5577, <17> 29.7435, <18> 26.8461, <19> 33.0582, <20> 16.8794;
param workload[JOB] := <1> 6.7012, <2> 21.7156, <3> 40.9439, <4> 30.8124, <5> 8.8284, <6> 18.8991, <7> 19.4585, <8> 30.1611, <9> 5.1038, <10> 47.4164, <11> 30.3029, <12> 24.9523, <13> 43.877, <14> 21.5046, <15> 2.3717, <16> 13.4192, <17> 29.9004, <18> 47.4994, <19> 34.2941, <20> 17.9407;
param capacity[MACHINE] := <1> 53.1538, <2> 53.1538, <3> 53.1538, <4> 53.1538, <5> 53.1538, <6> 53.1538, <7> 53.1538;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
