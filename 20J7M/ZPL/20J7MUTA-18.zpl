set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 44.9106, <2> 1.3205, <3> 6.7393, <4> 17.2572, <5> 41.092, <6> 0.2854, <7> 49.0816, <8> 48.5229, <9> 3.1137, <10> 25.8624, <11> 8.4621, <12> 26.6148, <13> 46.5472, <14> 8.0508, <15> 47.6711, <16> 25.1439, <17> 28.3186, <18> 4.7959, <19> 6.8302, <20> 42.0408;
param workload[JOB] := <1> 2016.962, <2> 1.7437, <3> 45.4182, <4> 297.811, <5> 1688.5525, <6> 0.0815, <7> 2409.0035, <8> 2354.4718, <9> 9.6951, <10> 668.8637, <11> 71.6071, <12> 708.3476, <13> 2166.6418, <14> 64.8154, <15> 2272.5338, <16> 632.2157, <17> 801.9431, <18> 23.0007, <19> 46.6516, <20> 1767.4289;
param capacity[MACHINE] := <1> 1933.6916, <2> 1933.6916, <3> 1933.6916, <4> 1933.6916, <5> 1933.6916, <6> 1933.6916, <7> 1933.6916;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
