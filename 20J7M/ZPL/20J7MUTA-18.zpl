set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 11.8253, <2> 3.0718, <3> 46.4606, <4> 8.6331, <5> 47.8158, <6> 16.1162, <7> 0.7985, <8> 21.9625, <9> 6.6046, <10> 28.9276, <11> 9.7448, <12> 19.0844, <13> 6.7779, <14> 20.6577, <15> 48.4567, <16> 16.2078, <17> 39.1896, <18> 24.7262, <19> 37.133, <20> 26.8626;
param workload[JOB] := <1> 139.8377, <2> 9.436, <3> 2158.5874, <4> 74.5304, <5> 2286.3507, <6> 259.7319, <7> 0.6376, <8> 482.3514, <9> 43.6207, <10> 836.806, <11> 94.9611, <12> 364.2143, <13> 45.9399, <14> 426.7406, <15> 2348.0518, <16> 262.6928, <17> 1535.8247, <18> 611.385, <19> 1378.8597, <20> 721.5993;
param capacity[MACHINE] := <1> 2635.8641, <2> 2635.8641, <3> 2635.8641, <4> 2635.8641, <5> 2635.8641, <6> 2635.8641, <7> 2635.8641;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
