set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 7.8467, <2> 30.229, <3> 33.5141, <4> 49.9094, <5> 9.6476, <6> 23.184, <7> 48.0455, <8> 0.164, <9> 15.4266, <10> 14.55, <11> 14.3064, <12> 12.578, <13> 42.0141, <14> 48.7484, <15> 10.5778, <16> 37.3146, <17> 9.969, <18> 36.9527, <19> 49.1219, <20> 27.7021;
param workload[JOB] := <1> 61.5707, <2> 913.7924, <3> 1123.1949, <4> 2490.9482, <5> 93.0762, <6> 537.4979, <7> 2308.3701, <8> 0.0269, <9> 237.98, <10> 211.7025, <11> 204.6731, <12> 158.2061, <13> 1765.1846, <14> 2376.4065, <15> 111.8899, <16> 1392.3794, <17> 99.381, <18> 1365.502, <19> 2412.9611, <20> 767.4063;
param capacity[MACHINE] := <1> 2661.7357, <2> 2661.7357, <3> 2661.7357, <4> 2661.7357, <5> 2661.7357, <6> 2661.7357, <7> 2661.7357;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
