set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 19.1479, <2> 25.1395, <3> 40.3553, <4> 41.3349, <5> 46.4727, <6> 10.2431, <7> 15.9449, <8> 12.9985, <9> 29.2753, <10> 19.7096, <11> 40.9352, <12> 10.7734, <13> 13.9478, <14> 19.9082, <15> 21.07, <16> 4.1929, <17> 2.3519, <18> 26.7762, <19> 27.4627, <20> 49.2711;
param workload[JOB] := <1> 15.9579, <2> 46.0717, <3> 25.6936, <4> 15.7026, <5> 48.0085, <6> 29.7071, <7> 1.2814, <8> 40.3939, <9> 38.3612, <10> 38.235, <11> 6.1807, <12> 18.4701, <13> 28.8965, <14> 42.6758, <15> 8.9315, <16> 14.8761, <17> 49.2258, <18> 31.6579, <19> 2.3384, <20> 33.2654;
param capacity[MACHINE] := <1> 76.5616, <2> 76.5616, <3> 76.5616, <4> 76.5616, <5> 76.5616, <6> 76.5616, <7> 76.5616;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
