set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 38.9913, <2> 34.5265, <3> 37.5943, <4> 44.8346, <5> 27.5273, <6> 48.7947, <7> 48.3593, <8> 6.7445, <9> 17.7917, <10> 3.828, <11> 17.7945, <12> 36.7074, <13> 34.1496, <14> 12.7645, <15> 49.4447, <16> 46.6419, <17> 45.706, <18> 24.6091, <19> 34.0692, <20> 39.8365;
param workload[JOB] := <1> 5.4172, <2> 43.82, <3> 31.6361, <4> 34.651, <5> 43.5124, <6> 27.775, <7> 48.4263, <8> 21.3898, <9> 45.4288, <10> 23.8297, <11> 1.007, <12> 25.3795, <13> 40.0628, <14> 45.2294, <15> 29.5559, <16> 11.8271, <17> 19.9236, <18> 12.3353, <19> 9.2935, <20> 43.2665;
param capacity[MACHINE] := <1> 563.7669, <2> 563.7669, <3> 563.7669, <4> 563.7669, <5> 563.7669, <6> 563.7669, <7> 563.7669;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
