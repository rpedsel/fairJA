set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 29.117, <2> 30.4287, <3> 25.869, <4> 23.7886, <5> 44.1583, <6> 27.1638, <7> 31.3687, <8> 30.8129, <9> 35.899, <10> 31.5299, <11> 26.7944, <12> 26.5729, <13> 27.6851, <14> 22.6672, <15> 26.8963, <16> 30.5789, <17> 25.5626, <18> 18.3477, <19> 25.3606, <20> 16.5743;
param workload[JOB] := <1> 8.0192, <2> 47.3676, <3> 41.2078, <4> 5.8569, <5> 5.7185, <6> 37.7739, <7> 33.0338, <8> 34.2988, <9> 4.2698, <10> 49.7497, <11> 39.7331, <12> 39.5637, <13> 9.3418, <14> 1.5818, <15> 18.1671, <16> 35.5785, <17> 34.8863, <18> 31.7764, <19> 20.8246, <20> 10.5283;
param capacity[MACHINE] := <1> 509.2776, <2> 509.2776, <3> 509.2776, <4> 509.2776, <5> 509.2776, <6> 509.2776, <7> 509.2776;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
