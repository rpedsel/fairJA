set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 28.842, <2> 21.9296, <3> 28.9863, <4> 29.4587, <5> 19.5641, <6> 28.6407, <7> 34.527, <8> 20.0342, <9> 26.1529, <10> 27.5923, <11> 24.2949, <12> 27.1547, <13> 17.906, <14> 17.7578, <15> 25.2745, <16> 24.3568, <17> 15.0206, <18> 12.8405, <19> 25.544, <20> 26.3878;
param workload[JOB] := <1> 1.9557, <2> 2.2982, <3> 33.9063, <4> 25.2579, <5> 2.4435, <6> 7.8843, <7> 46.6014, <8> 3.1744, <9> 40.4895, <10> 6.5997, <11> 1.4961, <12> 11.9821, <13> 47.204, <14> 3.2785, <15> 0.7416, <16> 46.6453, <17> 2.1652, <18> 13.4659, <19> 44.2087, <20> 36.7978;
param capacity[MACHINE] := <1> 378.5961, <2> 378.5961, <3> 378.5961, <4> 378.5961, <5> 378.5961, <6> 378.5961, <7> 378.5961;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
