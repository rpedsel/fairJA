set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 30.2734, <2> 18.7184, <3> 28.6003, <4> 18.2463, <5> 31.2397, <6> 19.6907, <7> 23.3456, <8> 30.6259, <9> 26.7037, <10> 24.5097, <11> 26.1754, <12> 27.8001, <13> 17.5234, <14> 24.2003, <15> 26.4262, <16> 25.0618, <17> 18.7886, <18> 15.8928, <19> 27.7656, <20> 21.9899;
param workload[JOB] := <1> 916.4787, <2> 350.3785, <3> 817.9772, <4> 332.9275, <5> 975.9189, <6> 387.7237, <7> 545.017, <8> 937.9458, <9> 713.0876, <10> 600.7254, <11> 685.1516, <12> 772.8456, <13> 307.0695, <14> 585.6545, <15> 698.344, <16> 628.0938, <17> 353.0115, <18> 252.5811, <19> 770.9285, <20> 483.5557;
param capacity[MACHINE] := <1> 1730.7737, <2> 1730.7737, <3> 1730.7737, <4> 1730.7737, <5> 1730.7737, <6> 1730.7737, <7> 1730.7737;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
