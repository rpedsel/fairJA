set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 22.0036, <2> 14.4695, <3> 27.5855, <4> 14.5048, <5> 30.9384, <6> 23.2416, <7> 31.3342, <8> 28.1435, <9> 18.4175, <10> 23.2519, <11> 26.6975, <12> 22.6376, <13> 25.9118, <14> 34.2893, <15> 19.822, <16> 27.8729, <17> 20.7997, <18> 17.905, <19> 25.5863, <20> 27.4122;
param workload[JOB] := <1> 22.0036, <2> 14.4695, <3> 27.5855, <4> 14.5048, <5> 30.9384, <6> 23.2416, <7> 31.3342, <8> 28.1435, <9> 18.4175, <10> 23.2519, <11> 26.6975, <12> 22.6376, <13> 25.9118, <14> 34.2893, <15> 19.822, <16> 27.8729, <17> 20.7997, <18> 17.905, <19> 25.5863, <20> 27.4122;
param capacity[MACHINE] := <1> 482.8248, <2> 482.8248, <3> 482.8248, <4> 482.8248, <5> 482.8248, <6> 482.8248, <7> 482.8248;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
