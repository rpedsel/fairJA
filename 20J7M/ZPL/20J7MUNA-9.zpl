set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 19.2217, <2> 21.0036, <3> 32.8552, <4> 38.3651, <5> 3.3182, <6> 47.4458, <7> 6.861, <8> 31.2126, <9> 21.5755, <10> 5.4187, <11> 2.7931, <12> 44.2127, <13> 5.6849, <14> 12.4902, <15> 30.2063, <16> 19.3694, <17> 23.6208, <18> 29.1192, <19> 14.3659, <20> 18.1638;
param workload[JOB] := <1> 369.4738, <2> 441.1512, <3> 1079.4642, <4> 1471.8809, <5> 11.0105, <6> 2251.1039, <7> 47.0733, <8> 974.2264, <9> 465.5022, <10> 29.3623, <11> 7.8014, <12> 1954.7628, <13> 32.3181, <14> 156.0051, <15> 912.4206, <16> 375.1737, <17> 557.9422, <18> 847.9278, <19> 206.3791, <20> 329.9236;
param capacity[MACHINE] := <1> 12520.9031, <2> 12520.9031, <3> 12520.9031, <4> 12520.9031, <5> 12520.9031, <6> 12520.9031, <7> 12520.9031;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
