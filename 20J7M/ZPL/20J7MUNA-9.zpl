set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 6.7937, <2> 14.3653, <3> 39.5503, <4> 10.8968, <5> 22.4321, <6> 45.6357, <7> 12.134, <8> 21.6412, <9> 21.1764, <10> 11.0568, <11> 4.7758, <12> 47.4067, <13> 21.5396, <14> 46.7256, <15> 41.7342, <16> 27.033, <17> 19.6132, <18> 43.7647, <19> 4.515, <20> 26.7596;
param workload[JOB] := <1> 46.1544, <2> 206.3618, <3> 1564.2262, <4> 118.7403, <5> 503.1991, <6> 2082.6171, <7> 147.234, <8> 468.3415, <9> 448.4399, <10> 122.2528, <11> 22.8083, <12> 2247.3952, <13> 463.9544, <14> 2183.2817, <15> 1741.7434, <16> 730.7831, <17> 384.6776, <18> 1915.349, <19> 20.3852, <20> 716.0762;
param capacity[MACHINE] := <1> 16134.0212, <2> 16134.0212, <3> 16134.0212, <4> 16134.0212, <5> 16134.0212, <6> 16134.0212, <7> 16134.0212;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
