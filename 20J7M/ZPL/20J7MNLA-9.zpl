set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 28.2717, <2> 20.4931, <3> 24.4537, <4> 20.8926, <5> 23.9158, <6> 24.3235, <7> 20.3875, <8> 17.2135, <9> 27.1276, <10> 25.1886, <11> 32.6385, <12> 18.7343, <13> 32.1163, <14> 21.9754, <15> 30.7214, <16> 35.124, <17> 21.0434, <18> 24.2161, <19> 19.7928, <20> 22.5297;
param workload[JOB] := <1> 799.289, <2> 419.9671, <3> 597.9834, <4> 436.5007, <5> 571.9655, <6> 591.6327, <7> 415.6502, <8> 296.3046, <9> 735.9067, <10> 634.4656, <11> 1065.2717, <12> 350.974, <13> 1031.4567, <14> 482.9182, <15> 943.8044, <16> 1233.6954, <17> 442.8247, <18> 586.4195, <19> 391.7549, <20> 507.5874;
param capacity[MACHINE] := <1> 1790.9103, <2> 1790.9103, <3> 1790.9103, <4> 1790.9103, <5> 1790.9103, <6> 1790.9103, <7> 1790.9103;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
