set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 22.548, <2> 18.5161, <3> 17.0056, <4> 31.9242, <5> 25.4366, <6> 25.6724, <7> 33.9107, <8> 18.7751, <9> 25.6058, <10> 22.7784, <11> 24.1965, <12> 26.8843, <13> 28.3921, <14> 24.6384, <15> 24.6479, <16> 27.5873, <17> 25.5978, <18> 32.334, <19> 21.5848, <20> 23.5365;
param workload[JOB] := <1> 508.4123, <2> 342.846, <3> 289.1904, <4> 1019.1545, <5> 647.0206, <6> 659.0721, <7> 1149.9356, <8> 352.5044, <9> 655.657, <10> 518.8555, <11> 585.4706, <12> 722.7656, <13> 806.1113, <14> 607.0508, <15> 607.519, <16> 761.0591, <17> 655.2474, <18> 1045.4876, <19> 465.9036, <20> 553.9668;
param capacity[MACHINE] := <1> 1850.4615, <2> 1850.4615, <3> 1850.4615, <4> 1850.4615, <5> 1850.4615, <6> 1850.4615, <7> 1850.4615;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
