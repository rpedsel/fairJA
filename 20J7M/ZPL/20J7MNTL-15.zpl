set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 27.885, <2> 19.4426, <3> 32.543, <4> 23.8918, <5> 22.5727, <6> 36.3005, <7> 26.8935, <8> 27.0274, <9> 26.417, <10> 25.5528, <11> 25.6329, <12> 12.8175, <13> 31.9538, <14> 15.4388, <15> 25.5855, <16> 29.0421, <17> 29.5112, <18> 28.4976, <19> 26.6323, <20> 44.3107;
param workload[JOB] := <1> 27.885, <2> 19.4426, <3> 32.543, <4> 23.8918, <5> 22.5727, <6> 36.3005, <7> 26.8935, <8> 27.0274, <9> 26.417, <10> 25.5528, <11> 25.6329, <12> 12.8175, <13> 31.9538, <14> 15.4388, <15> 25.5855, <16> 29.0421, <17> 29.5112, <18> 28.4976, <19> 26.6323, <20> 44.3107;
param capacity[MACHINE] := <1> 57.6373, <2> 57.6373, <3> 57.6373, <4> 57.6373, <5> 57.6373, <6> 57.6373, <7> 57.6373;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
