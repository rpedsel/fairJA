set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 27.2392, <2> 19.0753, <3> 23.4822, <4> 25.472, <5> 27.4264, <6> 25.6613, <7> 26.7586, <8> 33.5868, <9> 27.3429, <10> 22.0535, <11> 25.6673, <12> 18.0298, <13> 28.216, <14> 30.4169, <15> 24.8244, <16> 29.0573, <17> 25.4218, <18> 29.7456, <19> 23.2086, <20> 23.3826;
param workload[JOB] := <1> 39.1075, <2> 5.1123, <3> 41.9181, <4> 25.0818, <5> 32.6326, <6> 23.9777, <7> 41.8406, <8> 46.0137, <9> 22.5228, <10> 26.7479, <11> 30.0351, <12> 5.0708, <13> 22.3435, <14> 28.2875, <15> 3.8943, <16> 1.7547, <17> 21.2792, <18> 37.0404, <19> 46.6034, <20> 10.4271;
param capacity[MACHINE] := <1> 73.0987, <2> 73.0987, <3> 73.0987, <4> 73.0987, <5> 73.0987, <6> 73.0987, <7> 73.0987;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
