set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 22.4715, <2> 24.2983, <3> 28.0226, <4> 28.5213, <5> 14.1786, <6> 26.5937, <7> 18.5206, <8> 25.6229, <9> 24.1631, <10> 22.4375, <11> 25.5808, <12> 15.2349, <13> 31.1391, <14> 28.5212, <15> 17.6603, <16> 19.9731, <17> 19.6682, <18> 29.0684, <19> 21.5191, <20> 27.1799;
param workload[JOB] := <1> 31.9534, <2> 20.0132, <3> 49.0113, <4> 40.3398, <5> 27.1383, <6> 6.8137, <7> 14.7178, <8> 2.2762, <9> 8.6325, <10> 13.9429, <11> 7.7569, <12> 37.5895, <13> 25.1267, <14> 36.2241, <15> 18.4631, <16> 14.6314, <17> 43.5234, <18> 36.8825, <19> 28.5207, <20> 2.2093;
param capacity[MACHINE] := <1> 66.5381, <2> 66.5381, <3> 66.5381, <4> 66.5381, <5> 66.5381, <6> 66.5381, <7> 66.5381;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
