set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 22.4348, <2> 27.0217, <3> 20.9165, <4> 22.7685, <5> 35.586, <6> 17.7843, <7> 37.6964, <8> 31.1855, <9> 24.4552, <10> 28.5349, <11> 27.0405, <12> 17.7195, <13> 26.832, <14> 32.5311, <15> 19.5104, <16> 29.1965, <17> 20.2032, <18> 26.2627, <19> 24.5809, <20> 28.4453;
param workload[JOB] := <1> 22.4348, <2> 27.0217, <3> 20.9165, <4> 22.7685, <5> 35.586, <6> 17.7843, <7> 37.6964, <8> 31.1855, <9> 24.4552, <10> 28.5349, <11> 27.0405, <12> 17.7195, <13> 26.832, <14> 32.5311, <15> 19.5104, <16> 29.1965, <17> 20.2032, <18> 26.2627, <19> 24.5809, <20> 28.4453;
param capacity[MACHINE] := <1> 520.7059, <2> 520.7059, <3> 520.7059, <4> 520.7059, <5> 520.7059, <6> 520.7059, <7> 520.7059;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
