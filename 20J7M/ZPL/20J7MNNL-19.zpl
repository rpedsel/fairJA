set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 24.2502, <2> 24.2584, <3> 27.9965, <4> 26.7394, <5> 26.2898, <6> 27.6234, <7> 22.8838, <8> 35.8202, <9> 21.5957, <10> 29.2589, <11> 27.8357, <12> 26.8589, <13> 20.7235, <14> 25.3105, <15> 24.8447, <16> 24.4916, <17> 20.7185, <18> 26.4492, <19> 25.2124, <20> 26.8416;
param workload[JOB] := <1> 24.2502, <2> 24.2584, <3> 27.9965, <4> 26.7394, <5> 26.2898, <6> 27.6234, <7> 22.8838, <8> 35.8202, <9> 21.5957, <10> 29.2589, <11> 27.8357, <12> 26.8589, <13> 20.7235, <14> 25.3105, <15> 24.8447, <16> 24.4916, <17> 20.7185, <18> 26.4492, <19> 25.2124, <20> 26.8416;
param capacity[MACHINE] := <1> 516.0029, <2> 516.0029, <3> 516.0029, <4> 516.0029, <5> 516.0029, <6> 516.0029, <7> 516.0029;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
