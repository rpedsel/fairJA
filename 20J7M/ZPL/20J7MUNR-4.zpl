set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 39.0416, <2> 15.3901, <3> 31.3291, <4> 31.2624, <5> 7.73, <6> 49.6458, <7> 38.4463, <8> 18.406, <9> 36.9288, <10> 49.844, <11> 32.8609, <12> 37.8369, <13> 10.2237, <14> 43.0743, <15> 4.3076, <16> 40.0996, <17> 13.7155, <18> 21.5254, <19> 15.4382, <20> 42.8552;
param workload[JOB] := <1> 13.1101, <2> 38.2295, <3> 47.2928, <4> 24.3751, <5> 48.5203, <6> 43.419, <7> 20.0386, <8> 44.9436, <9> 9.2573, <10> 8.9049, <11> 2.467, <12> 49.3692, <13> 11.7366, <14> 16.9945, <15> 24.1089, <16> 9.7657, <17> 34.0566, <18> 45.1984, <19> 28.4263, <20> 32.2634;
param capacity[MACHINE] := <1> 552.4778, <2> 552.4778, <3> 552.4778, <4> 552.4778, <5> 552.4778, <6> 552.4778, <7> 552.4778;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
