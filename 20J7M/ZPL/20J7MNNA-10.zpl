set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 21.7955, <2> 20.7647, <3> 24.6693, <4> 28.1653, <5> 24.2822, <6> 32.0677, <7> 18.2363, <8> 15.4201, <9> 27.3019, <10> 31.1102, <11> 25.4142, <12> 19.9045, <13> 24.2767, <14> 28.3017, <15> 25.6818, <16> 25.771, <17> 21.426, <18> 21.0052, <19> 24.7555, <20> 33.2442;
param workload[JOB] := <1> 475.0438, <2> 431.1728, <3> 608.5744, <4> 793.2841, <5> 589.6252, <6> 1028.3374, <7> 332.5626, <8> 237.7795, <9> 745.3937, <10> 967.8445, <11> 645.8816, <12> 396.1891, <13> 589.3582, <14> 800.9862, <15> 659.5549, <16> 664.1444, <17> 459.0735, <18> 441.2184, <19> 612.8348, <20> 1105.1768;
param capacity[MACHINE] := <1> 12584.0359, <2> 12584.0359, <3> 12584.0359, <4> 12584.0359, <5> 12584.0359, <6> 12584.0359, <7> 12584.0359;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
