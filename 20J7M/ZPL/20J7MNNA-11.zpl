set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 18.4422, <2> 22.6062, <3> 19.6585, <4> 21.1452, <5> 21.1655, <6> 17.6223, <7> 30.0433, <8> 24.2231, <9> 24.0824, <10> 20.4138, <11> 14.0827, <12> 18.0029, <13> 26.9836, <14> 25.225, <15> 27.2329, <16> 26.6033, <17> 26.8309, <18> 23.2997, <19> 32.7269, <20> 22.7848;
param workload[JOB] := <1> 340.1147, <2> 511.0403, <3> 386.4566, <4> 447.1195, <5> 447.9784, <6> 310.5455, <7> 902.5999, <8> 586.7586, <9> 579.962, <10> 416.7232, <11> 198.3224, <12> 324.1044, <13> 728.1147, <14> 636.3006, <15> 741.6308, <16> 707.7356, <17> 719.8972, <18> 542.876, <19> 1071.05, <20> 519.1471;
param capacity[MACHINE] := <1> 11118.4775, <2> 11118.4775, <3> 11118.4775, <4> 11118.4775, <5> 11118.4775, <6> 11118.4775, <7> 11118.4775;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
