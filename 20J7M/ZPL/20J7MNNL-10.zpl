set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 23.8318, <2> 20.9432, <3> 19.9472, <4> 34.4907, <5> 26.9925, <6> 22.2937, <7> 20.6436, <8> 18.4262, <9> 22.3191, <10> 24.8048, <11> 26.2039, <12> 27.3614, <13> 30.9556, <14> 20.5174, <15> 25.7173, <16> 29.0677, <17> 19.3595, <18> 23.5966, <19> 32.3804, <20> 28.3335;
param workload[JOB] := <1> 23.8318, <2> 20.9432, <3> 19.9472, <4> 34.4907, <5> 26.9925, <6> 22.2937, <7> 20.6436, <8> 18.4262, <9> 22.3191, <10> 24.8048, <11> 26.2039, <12> 27.3614, <13> 30.9556, <14> 20.5174, <15> 25.7173, <16> 29.0677, <17> 19.3595, <18> 23.5966, <19> 32.3804, <20> 28.3335;
param capacity[MACHINE] := <1> 498.1861, <2> 498.1861, <3> 498.1861, <4> 498.1861, <5> 498.1861, <6> 498.1861, <7> 498.1861;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
