set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 26.1476, <2> 18.1287, <3> 28.2557, <4> 23.1693, <5> 19.1045, <6> 12.6013, <7> 26.3973, <8> 33.3615, <9> 27.4282, <10> 28.4006, <11> 26.1782, <12> 23.1947, <13> 25.9636, <14> 30.3123, <15> 37.8123, <16> 23.2667, <17> 28.1249, <18> 24.1166, <19> 23.2398, <20> 20.0298;
param workload[JOB] := <1> 26.1476, <2> 18.1287, <3> 28.2557, <4> 23.1693, <5> 19.1045, <6> 12.6013, <7> 26.3973, <8> 33.3615, <9> 27.4282, <10> 28.4006, <11> 26.1782, <12> 23.1947, <13> 25.9636, <14> 30.3123, <15> 37.8123, <16> 23.2667, <17> 28.1249, <18> 24.1166, <19> 23.2398, <20> 20.0298;
param capacity[MACHINE] := <1> 54.1321, <2> 54.1321, <3> 54.1321, <4> 54.1321, <5> 54.1321, <6> 54.1321, <7> 54.1321;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
