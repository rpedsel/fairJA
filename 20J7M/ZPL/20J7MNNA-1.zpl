set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 20.9532, <2> 23.6519, <3> 24.4924, <4> 30.4292, <5> 27.1048, <6> 33.6509, <7> 33.477, <8> 34.2653, <9> 29.8336, <10> 37.6411, <11> 24.0936, <12> 19.661, <13> 24.0273, <14> 27.8584, <15> 30.2284, <16> 29.5818, <17> 22.2564, <18> 29.9456, <19> 24.5132, <20> 40.418;
param workload[JOB] := <1> 439.0366, <2> 559.4124, <3> 599.8777, <4> 925.9362, <5> 734.6702, <6> 1132.3831, <7> 1120.7095, <8> 1174.1108, <9> 890.0437, <10> 1416.8524, <11> 580.5016, <12> 386.5549, <13> 577.3111, <14> 776.0905, <15> 913.7562, <16> 875.0829, <17> 495.3473, <18> 896.739, <19> 600.897, <20> 1633.6147;
param capacity[MACHINE] := <1> 16728.9278, <2> 16728.9278, <3> 16728.9278, <4> 16728.9278, <5> 16728.9278, <6> 16728.9278, <7> 16728.9278;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
