set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 25.7411, <2> 27.0326, <3> 26.3197, <4> 30.8007, <5> 17.2946, <6> 31.0282, <7> 33.3071, <8> 29.6101, <9> 28.4669, <10> 23.8789, <11> 30.2103, <12> 14.7288, <13> 29.328, <14> 27.5978, <15> 30.2474, <16> 28.5695, <17> 22.3066, <18> 26.5512, <19> 25.3368, <20> 17.6691;
param workload[JOB] := <1> 662.6042, <2> 730.7615, <3> 692.7266, <4> 948.6831, <5> 299.1032, <6> 962.7492, <7> 1109.3629, <8> 876.758, <9> 810.3644, <10> 570.2019, <11> 912.6622, <12> 216.9375, <13> 860.1316, <14> 761.6386, <15> 914.9052, <16> 816.2163, <17> 497.5844, <18> 704.9662, <19> 641.9534, <20> 312.1971;
param capacity[MACHINE] := <1> 14302.5075, <2> 14302.5075, <3> 14302.5075, <4> 14302.5075, <5> 14302.5075, <6> 14302.5075, <7> 14302.5075;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
