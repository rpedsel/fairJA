set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 28.6593, <2> 21.2617, <3> 28.7195, <4> 26.6149, <5> 17.0413, <6> 31.53, <7> 24.6392, <8> 22.5536, <9> 26.8484, <10> 27.1255, <11> 16.786, <12> 23.0168, <13> 23.0858, <14> 18.8872, <15> 19.7936, <16> 23.6975, <17> 35.1601, <18> 18.2201, <19> 27.6917, <20> 22.2871;
param workload[JOB] := <1> 821.3555, <2> 452.0599, <3> 824.8097, <4> 708.3529, <5> 290.4059, <6> 994.1409, <7> 607.0902, <8> 508.6649, <9> 720.8366, <10> 735.7928, <11> 281.7698, <12> 529.7731, <13> 532.9542, <14> 356.7263, <15> 391.7866, <16> 561.5715, <17> 1236.2326, <18> 331.972, <19> 766.8302, <20> 496.7148;
param capacity[MACHINE] := <1> 12149.8404, <2> 12149.8404, <3> 12149.8404, <4> 12149.8404, <5> 12149.8404, <6> 12149.8404, <7> 12149.8404;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
