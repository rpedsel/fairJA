set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 27.9366, <2> 32.4388, <3> 22.1851, <4> 26.5125, <5> 19.4844, <6> 24.6852, <7> 21.2003, <8> 16.8748, <9> 35.909, <10> 29.0097, <11> 19.9306, <12> 36.2692, <13> 27.3941, <14> 28.2614, <15> 22.1625, <16> 21.0712, <17> 27.7637, <18> 22.5849, <19> 22.541, <20> 21.1278;
param workload[JOB] := <1> 16.6172, <2> 30.3441, <3> 37.5476, <4> 48.0459, <5> 38.1852, <6> 27.8323, <7> 33.5945, <8> 46.4733, <9> 2.9182, <10> 4.9922, <11> 42.3934, <12> 46.9774, <13> 42.0329, <14> 38.3323, <15> 3.5171, <16> 39.3914, <17> 19.605, <18> 8.4499, <19> 6.1556, <20> 40.6612;
param capacity[MACHINE] := <1> 574.0667, <2> 574.0667, <3> 574.0667, <4> 574.0667, <5> 574.0667, <6> 574.0667, <7> 574.0667;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
