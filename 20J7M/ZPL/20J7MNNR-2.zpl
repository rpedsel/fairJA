set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 23.9082, <2> 26.6214, <3> 32.6053, <4> 22.8668, <5> 32.5557, <6> 21.9711, <7> 15.4486, <8> 21.3778, <9> 21.7376, <10> 23.6317, <11> 29.9819, <12> 30.2187, <13> 24.671, <14> 28.8942, <15> 27.8777, <16> 21.309, <17> 31.7108, <18> 39.42, <19> 28.6263, <20> 27.8689;
param workload[JOB] := <1> 36.7296, <2> 21.1346, <3> 38.2897, <4> 7.5381, <5> 40.0871, <6> 46.6057, <7> 13.3147, <8> 35.5639, <9> 40.4278, <10> 22.2249, <11> 14.1239, <12> 40.1475, <13> 48.9607, <14> 25.0881, <15> 28.657, <16> 47.641, <17> 31.6647, <18> 35.6358, <19> 36.652, <20> 30.8627;
param capacity[MACHINE] := <1> 641.3495, <2> 641.3495, <3> 641.3495, <4> 641.3495, <5> 641.3495, <6> 641.3495, <7> 641.3495;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
