set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 9.5688, <2> 33.7069, <3> 26.3011, <4> 18.8988, <5> 46.6809, <6> 1.9235, <7> 31.0383, <8> 10.2224, <9> 13.3299, <10> 0.8992, <11> 13.2154, <12> 14.345, <13> 28.8411, <14> 35.9285, <15> 37.969, <16> 15.7421, <17> 3.8589, <18> 11.1707, <19> 44.8242, <20> 7.0961;
param workload[JOB] := <1> 9.5688, <2> 33.7069, <3> 26.3011, <4> 18.8988, <5> 46.6809, <6> 1.9235, <7> 31.0383, <8> 10.2224, <9> 13.3299, <10> 0.8992, <11> 13.2154, <12> 14.345, <13> 28.8411, <14> 35.9285, <15> 37.969, <16> 15.7421, <17> 3.8589, <18> 11.1707, <19> 44.8242, <20> 7.0961;
param capacity[MACHINE] := <1> 405.5608, <2> 405.5608, <3> 405.5608, <4> 405.5608, <5> 405.5608, <6> 405.5608, <7> 405.5608;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
