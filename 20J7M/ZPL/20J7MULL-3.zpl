set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 38.7781, <2> 38.0267, <3> 23.1033, <4> 19.6638, <5> 26.8092, <6> 19.9625, <7> 19.4779, <8> 30.8037, <9> 0.8174, <10> 40.4016, <11> 3.6961, <12> 25.3199, <13> 37.9863, <14> 28.0399, <15> 14.715, <16> 15.0531, <17> 33.8998, <18> 28.6472, <19> 49.0017, <20> 18.9633;
param workload[JOB] := <1> 38.7781, <2> 38.0267, <3> 23.1033, <4> 19.6638, <5> 26.8092, <6> 19.9625, <7> 19.4779, <8> 30.8037, <9> 0.8174, <10> 40.4016, <11> 3.6961, <12> 25.3199, <13> 37.9863, <14> 28.0399, <15> 14.715, <16> 15.0531, <17> 33.8998, <18> 28.6472, <19> 49.0017, <20> 18.9633;
param capacity[MACHINE] := <1> 73.3095, <2> 73.3095, <3> 73.3095, <4> 73.3095, <5> 73.3095, <6> 73.3095, <7> 73.3095;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
