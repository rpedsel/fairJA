set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 26.6111, <2> 28.52, <3> 28.1458, <4> 19.9812, <5> 26.1732, <6> 23.7675, <7> 28.7964, <8> 19.7175, <9> 27.5144, <10> 21.6635, <11> 29.0335, <12> 26.0266, <13> 20.5809, <14> 23.5363, <15> 25.81, <16> 19.9577, <17> 19.4723, <18> 19.504, <19> 25.7344, <20> 25.3364;
param workload[JOB] := <1> 708.1506, <2> 813.3904, <3> 792.1861, <4> 399.2484, <5> 685.0364, <6> 564.8941, <7> 829.2327, <8> 388.7798, <9> 757.0422, <10> 469.3072, <11> 842.9441, <12> 677.3839, <13> 423.5734, <14> 553.9574, <15> 666.1561, <16> 398.3098, <17> 379.1705, <18> 380.406, <19> 662.2593, <20> 641.9332;
param capacity[MACHINE] := <1> 12033.3616, <2> 12033.3616, <3> 12033.3616, <4> 12033.3616, <5> 12033.3616, <6> 12033.3616, <7> 12033.3616;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
