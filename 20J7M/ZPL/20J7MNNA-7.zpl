set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 18.133, <2> 32.2251, <3> 20.1852, <4> 25.1258, <5> 23.862, <6> 23.7194, <7> 29.8466, <8> 19.9839, <9> 27.9245, <10> 25.7825, <11> 26.436, <12> 24.6524, <13> 33.4859, <14> 17.4002, <15> 30.9921, <16> 23.6776, <17> 20.7142, <18> 25.928, <19> 26.2757, <20> 25.0836;
param workload[JOB] := <1> 328.8057, <2> 1038.4571, <3> 407.4423, <4> 631.3058, <5> 569.395, <6> 562.6099, <7> 890.8195, <8> 399.3563, <9> 779.7777, <10> 664.7373, <11> 698.8621, <12> 607.7408, <13> 1121.3055, <14> 302.767, <15> 960.5103, <16> 560.6287, <17> 429.0781, <18> 672.2612, <19> 690.4124, <20> 629.187;
param capacity[MACHINE] := <1> 12945.4597, <2> 12945.4597, <3> 12945.4597, <4> 12945.4597, <5> 12945.4597, <6> 12945.4597, <7> 12945.4597;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
