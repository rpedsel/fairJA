set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 24.7962, <2> 26.4059, <3> 18.7904, <4> 22.8578, <5> 25.9233, <6> 21.6169, <7> 21.2154, <8> 24.6627, <9> 27.1448, <10> 17.793, <11> 22.2853, <12> 24.339, <13> 25.8626, <14> 22.6147, <15> 27.8952, <16> 20.4214, <17> 31.8903, <18> 27.9275, <19> 22.3815, <20> 17.1174;
param workload[JOB] := <1> 25.4862, <2> 33.992, <3> 4.2094, <4> 23.5937, <5> 19.9788, <6> 26.2082, <7> 49.9583, <8> 10.8714, <9> 38.3535, <10> 18.2016, <11> 27.3995, <12> 39.9289, <13> 9.1218, <14> 36.8581, <15> 0.6613, <16> 21.5123, <17> 16.4248, <18> 7.2089, <19> 22.5272, <20> 12.2626;
param capacity[MACHINE] := <1> 63.5369, <2> 63.5369, <3> 63.5369, <4> 63.5369, <5> 63.5369, <6> 63.5369, <7> 63.5369;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
