set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 24.5399, <2> 28.5388, <3> 25.9024, <4> 26.415, <5> 22.8963, <6> 23.5895, <7> 26.7975, <8> 25.2651, <9> 20.108, <10> 26.6154, <11> 24.7127, <12> 20.8332, <13> 27.3333, <14> 30.2265, <15> 31.9825, <16> 33.6429, <17> 21.1543, <18> 32.6973, <19> 25.5588, <20> 26.2671;
param workload[JOB] := <1> 602.2067, <2> 814.4631, <3> 670.9343, <4> 697.7522, <5> 524.2406, <6> 556.4645, <7> 718.106, <8> 638.3253, <9> 404.3317, <10> 708.3795, <11> 610.7175, <12> 434.0222, <13> 747.1093, <14> 913.6413, <15> 1022.8803, <16> 1131.8447, <17> 447.5044, <18> 1069.1134, <19> 653.2523, <20> 689.9605;
param capacity[MACHINE] := <1> 1505.9196, <2> 1505.9196, <3> 1505.9196, <4> 1505.9196, <5> 1505.9196, <6> 1505.9196, <7> 1505.9196;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
