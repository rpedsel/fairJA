set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 34.5913, <2> 26.7958, <3> 24.331, <4> 23.3098, <5> 32.6298, <6> 31.8413, <7> 21.5803, <8> 29.1818, <9> 27.9845, <10> 23.5941, <11> 5.6552, <12> 19.4988, <13> 18.2654, <14> 32.1008, <15> 23.5949, <16> 26.2513, <17> 22.8553, <18> 24.9728, <19> 19.4099, <20> 22.2825;
param workload[JOB] := <1> 47.0385, <2> 40.024, <3> 17.081, <4> 11.7151, <5> 33.1638, <6> 9.73, <7> 36.6834, <8> 7.8533, <9> 19.6992, <10> 33.5505, <11> 13.5077, <12> 19.614, <13> 38.7445, <14> 34.1629, <15> 35.6423, <16> 35.6249, <17> 48.5804, <18> 10.2058, <19> 41.0355, <20> 20.8042;
param capacity[MACHINE] := <1> 554.461, <2> 554.461, <3> 554.461, <4> 554.461, <5> 554.461, <6> 554.461, <7> 554.461;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
