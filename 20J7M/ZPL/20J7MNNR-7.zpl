set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 28.4351, <2> 27.3435, <3> 30.5394, <4> 27.3511, <5> 20.2051, <6> 26.395, <7> 22.5341, <8> 8.999, <9> 23.4416, <10> 18.9147, <11> 26.0725, <12> 26.5235, <13> 33.1296, <14> 24.0435, <15> 22.2954, <16> 22.3072, <17> 22.1053, <18> 29.8159, <19> 16.8607, <20> 26.6846;
param workload[JOB] := <1> 6.1805, <2> 36.5994, <3> 43.3113, <4> 35.0281, <5> 0.0019, <6> 19.5584, <7> 6.0107, <8> 13.1647, <9> 23.0097, <10> 5.6117, <11> 38.1387, <12> 19.8827, <13> 16.8031, <14> 9.6528, <15> 2.0665, <16> 39.3289, <17> 11.964, <18> 26.4089, <19> 42.3736, <20> 49.865;
param capacity[MACHINE] := <1> 444.9606, <2> 444.9606, <3> 444.9606, <4> 444.9606, <5> 444.9606, <6> 444.9606, <7> 444.9606;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
