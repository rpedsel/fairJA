set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 22.5576, <2> 18.7882, <3> 23.3982, <4> 19.6015, <5> 25.6499, <6> 18.7178, <7> 29.4163, <8> 34.7189, <9> 28.1, <10> 21.1122, <11> 28.5083, <12> 25.701, <13> 34.6711, <14> 18.3503, <15> 18.7267, <16> 18.576, <17> 29.3582, <18> 18.8409, <19> 27.28, <20> 31.0348;
param workload[JOB] := <1> 0.5502, <2> 44.8764, <3> 29.9319, <4> 21.6898, <5> 35.9637, <6> 17.2228, <7> 14.4251, <8> 26.8419, <9> 25.8463, <10> 2.4801, <11> 40.5275, <12> 13.2738, <13> 42.9791, <14> 35.9732, <15> 29.5917, <16> 21.9647, <17> 9.2627, <18> 21.6152, <19> 14.3037, <20> 22.0381;
param capacity[MACHINE] := <1> 471.3579, <2> 471.3579, <3> 471.3579, <4> 471.3579, <5> 471.3579, <6> 471.3579, <7> 471.3579;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
