set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 26.1319, <2> 22.4065, <3> 17.5399, <4> 26.3728, <5> 26.0668, <6> 36.1499, <7> 26.1725, <8> 28.6592, <9> 31.1075, <10> 25.8608, <11> 23.7726, <12> 17.9027, <13> 29.0138, <14> 26.0535, <15> 20.3113, <16> 25.1508, <17> 15.9256, <18> 28.4643, <19> 26.046, <20> 30.9255;
param workload[JOB] := <1> 682.8762, <2> 502.0512, <3> 307.6481, <4> 695.5246, <5> 679.4781, <6> 1306.8153, <7> 684.9998, <8> 821.3497, <9> 967.6766, <10> 668.781, <11> 565.1365, <12> 320.5067, <13> 841.8006, <14> 678.7849, <15> 412.5489, <16> 632.5627, <17> 253.6247, <18> 810.2164, <19> 678.3941, <20> 956.3866;
param capacity[MACHINE] := <1> 1442.9103, <2> 1442.9103, <3> 1442.9103, <4> 1442.9103, <5> 1442.9103, <6> 1442.9103, <7> 1442.9103;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
