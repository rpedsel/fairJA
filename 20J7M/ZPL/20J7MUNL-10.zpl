set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 15.844, <2> 36.6105, <3> 36.8598, <4> 17.4145, <5> 30.8112, <6> 14.2434, <7> 29.6654, <8> 45.8854, <9> 36.1503, <10> 18.4761, <11> 46.9337, <12> 12.6315, <13> 42.559, <14> 31.634, <15> 6.5732, <16> 37.0674, <17> 28.6672, <18> 28.311, <19> 46.5537, <20> 33.0951;
param workload[JOB] := <1> 15.844, <2> 36.6105, <3> 36.8598, <4> 17.4145, <5> 30.8112, <6> 14.2434, <7> 29.6654, <8> 45.8854, <9> 36.1503, <10> 18.4761, <11> 46.9337, <12> 12.6315, <13> 42.559, <14> 31.634, <15> 6.5732, <16> 37.0674, <17> 28.6672, <18> 28.311, <19> 46.5537, <20> 33.0951;
param capacity[MACHINE] := <1> 595.9864, <2> 595.9864, <3> 595.9864, <4> 595.9864, <5> 595.9864, <6> 595.9864, <7> 595.9864;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
