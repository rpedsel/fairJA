set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 35.5555, <2> 24.279, <3> 45.4421, <4> 17.5065, <5> 19.5339, <6> 2.0001, <7> 36.6005, <8> 48.6698, <9> 0.8888, <10> 5.0936, <11> 2.1388, <12> 8.6362, <13> 20.3769, <14> 12.8417, <15> 49.2829, <16> 32.7093, <17> 38.3477, <18> 49.8654, <19> 42.6596, <20> 44.2039;
param workload[JOB] := <1> 35.5555, <2> 24.279, <3> 45.4421, <4> 17.5065, <5> 19.5339, <6> 2.0001, <7> 36.6005, <8> 48.6698, <9> 0.8888, <10> 5.0936, <11> 2.1388, <12> 8.6362, <13> 20.3769, <14> 12.8417, <15> 49.2829, <16> 32.7093, <17> 38.3477, <18> 49.8654, <19> 42.6596, <20> 44.2039;
param capacity[MACHINE] := <1> 536.6322, <2> 536.6322, <3> 536.6322, <4> 536.6322, <5> 536.6322, <6> 536.6322, <7> 536.6322;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
