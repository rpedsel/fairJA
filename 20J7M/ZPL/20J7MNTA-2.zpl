set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 26.7163, <2> 20.0134, <3> 25.3184, <4> 21.9646, <5> 32.952, <6> 32.8629, <7> 28.2286, <8> 20.5774, <9> 25.6638, <10> 32.7648, <11> 26.1712, <12> 20.3198, <13> 24.5106, <14> 25.624, <15> 27.9044, <16> 25.2807, <17> 24.6548, <18> 21.6345, <19> 21.7497, <20> 23.1468;
param workload[JOB] := <1> 713.7607, <2> 400.5362, <3> 641.0214, <4> 482.4437, <5> 1085.8343, <6> 1079.9702, <7> 796.8539, <8> 423.4294, <9> 658.6306, <10> 1073.5321, <11> 684.9317, <12> 412.8943, <13> 600.7695, <14> 656.5894, <15> 778.6555, <16> 639.1138, <17> 607.8592, <18> 468.0516, <19> 473.0495, <20> 535.7744;
param capacity[MACHINE] := <1> 1415.7537, <2> 1415.7537, <3> 1415.7537, <4> 1415.7537, <5> 1415.7537, <6> 1415.7537, <7> 1415.7537;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
