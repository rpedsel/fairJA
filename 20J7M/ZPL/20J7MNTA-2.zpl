set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 25.1578, <2> 25.3872, <3> 18.3031, <4> 31.081, <5> 22.0729, <6> 28.1927, <7> 22.7007, <8> 24.6424, <9> 34.47, <10> 26.7129, <11> 28.4115, <12> 26.2769, <13> 21.0129, <14> 25.15, <15> 25.0041, <16> 25.7356, <17> 23.2112, <18> 21.5493, <19> 21.3319, <20> 16.9758;
param workload[JOB] := <1> 632.9149, <2> 644.5099, <3> 335.0035, <4> 966.0286, <5> 487.2129, <6> 794.8283, <7> 515.3218, <8> 607.2479, <9> 1188.1809, <10> 713.579, <11> 807.2133, <12> 690.4755, <13> 441.542, <14> 632.5225, <15> 625.205, <16> 662.3211, <17> 538.7598, <18> 464.3723, <19> 455.05, <20> 288.1778;
param capacity[MACHINE] := <1> 1338.2643, <2> 1338.2643, <3> 1338.2643, <4> 1338.2643, <5> 1338.2643, <6> 1338.2643, <7> 1338.2643;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
