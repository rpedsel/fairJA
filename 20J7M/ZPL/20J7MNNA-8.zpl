set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 17.3092, <2> 20.408, <3> 26.6826, <4> 20.9565, <5> 17.5624, <6> 29.4834, <7> 24.7044, <8> 30.2992, <9> 20.1211, <10> 21.8518, <11> 23.3153, <12> 24.573, <13> 23.7799, <14> 22.1752, <15> 28.8345, <16> 29.6274, <17> 32.0692, <18> 20.0945, <19> 27.1162, <20> 29.4035;
param workload[JOB] := <1> 299.6084, <2> 416.4865, <3> 711.9611, <4> 439.1749, <5> 308.4379, <6> 869.2709, <7> 610.3074, <8> 918.0415, <9> 404.8587, <10> 477.5012, <11> 543.6032, <12> 603.8323, <13> 565.4836, <14> 491.7395, <15> 831.4284, <16> 877.7828, <17> 1028.4336, <18> 403.7889, <19> 735.2883, <20> 864.5658;
param capacity[MACHINE] := <1> 12401.5949, <2> 12401.5949, <3> 12401.5949, <4> 12401.5949, <5> 12401.5949, <6> 12401.5949, <7> 12401.5949;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
