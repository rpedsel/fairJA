set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 31.0177, <2> 32.8723, <3> 30.5244, <4> 27.1353, <5> 22.7163, <6> 29.388, <7> 25.825, <8> 28.0355, <9> 29.7506, <10> 32.448, <11> 26.4058, <12> 24.2432, <13> 28.3687, <14> 21.4821, <15> 17.8797, <16> 26.4369, <17> 18.9133, <18> 18.5381, <19> 11.3559, <20> 33.2724;
param workload[JOB] := <1> 962.0977, <2> 1080.5881, <3> 931.739, <4> 736.3245, <5> 516.0303, <6> 863.6545, <7> 666.9306, <8> 785.9893, <9> 885.0982, <10> 1052.8727, <11> 697.2663, <12> 587.7327, <13> 804.7831, <14> 461.4806, <15> 319.6837, <16> 698.9097, <17> 357.7129, <18> 343.6612, <19> 128.9565, <20> 1107.0526;
param capacity[MACHINE] := <1> 13988.5642, <2> 13988.5642, <3> 13988.5642, <4> 13988.5642, <5> 13988.5642, <6> 13988.5642, <7> 13988.5642;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
