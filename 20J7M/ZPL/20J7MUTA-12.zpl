set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 29.8246, <2> 15.7256, <3> 42.6018, <4> 32.4733, <5> 41.9228, <6> 34.0027, <7> 21.8894, <8> 49.4535, <9> 0.2057, <10> 49.7195, <11> 5.793, <12> 33.5311, <13> 47.6432, <14> 16.4753, <15> 38.7359, <16> 19.2008, <17> 32.325, <18> 37.8783, <19> 22.7798, <20> 10.7546;
param workload[JOB] := <1> 889.5068, <2> 247.2945, <3> 1814.9134, <4> 1054.5152, <5> 1757.5212, <6> 1156.1836, <7> 479.1458, <8> 2445.6487, <9> 0.0423, <10> 2472.0287, <11> 33.5588, <12> 1124.3347, <13> 2269.8745, <14> 271.4355, <15> 1500.4699, <16> 368.6707, <17> 1044.9056, <18> 1434.7656, <19> 518.9193, <20> 115.6614;
param capacity[MACHINE] := <1> 2535.9244, <2> 2535.9244, <3> 2535.9244, <4> 2535.9244, <5> 2535.9244, <6> 2535.9244, <7> 2535.9244;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
