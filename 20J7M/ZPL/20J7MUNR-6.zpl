set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 30.7237, <2> 48.6856, <3> 22.6622, <4> 40.5034, <5> 17.5709, <6> 46.3659, <7> 31.0308, <8> 13.8363, <9> 22.0934, <10> 24.1093, <11> 11.3096, <12> 2.6269, <13> 23.3359, <14> 20.6689, <15> 47.6154, <16> 17.7478, <17> 31.8349, <18> 38.6808, <19> 7.5869, <20> 12.6833;
param workload[JOB] := <1> 25.1551, <2> 47.5003, <3> 46.1484, <4> 0.3575, <5> 15.0266, <6> 38.5467, <7> 2.7395, <8> 45.5368, <9> 18.1854, <10> 30.4536, <11> 17.5972, <12> 3.0824, <13> 39.5093, <14> 18.6777, <15> 39.1345, <16> 21.8962, <17> 22.1194, <18> 13.471, <19> 29.8516, <20> 42.4442;
param capacity[MACHINE] := <1> 517.4334, <2> 517.4334, <3> 517.4334, <4> 517.4334, <5> 517.4334, <6> 517.4334, <7> 517.4334;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
