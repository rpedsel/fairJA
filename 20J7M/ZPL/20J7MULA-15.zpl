set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 27.6318, <2> 45.0925, <3> 20.2424, <4> 7.6818, <5> 37.1641, <6> 31.2808, <7> 48.3112, <8> 43.469, <9> 30.9323, <10> 27.4508, <11> 23.5405, <12> 45.7122, <13> 49.4319, <14> 30.9483, <15> 38.4562, <16> 15.0437, <17> 4.4734, <18> 22.9831, <19> 13.1597, <20> 18.4273;
param workload[JOB] := <1> 763.5164, <2> 2033.3336, <3> 409.7548, <4> 59.0101, <5> 1381.1703, <6> 978.4884, <7> 2333.972, <8> 1889.554, <9> 956.8072, <10> 753.5464, <11> 554.1551, <12> 2089.6052, <13> 2443.5127, <14> 957.7973, <15> 1478.8793, <16> 226.3129, <17> 20.0113, <18> 528.2229, <19> 173.1777, <20> 339.5654;
param capacity[MACHINE] := <1> 2910.0561, <2> 2910.0561, <3> 2910.0561, <4> 2910.0561, <5> 2910.0561, <6> 2910.0561, <7> 2910.0561;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
