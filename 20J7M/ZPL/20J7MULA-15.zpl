set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 10.4805, <2> 18.7988, <3> 4.4757, <4> 20.3069, <5> 5.1744, <6> 29.0882, <7> 10.9063, <8> 22.496, <9> 19.8114, <10> 15.3547, <11> 14.1496, <12> 47.4255, <13> 10.0058, <14> 14.4228, <15> 25.2921, <16> 20.6371, <17> 23.4377, <18> 0.1467, <19> 47.5516, <20> 1.8775;
param workload[JOB] := <1> 109.8409, <2> 353.3949, <3> 20.0319, <4> 412.3702, <5> 26.7744, <6> 846.1234, <7> 118.9474, <8> 506.07, <9> 392.4916, <10> 235.7668, <11> 200.2112, <12> 2249.1781, <13> 100.116, <14> 208.0172, <15> 639.6903, <16> 425.8899, <17> 549.3258, <18> 0.0215, <19> 2261.1547, <20> 3.525;
param capacity[MACHINE] := <1> 1379.8487, <2> 1379.8487, <3> 1379.8487, <4> 1379.8487, <5> 1379.8487, <6> 1379.8487, <7> 1379.8487;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
