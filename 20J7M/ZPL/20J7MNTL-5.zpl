set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 30.6744, <2> 20.3208, <3> 24.5564, <4> 27.648, <5> 22.7457, <6> 27.1334, <7> 30.2266, <8> 24.6803, <9> 18.2342, <10> 28.4261, <11> 34.1973, <12> 22.7234, <13> 28.6575, <14> 25.7956, <15> 24.4681, <16> 31.4104, <17> 21.5213, <18> 21.4868, <19> 25.5259, <20> 34.966;
param workload[JOB] := <1> 30.6744, <2> 20.3208, <3> 24.5564, <4> 27.648, <5> 22.7457, <6> 27.1334, <7> 30.2266, <8> 24.6803, <9> 18.2342, <10> 28.4261, <11> 34.1973, <12> 22.7234, <13> 28.6575, <14> 25.7956, <15> 24.4681, <16> 31.4104, <17> 21.5213, <18> 21.4868, <19> 25.5259, <20> 34.966;
param capacity[MACHINE] := <1> 56.2927, <2> 56.2927, <3> 56.2927, <4> 56.2927, <5> 56.2927, <6> 56.2927, <7> 56.2927;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
