set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 28.3371, <2> 28.1108, <3> 28.9685, <4> 22.1695, <5> 33.9722, <6> 30.0619, <7> 24.3296, <8> 17.1488, <9> 26.6479, <10> 25.9325, <11> 16.8917, <12> 16.04, <13> 33.5929, <14> 31.15, <15> 20.4853, <16> 24.8784, <17> 17.8704, <18> 22.9171, <19> 10.9533, <20> 20.9228;
param workload[JOB] := <1> 28.3371, <2> 28.1108, <3> 28.9685, <4> 22.1695, <5> 33.9722, <6> 30.0619, <7> 24.3296, <8> 17.1488, <9> 26.6479, <10> 25.9325, <11> 16.8917, <12> 16.04, <13> 33.5929, <14> 31.15, <15> 20.4853, <16> 24.8784, <17> 17.8704, <18> 22.9171, <19> 10.9533, <20> 20.9228;
param capacity[MACHINE] := <1> 51.5765, <2> 51.5765, <3> 51.5765, <4> 51.5765, <5> 51.5765, <6> 51.5765, <7> 51.5765;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
