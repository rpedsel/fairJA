set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 32.3511, <2> 11.0533, <3> 2.3829, <4> 14.0463, <5> 37.5119, <6> 19.6373, <7> 22.9691, <8> 2.4643, <9> 36.2056, <10> 33.1854, <11> 15.6544, <12> 46.1183, <13> 25.2532, <14> 14.3056, <15> 18.4053, <16> 33.1671, <17> 36.4944, <18> 43.1598, <19> 40.0812, <20> 24.9107;
param workload[JOB] := <1> 1046.5937, <2> 122.1754, <3> 5.6782, <4> 197.2985, <5> 1407.1426, <6> 385.6236, <7> 527.5796, <8> 6.0728, <9> 1310.8455, <10> 1101.2708, <11> 245.0602, <12> 2126.8976, <13> 637.7241, <14> 204.6502, <15> 338.7551, <16> 1100.0565, <17> 1331.8412, <18> 1862.7683, <19> 1606.5026, <20> 620.543;
param capacity[MACHINE] := <1> 2312.1542, <2> 2312.1542, <3> 2312.1542, <4> 2312.1542, <5> 2312.1542, <6> 2312.1542, <7> 2312.1542;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
