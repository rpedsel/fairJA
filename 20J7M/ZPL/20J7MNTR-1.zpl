set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 26.3712, <2> 17.9631, <3> 32.3134, <4> 17.2748, <5> 25.8734, <6> 24.7767, <7> 26.3129, <8> 23.3844, <9> 19.0833, <10> 31.8013, <11> 27.6406, <12> 27.5969, <13> 22.8155, <14> 22.6558, <15> 26.8274, <16> 16.9982, <17> 25.5459, <18> 21.1913, <19> 34.9698, <20> 29.0318;
param workload[JOB] := <1> 4.4046, <2> 33.7776, <3> 43.6825, <4> 12.2107, <5> 48.0623, <6> 7.8984, <7> 0.7343, <8> 13.5414, <9> 13.9279, <10> 22.7395, <11> 0.2762, <12> 40.5853, <13> 41.3115, <14> 27.7278, <15> 22.7907, <16> 10.8535, <17> 24.3661, <18> 25.0725, <19> 43.0622, <20> 19.566;
param capacity[MACHINE] := <1> 48.9205, <2> 48.9205, <3> 48.9205, <4> 48.9205, <5> 48.9205, <6> 48.9205, <7> 48.9205;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
