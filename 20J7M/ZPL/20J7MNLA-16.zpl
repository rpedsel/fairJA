set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 11.6653, <2> 24.6236, <3> 26.3919, <4> 30.687, <5> 20.1887, <6> 21.5729, <7> 25.2508, <8> 27.9077, <9> 29.2888, <10> 16.7447, <11> 26.7396, <12> 27.97, <13> 39.3515, <14> 24.2159, <15> 26.3549, <16> 21.7206, <17> 17.6614, <18> 34.977, <19> 22.8293, <20> 25.2282;
param workload[JOB] := <1> 136.0792, <2> 606.3217, <3> 696.5324, <4> 941.692, <5> 407.5836, <6> 465.39, <7> 637.6029, <8> 778.8397, <9> 857.8338, <10> 280.385, <11> 715.0062, <12> 782.3209, <13> 1548.5406, <14> 586.4098, <15> 694.5808, <16> 471.7845, <17> 311.925, <18> 1223.3905, <19> 521.1769, <20> 636.4621;
param capacity[MACHINE] := <1> 1899.9797, <2> 1899.9797, <3> 1899.9797, <4> 1899.9797, <5> 1899.9797, <6> 1899.9797, <7> 1899.9797;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
