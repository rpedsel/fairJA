set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 47.337, <2> 34.6434, <3> 9.6444, <4> 16.1562, <5> 24.3319, <6> 13.3218, <7> 41.323, <8> 47.6967, <9> 42.1462, <10> 43.5066, <11> 6.6358, <12> 43.3027, <13> 17.5447, <14> 29.2078, <15> 2.8839, <16> 24.5607, <17> 25.8661, <18> 6.6202, <19> 14.3099, <20> 5.8403;
param workload[JOB] := <1> 47.337, <2> 34.6434, <3> 9.6444, <4> 16.1562, <5> 24.3319, <6> 13.3218, <7> 41.323, <8> 47.6967, <9> 42.1462, <10> 43.5066, <11> 6.6358, <12> 43.3027, <13> 17.5447, <14> 29.2078, <15> 2.8839, <16> 24.5607, <17> 25.8661, <18> 6.6202, <19> 14.3099, <20> 5.8403;
param capacity[MACHINE] := <1> 496.8793, <2> 496.8793, <3> 496.8793, <4> 496.8793, <5> 496.8793, <6> 496.8793, <7> 496.8793;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
