set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 26.1424, <2> 23.2651, <3> 22.8195, <4> 18.6574, <5> 20.1295, <6> 20.5638, <7> 18.3774, <8> 29.1574, <9> 25.0575, <10> 28.3109, <11> 22.1936, <12> 25.6497, <13> 35.4254, <14> 21.6034, <15> 31.1397, <16> 21.3063, <17> 23.654, <18> 22.1517, <19> 30.3117, <20> 21.2429;
param workload[JOB] := <1> 683.4251, <2> 541.2649, <3> 520.7296, <4> 348.0986, <5> 405.1968, <6> 422.8699, <7> 337.7288, <8> 850.154, <9> 627.8783, <10> 801.5071, <11> 492.5559, <12> 657.9071, <13> 1254.959, <14> 466.7069, <15> 969.6809, <16> 453.9584, <17> 559.5117, <18> 490.6978, <19> 918.7992, <20> 451.2608;
param capacity[MACHINE] := <1> 1313.024, <2> 1313.024, <3> 1313.024, <4> 1313.024, <5> 1313.024, <6> 1313.024, <7> 1313.024;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
