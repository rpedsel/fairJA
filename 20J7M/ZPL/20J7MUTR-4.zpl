set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 35.1611, <2> 17.5819, <3> 40.4678, <4> 1.4608, <5> 49.1561, <6> 22.6614, <7> 40.9439, <8> 23.0392, <9> 29.168, <10> 26.2375, <11> 7.1357, <12> 38.9987, <13> 49.9855, <14> 37.8647, <15> 42.6616, <16> 19.3978, <17> 17.2123, <18> 14.9862, <19> 11.0183, <20> 6.6373;
param workload[JOB] := <1> 48.3395, <2> 40.0058, <3> 11.8937, <4> 14.7668, <5> 15.9829, <6> 10.1193, <7> 29.7275, <8> 25.9476, <9> 45.5617, <10> 6.6388, <11> 21.7269, <12> 5.4373, <13> 43.0426, <14> 15.0074, <15> 26.5798, <16> 40.8237, <17> 29.8625, <18> 32.1084, <19> 27.2988, <20> 39.1462;
param capacity[MACHINE] := <1> 56.7875, <2> 56.7875, <3> 56.7875, <4> 56.7875, <5> 56.7875, <6> 56.7875, <7> 56.7875;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
