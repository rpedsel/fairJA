set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 30.595, <2> 16.9492, <3> 26.8101, <4> 27.8183, <5> 32.2098, <6> 25.0968, <7> 30.46, <8> 28.7572, <9> 37.3541, <10> 22.7678, <11> 31.6875, <12> 23.7369, <13> 24.8041, <14> 20.7381, <15> 16.0204, <16> 26.528, <17> 26.6985, <18> 29.6762, <19> 19.5156, <20> 26.3762;
param workload[JOB] := <1> 32.2862, <2> 11.5545, <3> 23.2313, <4> 46.6408, <5> 29.9275, <6> 35.1331, <7> 19.1323, <8> 40.0943, <9> 47.7008, <10> 37.8448, <11> 32.3237, <12> 26.645, <13> 14.0771, <14> 14.1233, <15> 46.05, <16> 6.0556, <17> 40.2065, <18> 21.6444, <19> 15.2604, <20> 42.2261;
param capacity[MACHINE] := <1> 582.1577, <2> 582.1577, <3> 582.1577, <4> 582.1577, <5> 582.1577, <6> 582.1577, <7> 582.1577;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
