set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 25.9529, <2> 27.9237, <3> 26.3881, <4> 23.4991, <5> 22.9993, <6> 20.8842, <7> 21.8545, <8> 27.3742, <9> 15.9299, <10> 25.0322, <11> 16.798, <12> 29.1747, <13> 34.0598, <14> 21.6808, <15> 30.5482, <16> 33.4358, <17> 21.3796, <18> 25.1424, <19> 29.8162, <20> 18.5917;
param workload[JOB] := <1> 28.804, <2> 39.4155, <3> 47.5184, <4> 12.7515, <5> 25.3559, <6> 47.5595, <7> 6.8467, <8> 37.184, <9> 27.8963, <10> 16.8502, <11> 3.649, <12> 28.4216, <13> 18.6994, <14> 19.3619, <15> 48.6411, <16> 4.7366, <17> 5.7076, <18> 11.4041, <19> 10.5807, <20> 38.3278;
param capacity[MACHINE] := <1> 51.3977, <2> 51.3977, <3> 51.3977, <4> 51.3977, <5> 51.3977, <6> 51.3977, <7> 51.3977;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
