set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 1.5318, <2> 33.5701, <3> 24.8349, <4> 25.1166, <5> 20.355, <6> 20.4767, <7> 42.0719, <8> 23.813, <9> 22.1818, <10> 2.3452, <11> 16.6576, <12> 4.3937, <13> 38.7953, <14> 15.9155, <15> 8.0879, <16> 31.1283, <17> 35.1982, <18> 17.992, <19> 3.2806, <20> 26.7166;
param workload[JOB] := <1> 2.3464, <2> 1126.9516, <3> 616.7723, <4> 630.8436, <5> 414.326, <6> 419.2952, <7> 1770.0448, <8> 567.059, <9> 492.0323, <10> 5.5, <11> 277.4756, <12> 19.3046, <13> 1505.0753, <14> 253.3031, <15> 65.4141, <16> 968.9711, <17> 1238.9133, <18> 323.7121, <19> 10.7623, <20> 713.7767;
param capacity[MACHINE] := <1> 1631.6971, <2> 1631.6971, <3> 1631.6971, <4> 1631.6971, <5> 1631.6971, <6> 1631.6971, <7> 1631.6971;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
