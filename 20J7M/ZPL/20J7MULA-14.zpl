set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 20.0393, <2> 44.3485, <3> 44.297, <4> 5.7026, <5> 36.314, <6> 20.4394, <7> 31.9879, <8> 14.9034, <9> 33.4847, <10> 12.9112, <11> 46.2917, <12> 33.1513, <13> 25.4775, <14> 16.4053, <15> 28.9413, <16> 48.2997, <17> 35.4681, <18> 19.2541, <19> 6.2968, <20> 3.7089;
param workload[JOB] := <1> 401.5735, <2> 1966.7895, <3> 1962.2242, <4> 32.5196, <5> 1318.7066, <6> 417.7691, <7> 1023.2257, <8> 222.1113, <9> 1121.2251, <10> 166.6991, <11> 2142.9215, <12> 1099.0087, <13> 649.103, <14> 269.1339, <15> 837.5988, <16> 2332.861, <17> 1257.9861, <18> 370.7204, <19> 39.6497, <20> 13.7559;
param capacity[MACHINE] := <1> 2520.7975, <2> 2520.7975, <3> 2520.7975, <4> 2520.7975, <5> 2520.7975, <6> 2520.7975, <7> 2520.7975;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
