set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 44.9009, <2> 22.6301, <3> 31.4906, <4> 11.7873, <5> 2.2575, <6> 24.5491, <7> 1.1154, <8> 34.0107, <9> 48.4194, <10> 41.4984, <11> 38.9607, <12> 38.2535, <13> 20.6742, <14> 24.5631, <15> 24.7132, <16> 18.2344, <17> 4.6321, <18> 11.6364, <19> 27.335, <20> 21.784;
param workload[JOB] := <1> 32.5817, <2> 22.3876, <3> 38.7447, <4> 36.0534, <5> 35.4194, <6> 44.3712, <7> 20.3188, <8> 47.1435, <9> 32.1365, <10> 47.6499, <11> 47.0107, <12> 16.2631, <13> 26.3531, <14> 17.0738, <15> 3.1137, <16> 46.7736, <17> 7.9893, <18> 12.2377, <19> 39.8831, <20> 36.5538;
param capacity[MACHINE] := <1> 610.0586, <2> 610.0586, <3> 610.0586, <4> 610.0586, <5> 610.0586, <6> 610.0586, <7> 610.0586;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
