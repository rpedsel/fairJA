set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 8.0904, <2> 46.4853, <3> 1.2592, <4> 34.5849, <5> 44.7345, <6> 21.8886, <7> 38.7016, <8> 11.4517, <9> 16.3514, <10> 39.2274, <11> 25.7447, <12> 32.744, <13> 22.9848, <14> 18.5489, <15> 20.2713, <16> 48.0665, <17> 43.4568, <18> 19.2541, <19> 33.9387, <20> 18.9724;
param workload[JOB] := <1> 65.4546, <2> 2160.8831, <3> 1.5856, <4> 1196.1153, <5> 2001.1755, <6> 479.1108, <7> 1497.8138, <8> 131.1414, <9> 267.3683, <10> 1538.7889, <11> 662.7896, <12> 1072.1695, <13> 528.301, <14> 344.0617, <15> 410.9256, <16> 2310.3884, <17> 1888.4935, <18> 370.7204, <19> 1151.8354, <20> 359.952;
param capacity[MACHINE] := <1> 2634.1535, <2> 2634.1535, <3> 2634.1535, <4> 2634.1535, <5> 2634.1535, <6> 2634.1535, <7> 2634.1535;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
