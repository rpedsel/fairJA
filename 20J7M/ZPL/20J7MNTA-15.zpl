set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 31.5249, <2> 29.7586, <3> 21.4012, <4> 27.0422, <5> 30.7453, <6> 25.014, <7> 30.2761, <8> 28.0571, <9> 25.4, <10> 24.2652, <11> 38.2598, <12> 28.2345, <13> 21.2913, <14> 24.8425, <15> 22.881, <16> 23.261, <17> 32.4527, <18> 21.5693, <19> 20.8718, <20> 24.7681;
param workload[JOB] := <1> 993.8193, <2> 885.5743, <3> 458.0114, <4> 731.2806, <5> 945.2735, <6> 625.7002, <7> 916.6422, <8> 787.2009, <9> 645.16, <10> 588.7999, <11> 1463.8123, <12> 797.187, <13> 453.3195, <14> 617.1498, <15> 523.5402, <16> 541.0741, <17> 1053.1777, <18> 465.2347, <19> 435.632, <20> 613.4588;
param capacity[MACHINE] := <1> 1557.9695, <2> 1557.9695, <3> 1557.9695, <4> 1557.9695, <5> 1557.9695, <6> 1557.9695, <7> 1557.9695;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
