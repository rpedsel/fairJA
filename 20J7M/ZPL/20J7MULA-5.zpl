set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 34.3181, <2> 8.8171, <3> 38.7393, <4> 44.7793, <5> 31.723, <6> 46.9708, <7> 46.6809, <8> 28.0333, <9> 7.9435, <10> 6.7753, <11> 22.8362, <12> 26.2379, <13> 26.9469, <14> 2.0717, <15> 45.8348, <16> 20.5827, <17> 28.3615, <18> 23.433, <19> 24.7296, <20> 26.4499;
param workload[JOB] := <1> 1177.732, <2> 77.7413, <3> 1500.7334, <4> 2005.1857, <5> 1006.3487, <6> 2206.2561, <7> 2179.1064, <8> 785.8659, <9> 63.0992, <10> 45.9047, <11> 521.492, <12> 688.4274, <13> 726.1354, <14> 4.2919, <15> 2100.8289, <16> 423.6475, <17> 804.3747, <18> 549.1055, <19> 611.5531, <20> 699.5972;
param capacity[MACHINE] := <1> 2596.7753, <2> 2596.7753, <3> 2596.7753, <4> 2596.7753, <5> 2596.7753, <6> 2596.7753, <7> 2596.7753;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
