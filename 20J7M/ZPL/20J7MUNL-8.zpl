set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 43.2357, <2> 11.3183, <3> 25.6037, <4> 16.2511, <5> 18.6659, <6> 19.4421, <7> 37.8711, <8> 15.1746, <9> 9.2302, <10> 16.48, <11> 27.8923, <12> 30.0441, <13> 39.3158, <14> 1.6784, <15> 12.914, <16> 22.214, <17> 43.043, <18> 18.7958, <19> 41.5009, <20> 15.3805;
param workload[JOB] := <1> 43.2357, <2> 11.3183, <3> 25.6037, <4> 16.2511, <5> 18.6659, <6> 19.4421, <7> 37.8711, <8> 15.1746, <9> 9.2302, <10> 16.48, <11> 27.8923, <12> 30.0441, <13> 39.3158, <14> 1.6784, <15> 12.914, <16> 22.214, <17> 43.043, <18> 18.7958, <19> 41.5009, <20> 15.3805;
param capacity[MACHINE] := <1> 466.0515, <2> 466.0515, <3> 466.0515, <4> 466.0515, <5> 466.0515, <6> 466.0515, <7> 466.0515;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
