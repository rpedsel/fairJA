set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 9.6113, <2> 31.5601, <3> 17.4826, <4> 45.692, <5> 48.2392, <6> 13.8811, <7> 22.8429, <8> 42.6387, <9> 10.905, <10> 38.0769, <11> 0.4932, <12> 25.9093, <13> 31.5549, <14> 34.8247, <15> 44.2455, <16> 36.206, <17> 3.4407, <18> 1.4198, <19> 1.8557, <20> 47.0592;
param workload[JOB] := <1> 92.3771, <2> 996.0399, <3> 305.6413, <4> 2087.7589, <5> 2327.0204, <6> 192.6849, <7> 521.7981, <8> 1818.0587, <9> 118.919, <10> 1449.8503, <11> 0.2432, <12> 671.2918, <13> 995.7117, <14> 1212.7597, <15> 1957.6643, <16> 1310.8744, <17> 11.8384, <18> 2.0158, <19> 3.4436, <20> 2214.5683;
param capacity[MACHINE] := <1> 18290.5598, <2> 18290.5598, <3> 18290.5598, <4> 18290.5598, <5> 18290.5598, <6> 18290.5598, <7> 18290.5598;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
