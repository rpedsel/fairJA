set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 16.7462, <2> 2.8886, <3> 46.3473, <4> 19.0689, <5> 25.3331, <6> 11.6165, <7> 23.5511, <8> 1.9412, <9> 8.8232, <10> 48.5861, <11> 2.9409, <12> 2.4683, <13> 25.2661, <14> 27.3223, <15> 21.3663, <16> 2.9199, <17> 46.3643, <18> 9.3907, <19> 17.0352, <20> 49.3679;
param workload[JOB] := <1> 280.4352, <2> 8.344, <3> 2148.0722, <4> 363.6229, <5> 641.766, <6> 134.9431, <7> 554.6543, <8> 3.7683, <9> 77.8489, <10> 2360.6091, <11> 8.6489, <12> 6.0925, <13> 638.3758, <14> 746.5081, <15> 456.5188, <16> 8.5258, <17> 2149.6483, <18> 88.1852, <19> 290.198, <20> 2437.1896;
param capacity[MACHINE] := <1> 13403.955, <2> 13403.955, <3> 13403.955, <4> 13403.955, <5> 13403.955, <6> 13403.955, <7> 13403.955;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
