set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 26.8543, <2> 34.9618, <3> 22.7895, <4> 23.3515, <5> 24.2845, <6> 24.432, <7> 23.4532, <8> 25.2546, <9> 21.8593, <10> 30.7062, <11> 17.4806, <12> 25.8575, <13> 17.888, <14> 19.1111, <15> 33.1421, <16> 21.2032, <17> 25.571, <18> 24.0722, <19> 30.3062, <20> 23.3326;
param workload[JOB] := <1> 721.1534, <2> 1222.3275, <3> 519.3613, <4> 545.2926, <5> 589.7369, <6> 596.9226, <7> 550.0526, <8> 637.7948, <9> 477.829, <10> 942.8707, <11> 305.5714, <12> 668.6103, <13> 319.9805, <14> 365.2341, <15> 1098.3988, <16> 449.5757, <17> 653.876, <18> 579.4708, <19> 918.4658, <20> 544.4102;
param capacity[MACHINE] := <1> 1815.2764, <2> 1815.2764, <3> 1815.2764, <4> 1815.2764, <5> 1815.2764, <6> 1815.2764, <7> 1815.2764;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
