set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 25.3677, <2> 32.3318, <3> 26.5809, <4> 26.9695, <5> 24.2877, <6> 20.2442, <7> 16.099, <8> 23.9848, <9> 31.8895, <10> 27.3722, <11> 27.3094, <12> 25.1452, <13> 39.0286, <14> 30.3408, <15> 19.7649, <16> 27.1121, <17> 22.8961, <18> 15.8403, <19> 22.2795, <20> 24.9958;
param workload[JOB] := <1> 643.5202, <2> 1045.3453, <3> 706.5442, <4> 727.3539, <5> 589.8924, <6> 409.8276, <7> 259.1778, <8> 575.2706, <9> 1016.9402, <10> 749.2373, <11> 745.8033, <12> 632.2811, <13> 1523.2316, <14> 920.5641, <15> 390.6513, <16> 735.066, <17> 524.2314, <18> 250.9151, <19> 496.3761, <20> 624.79;
param capacity[MACHINE] := <1> 1938.1456, <2> 1938.1456, <3> 1938.1456, <4> 1938.1456, <5> 1938.1456, <6> 1938.1456, <7> 1938.1456;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
