set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 47.1682, <2> 19.2031, <3> 49.5264, <4> 4.534, <5> 47.5344, <6> 39.4293, <7> 33.812, <8> 18.5652, <9> 2.202, <10> 4.3183, <11> 46.6256, <12> 13.7107, <13> 6.5336, <14> 25.6403, <15> 20.7706, <16> 44.6395, <17> 1.1425, <18> 19.9616, <19> 13.438, <20> 32.5484;
param workload[JOB] := <1> 6.7624, <2> 11.3651, <3> 37.0262, <4> 29.5182, <5> 27.9979, <6> 40.7589, <7> 32.5878, <8> 36.4898, <9> 25.258, <10> 8.7146, <11> 13.9488, <12> 44.4339, <13> 45.1896, <14> 13.0473, <15> 3.789, <16> 35.1408, <17> 18.7658, <18> 17.5508, <19> 12.9927, <20> 30.6305;
param capacity[MACHINE] := <1> 491.9681, <2> 491.9681, <3> 491.9681, <4> 491.9681, <5> 491.9681, <6> 491.9681, <7> 491.9681;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
