set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 31.7653, <2> 25.7015, <3> 24.6623, <4> 19.9434, <5> 7.7355, <6> 16.0234, <7> 27.9956, <8> 27.3479, <9> 20.2039, <10> 24.6447, <11> 29.7645, <12> 19.3113, <13> 15.2275, <14> 33.0441, <15> 31.3428, <16> 26.9404, <17> 16.2308, <18> 17.2034, <19> 28.2426, <20> 31.63;
param workload[JOB] := <1> 31.7653, <2> 25.7015, <3> 24.6623, <4> 19.9434, <5> 7.7355, <6> 16.0234, <7> 27.9956, <8> 27.3479, <9> 20.2039, <10> 24.6447, <11> 29.7645, <12> 19.3113, <13> 15.2275, <14> 33.0441, <15> 31.3428, <16> 26.9404, <17> 16.2308, <18> 17.2034, <19> 28.2426, <20> 31.63;
param capacity[MACHINE] := <1> 50.8887, <2> 50.8887, <3> 50.8887, <4> 50.8887, <5> 50.8887, <6> 50.8887, <7> 50.8887;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
