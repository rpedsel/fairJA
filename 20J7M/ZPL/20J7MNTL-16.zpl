set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 22.5911, <2> 28.9538, <3> 28.2786, <4> 23.8792, <5> 23.6959, <6> 27.255, <7> 27.7552, <8> 29.925, <9> 23.6764, <10> 25.2882, <11> 20.1606, <12> 26.6671, <13> 21.5551, <14> 19.7314, <15> 31.9183, <16> 27.6309, <17> 32.269, <18> 34.5511, <19> 25.5889, <20> 31.7412;
param workload[JOB] := <1> 22.5911, <2> 28.9538, <3> 28.2786, <4> 23.8792, <5> 23.6959, <6> 27.255, <7> 27.7552, <8> 29.925, <9> 23.6764, <10> 25.2882, <11> 20.1606, <12> 26.6671, <13> 21.5551, <14> 19.7314, <15> 31.9183, <16> 27.6309, <17> 32.269, <18> 34.5511, <19> 25.5889, <20> 31.7412;
param capacity[MACHINE] := <1> 57.1192, <2> 57.1192, <3> 57.1192, <4> 57.1192, <5> 57.1192, <6> 57.1192, <7> 57.1192;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
