set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 18.6445, <2> 19.4514, <3> 20.4786, <4> 35.545, <5> 24.9954, <6> 25.1023, <7> 30.7332, <8> 26.5982, <9> 30.9139, <10> 16.0929, <11> 25.2043, <12> 26.7776, <13> 15.9834, <14> 30.0821, <15> 15.6336, <16> 24.962, <17> 20.4378, <18> 24.6552, <19> 21.8946, <20> 23.9577;
param workload[JOB] := <1> 347.6174, <2> 378.357, <3> 419.3731, <4> 1263.447, <5> 624.77, <6> 630.1255, <7> 944.5296, <8> 707.4642, <9> 955.6692, <10> 258.9814, <11> 635.2567, <12> 717.0399, <13> 255.4691, <14> 904.9327, <15> 244.4094, <16> 623.1014, <17> 417.7037, <18> 607.8789, <19> 479.3735, <20> 573.9714;
param capacity[MACHINE] := <1> 1284.5862, <2> 1284.5862, <3> 1284.5862, <4> 1284.5862, <5> 1284.5862, <6> 1284.5862, <7> 1284.5862;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
