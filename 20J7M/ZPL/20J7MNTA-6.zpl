set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 28.5726, <2> 25.4553, <3> 26.6422, <4> 26.2272, <5> 20.4308, <6> 33.8774, <7> 23.8953, <8> 23.7601, <9> 29.1303, <10> 20.2057, <11> 25.3778, <12> 19.2602, <13> 23.5782, <14> 26.6027, <15> 26.7656, <16> 23.7575, <17> 26.102, <18> 25.2671, <19> 25.2869, <20> 29.563;
param workload[JOB] := <1> 816.3935, <2> 647.9723, <3> 709.8068, <4> 687.866, <5> 417.4176, <6> 1147.6782, <7> 570.9854, <8> 564.5424, <9> 848.5744, <10> 408.2703, <11> 644.0327, <12> 370.9553, <13> 555.9315, <14> 707.7036, <15> 716.3973, <16> 564.4188, <17> 681.3144, <18> 638.4263, <19> 639.4273, <20> 873.971;
param capacity[MACHINE] := <1> 1415.5805, <2> 1415.5805, <3> 1415.5805, <4> 1415.5805, <5> 1415.5805, <6> 1415.5805, <7> 1415.5805;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
