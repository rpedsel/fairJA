set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 14.1091, <2> 4.1366, <3> 29.1999, <4> 38.7481, <5> 41.6744, <6> 19.7585, <7> 3.9104, <8> 44.2339, <9> 14.8916, <10> 25.5489, <11> 40.1657, <12> 46.9971, <13> 22.514, <14> 38.0562, <15> 48.242, <16> 37.1741, <17> 37.593, <18> 44.1442, <19> 24.345, <20> 9.3219;
param workload[JOB] := <1> 199.0667, <2> 17.1115, <3> 852.6342, <4> 1501.4153, <5> 1736.7556, <6> 390.3983, <7> 15.2912, <8> 1956.6379, <9> 221.7598, <10> 652.7463, <11> 1613.2835, <12> 2208.7274, <13> 506.8802, <14> 1448.2744, <15> 2327.2906, <16> 1381.9137, <17> 1413.2336, <18> 1948.7104, <19> 592.679, <20> 86.8978;
param capacity[MACHINE] := <1> 3010.2439, <2> 3010.2439, <3> 3010.2439, <4> 3010.2439, <5> 3010.2439, <6> 3010.2439, <7> 3010.2439;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
