set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 24.5465, <2> 27.67, <3> 27.0051, <4> 29.9857, <5> 18.2267, <6> 33.4394, <7> 24.2342, <8> 24.2564, <9> 19.7927, <10> 26.2577, <11> 17.8927, <12> 24.9422, <13> 19.793, <14> 23.3068, <15> 26.2369, <16> 24.8801, <17> 20.0774, <18> 25.9261, <19> 25.3163, <20> 24.6382;
param workload[JOB] := <1> 24.5465, <2> 27.67, <3> 27.0051, <4> 29.9857, <5> 18.2267, <6> 33.4394, <7> 24.2342, <8> 24.2564, <9> 19.7927, <10> 26.2577, <11> 17.8927, <12> 24.9422, <13> 19.793, <14> 23.3068, <15> 26.2369, <16> 24.8801, <17> 20.0774, <18> 25.9261, <19> 25.3163, <20> 24.6382;
param capacity[MACHINE] := <1> 69.7749, <2> 69.7749, <3> 69.7749, <4> 69.7749, <5> 69.7749, <6> 69.7749, <7> 69.7749;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
