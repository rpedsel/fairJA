set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 26.4544, <2> 31.3472, <3> 22.0112, <4> 21.0694, <5> 20.7578, <6> 30.4371, <7> 15.9335, <8> 12.252, <9> 27.1983, <10> 22.0339, <11> 28.8388, <12> 21.1733, <13> 28.2519, <14> 29.2757, <15> 22.2046, <16> 18.8027, <17> 28.6279, <18> 34.2426, <19> 27.4584, <20> 29.6758;
param workload[JOB] := <1> 26.4544, <2> 31.3472, <3> 22.0112, <4> 21.0694, <5> 20.7578, <6> 30.4371, <7> 15.9335, <8> 12.252, <9> 27.1983, <10> 22.0339, <11> 28.8388, <12> 21.1733, <13> 28.2519, <14> 29.2757, <15> 22.2046, <16> 18.8027, <17> 28.6279, <18> 34.2426, <19> 27.4584, <20> 29.6758;
param capacity[MACHINE] := <1> 71.1495, <2> 71.1495, <3> 71.1495, <4> 71.1495, <5> 71.1495, <6> 71.1495, <7> 71.1495;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
