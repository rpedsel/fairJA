set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 14.5516, <2> 22.4565, <3> 29.9072, <4> 23.3322, <5> 27.8158, <6> 26.0564, <7> 21.7014, <8> 30.0745, <9> 27.1622, <10> 32.3568, <11> 13.1884, <12> 24.0012, <13> 21.925, <14> 21.5583, <15> 23.5829, <16> 18.7292, <17> 25.7467, <18> 23.3387, <19> 21.5744, <20> 25.6708;
param workload[JOB] := <1> 14.5516, <2> 22.4565, <3> 29.9072, <4> 23.3322, <5> 27.8158, <6> 26.0564, <7> 21.7014, <8> 30.0745, <9> 27.1622, <10> 32.3568, <11> 13.1884, <12> 24.0012, <13> 21.925, <14> 21.5583, <15> 23.5829, <16> 18.7292, <17> 25.7467, <18> 23.3387, <19> 21.5744, <20> 25.6708;
param capacity[MACHINE] := <1> 50.864, <2> 50.864, <3> 50.864, <4> 50.864, <5> 50.864, <6> 50.864, <7> 50.864;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
