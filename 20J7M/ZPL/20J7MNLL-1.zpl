set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 24.6235, <2> 23.7433, <3> 27.6539, <4> 19.769, <5> 31.0476, <6> 30.5148, <7> 31.5828, <8> 33.9174, <9> 23.332, <10> 18.3854, <11> 22.1342, <12> 23.5235, <13> 36.6236, <14> 24.1334, <15> 34.6544, <16> 26.9855, <17> 30.8258, <18> 20.7313, <19> 27.4068, <20> 24.8754;
param workload[JOB] := <1> 24.6235, <2> 23.7433, <3> 27.6539, <4> 19.769, <5> 31.0476, <6> 30.5148, <7> 31.5828, <8> 33.9174, <9> 23.332, <10> 18.3854, <11> 22.1342, <12> 23.5235, <13> 36.6236, <14> 24.1334, <15> 34.6544, <16> 26.9855, <17> 30.8258, <18> 20.7313, <19> 27.4068, <20> 24.8754;
param capacity[MACHINE] := <1> 76.6377, <2> 76.6377, <3> 76.6377, <4> 76.6377, <5> 76.6377, <6> 76.6377, <7> 76.6377;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
