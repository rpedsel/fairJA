set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 28.7537, <2> 21.6679, <3> 19.8886, <4> 21.6827, <5> 29.9179, <6> 29.7172, <7> 25.368, <8> 23.1061, <9> 20.4292, <10> 20.5471, <11> 24.3211, <12> 33.3767, <13> 30.259, <14> 24.8495, <15> 31.5932, <16> 16.2865, <17> 32.1723, <18> 27.9841, <19> 26.7176, <20> 18.2779;
param workload[JOB] := <1> 28.7537, <2> 21.6679, <3> 19.8886, <4> 21.6827, <5> 29.9179, <6> 29.7172, <7> 25.368, <8> 23.1061, <9> 20.4292, <10> 20.5471, <11> 24.3211, <12> 33.3767, <13> 30.259, <14> 24.8495, <15> 31.5932, <16> 16.2865, <17> 32.1723, <18> 27.9841, <19> 26.7176, <20> 18.2779;
param capacity[MACHINE] := <1> 72.4166, <2> 72.4166, <3> 72.4166, <4> 72.4166, <5> 72.4166, <6> 72.4166, <7> 72.4166;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
