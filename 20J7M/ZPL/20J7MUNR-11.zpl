set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 18.7381, <2> 24.6851, <3> 22.7993, <4> 9.6234, <5> 13.1688, <6> 14.9489, <7> 5.0965, <8> 42.7257, <9> 29.2751, <10> 22.4131, <11> 26.5317, <12> 28.3088, <13> 43.1797, <14> 32.3405, <15> 24.4881, <16> 20.4075, <17> 20.3254, <18> 20.2608, <19> 44.7323, <20> 37.5368;
param workload[JOB] := <1> 20.0614, <2> 41.9533, <3> 2.0212, <4> 42.7471, <5> 35.2039, <6> 31.3218, <7> 7.6827, <8> 4.129, <9> 35.3002, <10> 15.4882, <11> 36.6979, <12> 27.6774, <13> 2.849, <14> 35.0779, <15> 18.2066, <16> 30.8584, <17> 3.3257, <18> 33.3371, <19> 22.021, <20> 33.9618;
param capacity[MACHINE] := <1> 479.9216, <2> 479.9216, <3> 479.9216, <4> 479.9216, <5> 479.9216, <6> 479.9216, <7> 479.9216;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
