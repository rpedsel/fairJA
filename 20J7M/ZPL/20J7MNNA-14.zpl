set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 19.1559, <2> 21.4723, <3> 24.9848, <4> 28.8083, <5> 22.4909, <6> 28.1038, <7> 25.1372, <8> 28.5278, <9> 32.0264, <10> 19.1416, <11> 26.4816, <12> 24.8326, <13> 24.0445, <14> 18.9562, <15> 27.514, <16> 16.3395, <17> 8.7064, <18> 20.3869, <19> 22.124, <20> 28.6606;
param workload[JOB] := <1> 366.9485, <2> 461.0597, <3> 624.2402, <4> 829.9181, <5> 505.8406, <6> 789.8236, <7> 631.8788, <8> 813.8354, <9> 1025.6903, <10> 366.4009, <11> 701.2751, <12> 616.658, <13> 578.138, <14> 359.3375, <15> 757.0202, <16> 266.9793, <17> 75.8014, <18> 415.6257, <19> 489.4714, <20> 821.43;
param capacity[MACHINE] := <1> 11497.3727, <2> 11497.3727, <3> 11497.3727, <4> 11497.3727, <5> 11497.3727, <6> 11497.3727, <7> 11497.3727;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
