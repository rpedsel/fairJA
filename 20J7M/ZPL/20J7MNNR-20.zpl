set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 23.0619, <2> 28.2946, <3> 20.9803, <4> 18.6677, <5> 30.1947, <6> 24.4563, <7> 31.5842, <8> 21.6969, <9> 26.302, <10> 27.4914, <11> 34.1402, <12> 18.3041, <13> 29.4636, <14> 28.9566, <15> 22.5247, <16> 22.7401, <17> 36.0076, <18> 19.2707, <19> 23.1151, <20> 17.5068;
param workload[JOB] := <1> 5.1106, <2> 44.792, <3> 0.4009, <4> 27.8961, <5> 22.9241, <6> 39.7057, <7> 9.378, <8> 37.5026, <9> 31.1498, <10> 13.7213, <11> 28.982, <12> 12.067, <13> 49.251, <14> 0.7771, <15> 5.6509, <16> 12.8174, <17> 4.014, <18> 14.7625, <19> 10.215, <20> 25.5243;
param capacity[MACHINE] := <1> 396.6423, <2> 396.6423, <3> 396.6423, <4> 396.6423, <5> 396.6423, <6> 396.6423, <7> 396.6423;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
