set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 34.457, <2> 30.1349, <3> 34.8925, <4> 23.1373, <5> 26.8589, <6> 21.1805, <7> 22.834, <8> 16.0639, <9> 26.8175, <10> 28.8811, <11> 23.2119, <12> 17.9046, <13> 27.9026, <14> 18.5927, <15> 24.7013, <16> 24.3078, <17> 17.7042, <18> 24.4873, <19> 23.5627, <20> 21.5576;
param workload[JOB] := <1> 40.4166, <2> 20.8829, <3> 46.2359, <4> 21.0954, <5> 5.7631, <6> 19.7011, <7> 16.0885, <8> 27.5598, <9> 46.7246, <10> 8.9987, <11> 20.0391, <12> 22.6192, <13> 20.3417, <14> 41.0168, <15> 22.3078, <16> 48.8863, <17> 22.0361, <18> 31.3023, <19> 7.1951, <20> 45.5047;
param capacity[MACHINE] := <1> 534.7157, <2> 534.7157, <3> 534.7157, <4> 534.7157, <5> 534.7157, <6> 534.7157, <7> 534.7157;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
