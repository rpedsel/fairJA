set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 43.5483, <2> 45.6577, <3> 5.845, <4> 13.4543, <5> 49.9358, <6> 47.0279, <7> 2.8277, <8> 49.5507, <9> 2.1458, <10> 10.5663, <11> 32.9031, <12> 1.8513, <13> 16.5685, <14> 1.3989, <15> 30.8607, <16> 31.8473, <17> 48.0788, <18> 47.2935, <19> 34.4402, <20> 34.5129;
param workload[JOB] := <1> 17.0031, <2> 20.9737, <3> 30.9988, <4> 27.8891, <5> 9.0, <6> 28.8614, <7> 26.5118, <8> 20.3435, <9> 3.0015, <10> 19.4931, <11> 43.5575, <12> 11.506, <13> 15.6081, <14> 4.37, <15> 43.2354, <16> 16.5748, <17> 22.3413, <18> 1.5027, <19> 37.8074, <20> 35.3686;
param capacity[MACHINE] := <1> 435.9478, <2> 435.9478, <3> 435.9478, <4> 435.9478, <5> 435.9478, <6> 435.9478, <7> 435.9478;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
