set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 20.1174, <2> 29.8896, <3> 30.6703, <4> 24.0029, <5> 24.1775, <6> 22.2886, <7> 24.9278, <8> 15.7817, <9> 27.5742, <10> 31.6805, <11> 20.4512, <12> 32.2413, <13> 20.2973, <14> 28.533, <15> 31.7902, <16> 20.667, <17> 21.6647, <18> 21.6045, <19> 27.2493, <20> 19.8067;
param workload[JOB] := <1> 37.1101, <2> 22.0947, <3> 4.8558, <4> 34.9601, <5> 13.4373, <6> 36.4045, <7> 6.3889, <8> 19.2227, <9> 12.736, <10> 41.3779, <11> 7.3221, <12> 27.092, <13> 12.6708, <14> 23.3767, <15> 15.3282, <16> 26.2084, <17> 47.9487, <18> 34.1928, <19> 12.731, <20> 12.4262;
param capacity[MACHINE] := <1> 47.9877, <2> 47.9877, <3> 47.9877, <4> 47.9877, <5> 47.9877, <6> 47.9877, <7> 47.9877;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
