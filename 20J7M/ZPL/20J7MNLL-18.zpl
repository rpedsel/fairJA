set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 26.7768, <2> 17.2039, <3> 29.5719, <4> 34.1907, <5> 26.6133, <6> 29.3992, <7> 30.0885, <8> 24.8513, <9> 27.7343, <10> 13.7095, <11> 27.6762, <12> 31.324, <13> 25.2538, <14> 20.7353, <15> 26.7475, <16> 30.1258, <17> 28.0779, <18> 15.7984, <19> 21.4404, <20> 22.777;
param workload[JOB] := <1> 26.7768, <2> 17.2039, <3> 29.5719, <4> 34.1907, <5> 26.6133, <6> 29.3992, <7> 30.0885, <8> 24.8513, <9> 27.7343, <10> 13.7095, <11> 27.6762, <12> 31.324, <13> 25.2538, <14> 20.7353, <15> 26.7475, <16> 30.1258, <17> 28.0779, <18> 15.7984, <19> 21.4404, <20> 22.777;
param capacity[MACHINE] := <1> 72.8708, <2> 72.8708, <3> 72.8708, <4> 72.8708, <5> 72.8708, <6> 72.8708, <7> 72.8708;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
