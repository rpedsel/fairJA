set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 25.5818, <2> 28.3595, <3> 24.2424, <4> 22.616, <5> 25.4775, <6> 21.8322, <7> 25.4328, <8> 25.6931, <9> 23.6887, <10> 20.0727, <11> 31.7003, <12> 15.7743, <13> 23.9519, <14> 31.2551, <15> 30.8359, <16> 23.2023, <17> 18.7589, <18> 26.4364, <19> 20.8814, <20> 22.9938;
param workload[JOB] := <1> 25.5818, <2> 28.3595, <3> 24.2424, <4> 22.616, <5> 25.4775, <6> 21.8322, <7> 25.4328, <8> 25.6931, <9> 23.6887, <10> 20.0727, <11> 31.7003, <12> 15.7743, <13> 23.9519, <14> 31.2551, <15> 30.8359, <16> 23.2023, <17> 18.7589, <18> 26.4364, <19> 20.8814, <20> 22.9938;
param capacity[MACHINE] := <1> 488.787, <2> 488.787, <3> 488.787, <4> 488.787, <5> 488.787, <6> 488.787, <7> 488.787;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
