set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 0.2173, <2> 18.9612, <3> 44.5878, <4> 39.7641, <5> 24.6938, <6> 46.4229, <7> 3.3817, <8> 31.9931, <9> 6.6207, <10> 4.2909, <11> 22.8044, <12> 4.1643, <13> 33.5725, <14> 41.9737, <15> 30.5784, <16> 41.5504, <17> 3.08, <18> 47.5223, <19> 34.2735, <20> 26.0641;
param workload[JOB] := <1> 0.2173, <2> 18.9612, <3> 44.5878, <4> 39.7641, <5> 24.6938, <6> 46.4229, <7> 3.3817, <8> 31.9931, <9> 6.6207, <10> 4.2909, <11> 22.8044, <12> 4.1643, <13> 33.5725, <14> 41.9737, <15> 30.5784, <16> 41.5504, <17> 3.08, <18> 47.5223, <19> 34.2735, <20> 26.0641;
param capacity[MACHINE] := <1> 506.5171, <2> 506.5171, <3> 506.5171, <4> 506.5171, <5> 506.5171, <6> 506.5171, <7> 506.5171;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
