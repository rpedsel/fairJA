set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 0.2841, <2> 21.6712, <3> 22.7763, <4> 20.1184, <5> 15.7937, <6> 42.8545, <7> 45.7818, <8> 3.6805, <9> 4.4775, <10> 14.3667, <11> 30.2828, <12> 34.2674, <13> 24.845, <14> 17.12, <15> 32.8577, <16> 9.7344, <17> 44.6144, <18> 28.8929, <19> 10.4454, <20> 37.2028;
param workload[JOB] := <1> 0.2841, <2> 21.6712, <3> 22.7763, <4> 20.1184, <5> 15.7937, <6> 42.8545, <7> 45.7818, <8> 3.6805, <9> 4.4775, <10> 14.3667, <11> 30.2828, <12> 34.2674, <13> 24.845, <14> 17.12, <15> 32.8577, <16> 9.7344, <17> 44.6144, <18> 28.8929, <19> 10.4454, <20> 37.2028;
param capacity[MACHINE] := <1> 462.0675, <2> 462.0675, <3> 462.0675, <4> 462.0675, <5> 462.0675, <6> 462.0675, <7> 462.0675;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
