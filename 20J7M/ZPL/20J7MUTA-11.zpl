set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 49.289, <2> 16.5336, <3> 1.0879, <4> 38.854, <5> 26.0836, <6> 43.2555, <7> 26.7467, <8> 22.6646, <9> 0.9833, <10> 17.2458, <11> 29.9316, <12> 37.2078, <13> 12.1124, <14> 28.58, <15> 30.739, <16> 8.2487, <17> 24.8579, <18> 18.0482, <19> 9.2685, <20> 24.603;
param workload[JOB] := <1> 2429.4055, <2> 273.3599, <3> 1.1835, <4> 1509.6333, <5> 680.3542, <6> 1871.0383, <7> 715.386, <8> 513.6841, <9> 0.9669, <10> 297.4176, <11> 895.9007, <12> 1384.4204, <13> 146.7102, <14> 816.8164, <15> 944.8861, <16> 68.0411, <17> 617.9152, <18> 325.7375, <19> 85.9051, <20> 605.3076;
param capacity[MACHINE] := <1> 2562.3934, <2> 2562.3934, <3> 2562.3934, <4> 2562.3934, <5> 2562.3934, <6> 2562.3934, <7> 2562.3934;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
