set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 26.6661, <2> 23.4066, <3> 32.5409, <4> 28.0399, <5> 21.3572, <6> 19.0462, <7> 28.0846, <8> 18.5595, <9> 19.2098, <10> 30.1875, <11> 28.1213, <12> 29.2161, <13> 19.1336, <14> 29.9084, <15> 15.7118, <16> 25.9338, <17> 22.0282, <18> 22.6591, <19> 16.9177, <20> 20.2976;
param workload[JOB] := <1> 711.0809, <2> 547.8689, <3> 1058.9102, <4> 786.236, <5> 456.13, <6> 362.7577, <7> 788.7448, <8> 344.455, <9> 369.0164, <10> 911.2852, <11> 790.8075, <12> 853.5805, <13> 366.0946, <14> 894.5124, <15> 246.8607, <16> 672.562, <17> 485.2416, <18> 513.4348, <19> 286.2086, <20> 411.9926;
param capacity[MACHINE] := <1> 1693.9686, <2> 1693.9686, <3> 1693.9686, <4> 1693.9686, <5> 1693.9686, <6> 1693.9686, <7> 1693.9686;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
