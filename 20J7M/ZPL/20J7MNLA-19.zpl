set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 19.1577, <2> 23.7057, <3> 32.6465, <4> 34.2051, <5> 26.8683, <6> 24.0707, <7> 23.8698, <8> 20.5541, <9> 18.9249, <10> 29.1909, <11> 32.9699, <12> 27.2671, <13> 25.0869, <14> 33.9687, <15> 18.9535, <16> 28.3618, <17> 24.795, <18> 18.85, <19> 28.1723, <20> 23.3351;
param workload[JOB] := <1> 367.0175, <2> 561.9602, <3> 1065.794, <4> 1169.9889, <5> 721.9055, <6> 579.3986, <7> 569.7674, <8> 422.471, <9> 358.1518, <10> 852.1086, <11> 1087.0143, <12> 743.4947, <13> 629.3526, <14> 1153.8726, <15> 359.2352, <16> 804.3917, <17> 614.792, <18> 355.3225, <19> 793.6785, <20> 544.5269;
param capacity[MACHINE] := <1> 1964.8921, <2> 1964.8921, <3> 1964.8921, <4> 1964.8921, <5> 1964.8921, <6> 1964.8921, <7> 1964.8921;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
