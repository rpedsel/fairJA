set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 21.1153, <2> 16.9187, <3> 5.0317, <4> 3.3517, <5> 19.8663, <6> 45.335, <7> 47.7392, <8> 9.3673, <9> 2.4314, <10> 5.7204, <11> 14.7072, <12> 15.6618, <13> 21.5303, <14> 12.6431, <15> 27.8375, <16> 12.0666, <17> 16.2221, <18> 46.3486, <19> 31.94, <20> 36.9764;
param workload[JOB] := <1> 445.8559, <2> 286.2424, <3> 25.318, <4> 11.2339, <5> 394.6699, <6> 2055.2622, <7> 2279.0312, <8> 87.7463, <9> 5.9117, <10> 32.723, <11> 216.3017, <12> 245.292, <13> 463.5538, <14> 159.848, <15> 774.9264, <16> 145.6028, <17> 263.1565, <18> 2148.1927, <19> 1020.1636, <20> 1367.2542;
param capacity[MACHINE] := <1> 2347.8774, <2> 2347.8774, <3> 2347.8774, <4> 2347.8774, <5> 2347.8774, <6> 2347.8774, <7> 2347.8774;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
