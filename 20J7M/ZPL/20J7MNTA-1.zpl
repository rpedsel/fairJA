set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 19.294, <2> 22.6142, <3> 16.4259, <4> 24.0464, <5> 27.1521, <6> 18.5798, <7> 28.4168, <8> 18.5367, <9> 24.6523, <10> 14.2689, <11> 26.5779, <12> 24.9499, <13> 30.1375, <14> 25.9846, <15> 20.9423, <16> 28.1535, <17> 30.7936, <18> 32.0034, <19> 26.8962, <20> 24.5396;
param workload[JOB] := <1> 372.2584, <2> 511.402, <3> 269.8102, <4> 578.2294, <5> 737.2365, <6> 345.209, <7> 807.5145, <8> 343.6092, <9> 607.7359, <10> 203.6015, <11> 706.3848, <12> 622.4975, <13> 908.2689, <14> 675.1994, <15> 438.5799, <16> 792.6196, <17> 948.2458, <18> 1024.2176, <19> 723.4056, <20> 602.192;
param capacity[MACHINE] := <1> 1309.0948, <2> 1309.0948, <3> 1309.0948, <4> 1309.0948, <5> 1309.0948, <6> 1309.0948, <7> 1309.0948;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
