set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 35.4383, <2> 29.1291, <3> 26.3621, <4> 30.2453, <5> 16.7009, <6> 24.7753, <7> 25.0728, <8> 30.7324, <9> 30.2379, <10> 34.2134, <11> 24.239, <12> 34.886, <13> 18.6219, <14> 25.3806, <15> 26.9666, <16> 29.2404, <17> 16.1781, <18> 19.8328, <19> 16.6043, <20> 24.095;
param workload[JOB] := <1> 1255.8731, <2> 848.5045, <3> 694.9603, <4> 914.7782, <5> 278.9201, <6> 613.8155, <7> 628.6453, <8> 944.4804, <9> 914.3306, <10> 1170.5567, <11> 587.5291, <12> 1217.033, <13> 346.7752, <14> 644.1749, <15> 727.1975, <16> 855.001, <17> 261.7309, <18> 393.34, <19> 275.7028, <20> 580.569;
param capacity[MACHINE] := <1> 1516.4912, <2> 1516.4912, <3> 1516.4912, <4> 1516.4912, <5> 1516.4912, <6> 1516.4912, <7> 1516.4912;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
