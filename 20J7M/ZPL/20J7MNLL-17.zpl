set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 29.4654, <2> 19.4353, <3> 31.999, <4> 30.4456, <5> 31.937, <6> 18.2853, <7> 20.2783, <8> 21.1626, <9> 24.4599, <10> 29.0763, <11> 31.2787, <12> 23.7022, <13> 25.6592, <14> 31.8174, <15> 30.4649, <16> 25.1057, <17> 25.6615, <18> 24.1485, <19> 26.3203, <20> 14.3804;
param workload[JOB] := <1> 29.4654, <2> 19.4353, <3> 31.999, <4> 30.4456, <5> 31.937, <6> 18.2853, <7> 20.2783, <8> 21.1626, <9> 24.4599, <10> 29.0763, <11> 31.2787, <12> 23.7022, <13> 25.6592, <14> 31.8174, <15> 30.4649, <16> 25.1057, <17> 25.6615, <18> 24.1485, <19> 26.3203, <20> 14.3804;
param capacity[MACHINE] := <1> 73.5834, <2> 73.5834, <3> 73.5834, <4> 73.5834, <5> 73.5834, <6> 73.5834, <7> 73.5834;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
