set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 32.8962, <2> 26.9537, <3> 15.8878, <4> 23.1315, <5> 19.6837, <6> 38.2871, <7> 44.6111, <8> 1.9847, <9> 6.951, <10> 41.6685, <11> 43.2675, <12> 10.4102, <13> 1.0291, <14> 11.1178, <15> 23.1883, <16> 43.2325, <17> 39.9213, <18> 41.5002, <19> 44.0256, <20> 10.7924;
param workload[JOB] := <1> 32.8962, <2> 26.9537, <3> 15.8878, <4> 23.1315, <5> 19.6837, <6> 38.2871, <7> 44.6111, <8> 1.9847, <9> 6.951, <10> 41.6685, <11> 43.2675, <12> 10.4102, <13> 1.0291, <14> 11.1178, <15> 23.1883, <16> 43.2325, <17> 39.9213, <18> 41.5002, <19> 44.0256, <20> 10.7924;
param capacity[MACHINE] := <1> 520.5402, <2> 520.5402, <3> 520.5402, <4> 520.5402, <5> 520.5402, <6> 520.5402, <7> 520.5402;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
