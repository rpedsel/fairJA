set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 26.0837, <2> 26.6119, <3> 22.8706, <4> 34.7733, <5> 21.2897, <6> 29.2753, <7> 20.9248, <8> 34.3607, <9> 26.9269, <10> 15.9121, <11> 22.7572, <12> 33.7037, <13> 21.7909, <14> 18.1155, <15> 24.4679, <16> 33.768, <17> 24.3473, <18> 30.1855, <19> 24.139, <20> 25.8317;
param workload[JOB] := <1> 49.6274, <2> 38.1314, <3> 33.1529, <4> 13.7863, <5> 9.0951, <6> 41.8651, <7> 20.0505, <8> 49.513, <9> 34.4908, <10> 11.138, <11> 46.7089, <12> 2.4148, <13> 6.3931, <14> 9.1813, <15> 31.4234, <16> 30.2618, <17> 35.3589, <18> 18.5979, <19> 14.1321, <20> 3.6514;
param capacity[MACHINE] := <1> 498.9741, <2> 498.9741, <3> 498.9741, <4> 498.9741, <5> 498.9741, <6> 498.9741, <7> 498.9741;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
