set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 20.7716, <2> 26.6087, <3> 28.2253, <4> 26.5376, <5> 20.6632, <6> 29.6797, <7> 29.1356, <8> 19.0194, <9> 30.7219, <10> 29.5353, <11> 30.8595, <12> 30.5973, <13> 23.6971, <14> 10.642, <15> 18.1756, <16> 20.618, <17> 19.774, <18> 19.2768, <19> 28.1581, <20> 16.1924;
param workload[JOB] := <1> 28.1108, <2> 14.3637, <3> 29.6986, <4> 36.6898, <5> 19.1361, <6> 46.5327, <7> 9.3611, <8> 0.0336, <9> 47.8981, <10> 14.456, <11> 21.0901, <12> 1.7837, <13> 20.2492, <14> 41.8857, <15> 48.4823, <16> 45.0607, <17> 26.0425, <18> 48.4272, <19> 26.1775, <20> 34.5244;
param capacity[MACHINE] := <1> 560.0038, <2> 560.0038, <3> 560.0038, <4> 560.0038, <5> 560.0038, <6> 560.0038, <7> 560.0038;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
