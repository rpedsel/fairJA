set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 26.9764, <2> 10.8615, <3> 4.1099, <4> 37.9871, <5> 6.6609, <6> 46.7109, <7> 32.7841, <8> 24.9938, <9> 32.1935, <10> 18.3905, <11> 38.0616, <12> 26.2919, <13> 12.3431, <14> 29.8889, <15> 25.7399, <16> 21.3523, <17> 36.8653, <18> 3.5167, <19> 44.7264, <20> 22.9664;
param workload[JOB] := <1> 727.7262, <2> 117.9722, <3> 16.8913, <4> 1443.0198, <5> 44.3676, <6> 2181.9082, <7> 1074.7972, <8> 624.69, <9> 1036.4214, <10> 338.2105, <11> 1448.6854, <12> 691.264, <13> 152.3521, <14> 893.3463, <15> 662.5425, <16> 455.9207, <17> 1359.0503, <18> 12.3672, <19> 2000.4509, <20> 527.4555;
param capacity[MACHINE] := <1> 2258.4913, <2> 2258.4913, <3> 2258.4913, <4> 2258.4913, <5> 2258.4913, <6> 2258.4913, <7> 2258.4913;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
