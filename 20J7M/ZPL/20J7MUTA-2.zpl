set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 6.0792, <2> 30.4758, <3> 2.3506, <4> 10.2852, <5> 0.6974, <6> 31.0218, <7> 29.0406, <8> 30.1798, <9> 21.9221, <10> 10.9304, <11> 31.3292, <12> 37.8811, <13> 48.0346, <14> 40.0948, <15> 37.8044, <16> 17.4537, <17> 45.4298, <18> 7.61, <19> 12.6554, <20> 12.5425;
param workload[JOB] := <1> 36.9567, <2> 928.7744, <3> 5.5253, <4> 105.7853, <5> 0.4864, <6> 962.3521, <7> 843.3564, <8> 910.8203, <9> 480.5785, <10> 119.4736, <11> 981.5188, <12> 1434.9777, <13> 2307.3228, <14> 1607.593, <15> 1429.1727, <16> 304.6316, <17> 2063.8667, <18> 57.9121, <19> 160.1591, <20> 157.3143;
param capacity[MACHINE] := <1> 2936.557, <2> 2936.557, <3> 2936.557, <4> 2936.557, <5> 2936.557, <6> 2936.557, <7> 2936.557;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
