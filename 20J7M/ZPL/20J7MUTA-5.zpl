set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 48.3191, <2> 12.3978, <3> 30.2749, <4> 31.0224, <5> 48.6572, <6> 16.4845, <7> 28.3198, <8> 24.2363, <9> 36.6289, <10> 42.3092, <11> 4.1877, <12> 10.5631, <13> 15.6116, <14> 7.2054, <15> 47.525, <16> 20.8553, <17> 5.1481, <18> 0.2601, <19> 11.8772, <20> 39.9786;
param workload[JOB] := <1> 2334.7354, <2> 153.7054, <3> 916.5696, <4> 962.3893, <5> 2367.5231, <6> 271.7387, <7> 802.0111, <8> 587.3982, <9> 1341.6763, <10> 1790.0684, <11> 17.5368, <12> 111.5791, <13> 243.7221, <14> 51.9178, <15> 2258.6256, <16> 434.9435, <17> 26.5029, <18> 0.0677, <19> 141.0679, <20> 1598.2885;
param capacity[MACHINE] := <1> 2585.7477, <2> 2585.7477, <3> 2585.7477, <4> 2585.7477, <5> 2585.7477, <6> 2585.7477, <7> 2585.7477;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
