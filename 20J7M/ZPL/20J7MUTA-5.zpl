set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 12.9243, <2> 41.6389, <3> 0.4676, <4> 5.8424, <5> 39.9587, <6> 44.2209, <7> 15.3046, <8> 44.532, <9> 46.5661, <10> 20.6763, <11> 45.8688, <12> 44.1443, <13> 13.5764, <14> 48.5695, <15> 39.9506, <16> 1.4154, <17> 32.1829, <18> 35.2675, <19> 24.4205, <20> 29.9775;
param workload[JOB] := <1> 167.0375, <2> 1733.798, <3> 0.2186, <4> 34.1336, <5> 1596.6977, <6> 1955.488, <7> 234.2308, <8> 1983.099, <9> 2168.4017, <10> 427.5094, <11> 2103.9468, <12> 1948.7192, <13> 184.3186, <14> 2358.9963, <15> 1596.0504, <16> 2.0034, <17> 1035.7391, <18> 1243.7966, <19> 596.3608, <20> 898.6505;
param capacity[MACHINE] := <1> 2385.9853, <2> 2385.9853, <3> 2385.9853, <4> 2385.9853, <5> 2385.9853, <6> 2385.9853, <7> 2385.9853;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
