set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 21.4497, <2> 11.9368, <3> 20.8893, <4> 28.2368, <5> 27.5228, <6> 24.0385, <7> 21.4703, <8> 28.7376, <9> 26.4477, <10> 25.052, <11> 26.6773, <12> 27.6664, <13> 24.8623, <14> 29.982, <15> 28.1378, <16> 20.7179, <17> 28.8666, <18> 29.5967, <19> 17.9697, <20> 25.8843;
param workload[JOB] := <1> 21.4497, <2> 11.9368, <3> 20.8893, <4> 28.2368, <5> 27.5228, <6> 24.0385, <7> 21.4703, <8> 28.7376, <9> 26.4477, <10> 25.052, <11> 26.6773, <12> 27.6664, <13> 24.8623, <14> 29.982, <15> 28.1378, <16> 20.7179, <17> 28.8666, <18> 29.5967, <19> 17.9697, <20> 25.8843;
param capacity[MACHINE] := <1> 53.1581, <2> 53.1581, <3> 53.1581, <4> 53.1581, <5> 53.1581, <6> 53.1581, <7> 53.1581;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
