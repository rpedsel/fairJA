set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 29.1251, <2> 12.5754, <3> 15.8672, <4> 13.0238, <5> 34.2504, <6> 39.3821, <7> 12.4961, <8> 44.9195, <9> 10.7562, <10> 4.0842, <11> 49.4974, <12> 23.5142, <13> 31.2955, <14> 33.6105, <15> 46.6471, <16> 27.6209, <17> 7.7766, <18> 11.7459, <19> 36.1838, <20> 21.5073;
param workload[JOB] := <1> 29.1251, <2> 12.5754, <3> 15.8672, <4> 13.0238, <5> 34.2504, <6> 39.3821, <7> 12.4961, <8> 44.9195, <9> 10.7562, <10> 4.0842, <11> 49.4974, <12> 23.5142, <13> 31.2955, <14> 33.6105, <15> 46.6471, <16> 27.6209, <17> 7.7766, <18> 11.7459, <19> 36.1838, <20> 21.5073;
param capacity[MACHINE] := <1> 72.2685, <2> 72.2685, <3> 72.2685, <4> 72.2685, <5> 72.2685, <6> 72.2685, <7> 72.2685;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
