set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 5.7224, <2> 27.6267, <3> 20.6165, <4> 47.0296, <5> 6.8296, <6> 5.2294, <7> 28.9642, <8> 33.9728, <9> 8.2538, <10> 42.8835, <11> 21.0665, <12> 47.4703, <13> 20.9173, <14> 46.7806, <15> 6.9951, <16> 41.367, <17> 11.4105, <18> 24.2808, <19> 15.2589, <20> 32.0174;
param workload[JOB] := <1> 32.7459, <2> 763.2346, <3> 425.0401, <4> 2211.7833, <5> 46.6434, <6> 27.3466, <7> 838.9249, <8> 1154.1511, <9> 68.1252, <10> 1838.9946, <11> 443.7974, <12> 2253.4294, <13> 437.5334, <14> 2188.4245, <15> 48.9314, <16> 1711.2287, <17> 130.1995, <18> 589.5572, <19> 232.834, <20> 1025.1139;
param capacity[MACHINE] := <1> 16468.0391, <2> 16468.0391, <3> 16468.0391, <4> 16468.0391, <5> 16468.0391, <6> 16468.0391, <7> 16468.0391;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
