set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 25.7477, <2> 34.1193, <3> 34.6663, <4> 33.4286, <5> 15.6386, <6> 26.3357, <7> 34.3423, <8> 24.5474, <9> 27.4295, <10> 25.7686, <11> 28.6252, <12> 21.2618, <13> 17.779, <14> 24.8242, <15> 24.4812, <16> 22.7965, <17> 25.6416, <18> 33.0594, <19> 22.5668, <20> 33.1925;
param workload[JOB] := <1> 662.9441, <2> 1164.1266, <3> 1201.7524, <4> 1117.4713, <5> 244.5658, <6> 693.5691, <7> 1179.3936, <8> 602.5748, <9> 752.3775, <10> 664.0207, <11> 819.4021, <12> 452.0641, <13> 316.0928, <14> 616.2409, <15> 599.3292, <16> 519.6804, <17> 657.4917, <18> 1092.9239, <19> 509.2605, <20> 1101.7421;
param capacity[MACHINE] := <1> 14967.0236, <2> 14967.0236, <3> 14967.0236, <4> 14967.0236, <5> 14967.0236, <6> 14967.0236, <7> 14967.0236;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
