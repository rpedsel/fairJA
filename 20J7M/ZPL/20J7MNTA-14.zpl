set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 29.5114, <2> 29.7787, <3> 16.4592, <4> 27.4133, <5> 26.2167, <6> 25.8879, <7> 19.0448, <8> 22.8574, <9> 28.5917, <10> 21.4569, <11> 15.742, <12> 22.8698, <13> 25.5563, <14> 21.1489, <15> 30.7657, <16> 29.4374, <17> 24.9271, <18> 24.053, <19> 29.2669, <20> 32.6138;
param workload[JOB] := <1> 870.9227, <2> 886.771, <3> 270.9053, <4> 751.489, <5> 687.3154, <6> 670.1834, <7> 362.7044, <8> 522.4607, <9> 817.4853, <10> 460.3986, <11> 247.8106, <12> 523.0278, <13> 653.1245, <14> 447.276, <15> 946.5283, <16> 866.5605, <17> 621.3603, <18> 578.5468, <19> 856.5514, <20> 1063.66;
param capacity[MACHINE] := <1> 1404.116, <2> 1404.116, <3> 1404.116, <4> 1404.116, <5> 1404.116, <6> 1404.116, <7> 1404.116;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
