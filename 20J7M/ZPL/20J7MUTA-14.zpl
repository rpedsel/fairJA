set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 35.5835, <2> 49.1312, <3> 37.5874, <4> 23.8078, <5> 25.856, <6> 12.7072, <7> 30.214, <8> 0.3044, <9> 13.8838, <10> 17.5266, <11> 32.5865, <12> 39.1686, <13> 1.1852, <14> 22.8117, <15> 34.2865, <16> 36.7162, <17> 37.562, <18> 1.9927, <19> 47.9688, <20> 44.7123;
param workload[JOB] := <1> 1266.1855, <2> 2413.8748, <3> 1412.8126, <4> 566.8113, <5> 668.5327, <6> 161.4729, <7> 912.8858, <8> 0.0927, <9> 192.7599, <10> 307.1817, <11> 1061.88, <12> 1534.1792, <13> 1.4047, <14> 520.3737, <15> 1175.5641, <16> 1348.0793, <17> 1410.9038, <18> 3.9709, <19> 2301.0058, <20> 1999.1898;
param capacity[MACHINE] := <1> 2063.4815, <2> 2063.4815, <3> 2063.4815, <4> 2063.4815, <5> 2063.4815, <6> 2063.4815, <7> 2063.4815;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
