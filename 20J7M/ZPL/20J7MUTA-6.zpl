set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 36.6565, <2> 12.6339, <3> 4.9709, <4> 49.5581, <5> 31.7277, <6> 38.5327, <7> 3.0135, <8> 41.6755, <9> 43.7649, <10> 18.8932, <11> 21.6086, <12> 22.1081, <13> 41.5799, <14> 42.0428, <15> 17.7941, <16> 6.5605, <17> 45.9063, <18> 2.6296, <19> 4.9594, <20> 8.8936;
param workload[JOB] := <1> 1343.699, <2> 159.6154, <3> 24.7098, <4> 2456.0053, <5> 1006.6469, <6> 1484.769, <7> 9.0812, <8> 1736.8473, <9> 1915.3665, <10> 356.953, <11> 466.9316, <12> 488.7681, <13> 1728.8881, <14> 1767.597, <15> 316.63, <16> 43.0402, <17> 2107.3884, <18> 6.9148, <19> 24.5956, <20> 79.0961;
param capacity[MACHINE] := <1> 2584.1553, <2> 2584.1553, <3> 2584.1553, <4> 2584.1553, <5> 2584.1553, <6> 2584.1553, <7> 2584.1553;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
