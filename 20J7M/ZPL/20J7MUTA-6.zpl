set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 16.115, <2> 2.9605, <3> 16.1975, <4> 40.1684, <5> 42.1464, <6> 37.1498, <7> 7.0613, <8> 32.6488, <9> 13.9867, <10> 33.7934, <11> 37.7408, <12> 42.6278, <13> 31.5761, <14> 32.8842, <15> 36.5917, <16> 42.4716, <17> 39.8558, <18> 40.4902, <19> 13.8601, <20> 18.7922;
param workload[JOB] := <1> 259.6932, <2> 8.7646, <3> 262.359, <4> 1613.5004, <5> 1776.319, <6> 1380.1076, <7> 49.862, <8> 1065.9441, <9> 195.6278, <10> 1141.9939, <11> 1424.368, <12> 1817.1293, <13> 997.0501, <14> 1081.3706, <15> 1338.9525, <16> 1803.8368, <17> 1588.4848, <18> 1639.4563, <19> 192.1024, <20> 353.1468;
param capacity[MACHINE] := <1> 2141.7931, <2> 2141.7931, <3> 2141.7931, <4> 2141.7931, <5> 2141.7931, <6> 2141.7931, <7> 2141.7931;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
