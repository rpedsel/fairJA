set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 21.7843, <2> 22.4963, <3> 44.4326, <4> 26.7584, <5> 33.6566, <6> 44.4234, <7> 3.1718, <8> 17.4697, <9> 21.9802, <10> 26.2839, <11> 15.3884, <12> 45.2145, <13> 18.456, <14> 13.1802, <15> 11.8734, <16> 0.0995, <17> 26.2347, <18> 35.1587, <19> 5.8268, <20> 26.4005;
param workload[JOB] := <1> 474.5557, <2> 506.0835, <3> 1974.2559, <4> 716.012, <5> 1132.7667, <6> 1973.4385, <7> 10.0603, <8> 305.1904, <9> 483.1292, <10> 690.8434, <11> 236.8029, <12> 2044.351, <13> 340.6239, <14> 173.7177, <15> 140.9776, <16> 0.0099, <17> 688.2595, <18> 1236.1342, <19> 33.9516, <20> 696.9864;
param capacity[MACHINE] := <1> 13858.1503, <2> 13858.1503, <3> 13858.1503, <4> 13858.1503, <5> 13858.1503, <6> 13858.1503, <7> 13858.1503;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
