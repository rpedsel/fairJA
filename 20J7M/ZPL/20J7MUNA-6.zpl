set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 0.6623, <2> 30.414, <3> 46.2696, <4> 15.3559, <5> 39.5764, <6> 39.7754, <7> 0.2069, <8> 28.4191, <9> 33.7698, <10> 27.0099, <11> 29.0042, <12> 43.4269, <13> 14.9113, <14> 49.1467, <15> 27.224, <16> 21.2312, <17> 21.4169, <18> 41.8727, <19> 17.3699, <20> 4.6198;
param workload[JOB] := <1> 0.4386, <2> 925.0114, <3> 2140.8759, <4> 235.8037, <5> 1566.2914, <6> 1582.0824, <7> 0.0428, <8> 807.6452, <9> 1140.3994, <10> 729.5347, <11> 841.2436, <12> 1885.8956, <13> 222.3469, <14> 2415.3981, <15> 741.1462, <16> 450.7639, <17> 458.6836, <18> 1753.323, <19> 301.7134, <20> 21.3426;
param capacity[MACHINE] := <1> 18219.9824, <2> 18219.9824, <3> 18219.9824, <4> 18219.9824, <5> 18219.9824, <6> 18219.9824, <7> 18219.9824;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
