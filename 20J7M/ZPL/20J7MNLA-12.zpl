set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 29.6361, <2> 19.803, <3> 18.4756, <4> 15.4773, <5> 20.4342, <6> 20.878, <7> 22.1073, <8> 33.2992, <9> 34.5321, <10> 16.9752, <11> 33.0518, <12> 21.4422, <13> 20.219, <14> 25.0383, <15> 27.4497, <16> 25.2413, <17> 26.4677, <18> 20.2129, <19> 14.4279, <20> 28.6846;
param workload[JOB] := <1> 878.2984, <2> 392.1588, <3> 341.3478, <4> 239.5468, <5> 417.5565, <6> 435.8909, <7> 488.7327, <8> 1108.8367, <9> 1192.4659, <10> 288.1574, <11> 1092.4215, <12> 459.7679, <13> 408.808, <14> 626.9165, <15> 753.486, <16> 637.1232, <17> 700.5391, <18> 408.5613, <19> 208.1643, <20> 822.8063;
param capacity[MACHINE] := <1> 1700.2266, <2> 1700.2266, <3> 1700.2266, <4> 1700.2266, <5> 1700.2266, <6> 1700.2266, <7> 1700.2266;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
