set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 34.6935, <2> 17.9802, <3> 28.7799, <4> 24.5762, <5> 23.0417, <6> 20.8779, <7> 21.0638, <8> 30.4524, <9> 24.3103, <10> 20.633, <11> 30.7047, <12> 20.3438, <13> 25.4593, <14> 24.3344, <15> 24.8301, <16> 24.1752, <17> 27.6623, <18> 27.3679, <19> 24.1375, <20> 25.2248;
param workload[JOB] := <1> 34.6935, <2> 17.9802, <3> 28.7799, <4> 24.5762, <5> 23.0417, <6> 20.8779, <7> 21.0638, <8> 30.4524, <9> 24.3103, <10> 20.633, <11> 30.7047, <12> 20.3438, <13> 25.4593, <14> 24.3344, <15> 24.8301, <16> 24.1752, <17> 27.6623, <18> 27.3679, <19> 24.1375, <20> 25.2248;
param capacity[MACHINE] := <1> 53.641, <2> 53.641, <3> 53.641, <4> 53.641, <5> 53.641, <6> 53.641, <7> 53.641;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
