set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 20.1846, <2> 24.2899, <3> 38.9789, <4> 29.2181, <5> 33.4434, <6> 19.6316, <7> 30.8485, <8> 18.2471, <9> 27.5166, <10> 32.7613, <11> 23.8821, <12> 29.557, <13> 21.6181, <14> 25.2761, <15> 28.9871, <16> 26.8009, <17> 15.8211, <18> 20.645, <19> 28.4737, <20> 17.465;
param workload[JOB] := <1> 20.1846, <2> 24.2899, <3> 38.9789, <4> 29.2181, <5> 33.4434, <6> 19.6316, <7> 30.8485, <8> 18.2471, <9> 27.5166, <10> 32.7613, <11> 23.8821, <12> 29.557, <13> 21.6181, <14> 25.2761, <15> 28.9871, <16> 26.8009, <17> 15.8211, <18> 20.645, <19> 28.4737, <20> 17.465;
param capacity[MACHINE] := <1> 55.0335, <2> 55.0335, <3> 55.0335, <4> 55.0335, <5> 55.0335, <6> 55.0335, <7> 55.0335;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
