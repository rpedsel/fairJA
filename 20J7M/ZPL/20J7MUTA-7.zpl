set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 16.0283, <2> 40.438, <3> 24.1436, <4> 2.8935, <5> 26.9619, <6> 34.8239, <7> 3.5763, <8> 13.4635, <9> 44.3685, <10> 45.4103, <11> 2.1067, <12> 49.7229, <13> 39.1555, <14> 18.374, <15> 38.456, <16> 26.6669, <17> 46.2359, <18> 0.5277, <19> 25.4999, <20> 26.8166;
param workload[JOB] := <1> 256.9064, <2> 1635.2318, <3> 582.9134, <4> 8.3723, <5> 726.9441, <6> 1212.704, <7> 12.7899, <8> 181.2658, <9> 1968.5638, <10> 2062.0953, <11> 4.4382, <12> 2472.3668, <13> 1533.1532, <14> 337.6039, <15> 1478.8639, <16> 711.1236, <17> 2137.7584, <18> 0.2785, <19> 650.2449, <20> 719.13;
param capacity[MACHINE] := <1> 2002.7945, <2> 2002.7945, <3> 2002.7945, <4> 2002.7945, <5> 2002.7945, <6> 2002.7945, <7> 2002.7945;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
