set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 15.6105, <2> 9.0937, <3> 20.8291, <4> 20.4997, <5> 26.0727, <6> 32.9656, <7> 3.221, <8> 28.0043, <9> 17.3616, <10> 45.69, <11> 42.4546, <12> 29.4745, <13> 35.8021, <14> 0.626, <15> 7.4324, <16> 23.9111, <17> 39.5159, <18> 8.8075, <19> 27.8329, <20> 2.5499;
param workload[JOB] := <1> 243.6877, <2> 82.6954, <3> 433.8514, <4> 420.2377, <5> 679.7857, <6> 1086.7308, <7> 10.3748, <8> 784.2408, <9> 301.4252, <10> 2087.5761, <11> 1802.3931, <12> 868.7462, <13> 1281.7904, <14> 0.3919, <15> 55.2406, <16> 571.7407, <17> 1561.5064, <18> 77.5721, <19> 774.6703, <20> 6.502;
param capacity[MACHINE] := <1> 2584.3162, <2> 2584.3162, <3> 2584.3162, <4> 2584.3162, <5> 2584.3162, <6> 2584.3162, <7> 2584.3162;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
