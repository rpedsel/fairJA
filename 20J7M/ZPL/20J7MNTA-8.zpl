set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 19.5904, <2> 13.4916, <3> 21.8115, <4> 29.9178, <5> 27.5273, <6> 19.1311, <7> 28.1456, <8> 25.5441, <9> 28.9595, <10> 21.2374, <11> 25.1023, <12> 13.4801, <13> 26.5793, <14> 13.4272, <15> 28.5917, <16> 23.643, <17> 21.2038, <18> 15.7515, <19> 20.664, <20> 29.187;
param workload[JOB] := <1> 383.7838, <2> 182.0233, <3> 475.7415, <4> 895.0748, <5> 757.7522, <6> 365.999, <7> 792.1748, <8> 652.501, <9> 838.6526, <10> 451.0272, <11> 630.1255, <12> 181.7131, <13> 706.4592, <14> 180.2897, <15> 817.4853, <16> 558.9914, <17> 449.6011, <18> 248.1098, <19> 427.0009, <20> 851.881;
param capacity[MACHINE] := <1> 1162.1129, <2> 1162.1129, <3> 1162.1129, <4> 1162.1129, <5> 1162.1129, <6> 1162.1129, <7> 1162.1129;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
