set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 29.132, <2> 23.6742, <3> 22.9063, <4> 20.8932, <5> 24.6509, <6> 22.4962, <7> 28.7537, <8> 23.8517, <9> 22.8676, <10> 20.4264, <11> 29.2279, <12> 23.1125, <13> 23.2309, <14> 24.5942, <15> 19.8132, <16> 15.2276, <17> 24.4048, <18> 11.1792, <19> 32.9485, <20> 27.8307;
param workload[JOB] := <1> 848.6734, <2> 560.4677, <3> 524.6986, <4> 436.5258, <5> 607.6669, <6> 506.079, <7> 826.7753, <8> 568.9036, <9> 522.9271, <10> 417.2378, <11> 854.2701, <12> 534.1877, <13> 539.6747, <14> 604.8747, <15> 392.5629, <16> 231.8798, <17> 595.5943, <18> 124.9745, <19> 1085.6037, <20> 774.5479;
param capacity[MACHINE] := <1> 11558.1255, <2> 11558.1255, <3> 11558.1255, <4> 11558.1255, <5> 11558.1255, <6> 11558.1255, <7> 11558.1255;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
