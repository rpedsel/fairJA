set JOB := {1 .. 20};
set MACHINE := {1 .. 7};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 18.7722, <2> 34.1316, <3> 23.7085, <4> 24.3828, <5> 30.6784, <6> 18.8486, <7> 23.464, <8> 22.3446, <9> 29.1547, <10> 28.6535, <11> 34.3742, <12> 31.2094, <13> 30.5655, <14> 22.5004, <15> 25.7674, <16> 25.6461, <17> 22.4076, <18> 17.0176, <19> 37.5724, <20> 24.687;
param workload[JOB] := <1> 6.0817, <2> 17.9161, <3> 21.0005, <4> 28.4383, <5> 16.4594, <6> 40.5184, <7> 46.9065, <8> 47.6815, <9> 31.7655, <10> 4.8563, <11> 46.0778, <12> 41.5912, <13> 35.1283, <14> 30.0653, <15> 32.8696, <16> 18.3073, <17> 39.6929, <18> 9.8508, <19> 15.2906, <20> 4.251;
param capacity[MACHINE] := <1> 57.2945, <2> 57.2945, <3> 57.2945, <4> 57.2945, <5> 57.2945, <6> 57.2945, <7> 57.2945;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
