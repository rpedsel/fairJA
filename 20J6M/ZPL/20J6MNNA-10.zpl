set JOB := {1 .. 20};
set MACHINE := {1 .. 6};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 30.4916, <2> 23.3588, <3> 23.759, <4> 23.6672, <5> 36.1978, <6> 14.303, <7> 15.2387, <8> 21.6515, <9> 22.38, <10> 25.1784, <11> 25.7383, <12> 30.1992, <13> 32.7501, <14> 24.8906, <15> 27.6649, <16> 28.8625, <17> 25.6105, <18> 24.1324, <19> 11.3469, <20> 32.2185;
param workload[JOB] := <1> 929.7377, <2> 545.6335, <3> 564.4901, <4> 560.1364, <5> 1310.2807, <6> 204.5758, <7> 232.218, <8> 468.7875, <9> 500.8644, <10> 633.9518, <11> 662.4601, <12> 911.9917, <13> 1072.5691, <14> 619.542, <15> 765.3467, <16> 833.0439, <17> 655.8977, <18> 582.3727, <19> 128.7521, <20> 1038.0317;
param capacity[MACHINE] := <1> 13220.6836, <2> 13220.6836, <3> 13220.6836, <4> 13220.6836, <5> 13220.6836, <6> 13220.6836;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
