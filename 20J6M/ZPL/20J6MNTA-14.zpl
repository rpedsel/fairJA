set JOB := {1 .. 20};
set MACHINE := {1 .. 6};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 26.7664, <2> 23.5171, <3> 26.1417, <4> 26.5587, <5> 13.0147, <6> 39.0579, <7> 14.9439, <8> 28.0583, <9> 28.3388, <10> 35.821, <11> 17.5091, <12> 23.9472, <13> 23.1604, <14> 25.4615, <15> 26.3268, <16> 22.8545, <17> 27.7274, <18> 28.4291, <19> 26.5492, <20> 17.1046;
param workload[JOB] := <1> 716.4402, <2> 553.054, <3> 683.3885, <4> 705.3645, <5> 169.3824, <6> 1525.5196, <7> 223.3201, <8> 787.2682, <9> 803.0876, <10> 1283.144, <11> 306.5686, <12> 573.4684, <13> 536.4041, <14> 648.288, <15> 693.1004, <16> 522.3282, <17> 768.8087, <18> 808.2137, <19> 704.86, <20> 292.5673;
param capacity[MACHINE] := <1> 1663.072, <2> 1663.072, <3> 1663.072, <4> 1663.072, <5> 1663.072, <6> 1663.072;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
