set JOB := {1 .. 20};
set MACHINE := {1 .. 6};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 9.1171, <2> 2.6188, <3> 25.5299, <4> 30.5042, <5> 15.12, <6> 37.8641, <7> 28.2407, <8> 4.4274, <9> 44.6683, <10> 32.2643, <11> 41.0686, <12> 7.7634, <13> 29.1665, <14> 47.6248, <15> 46.0091, <16> 2.0616, <17> 24.883, <18> 9.2864, <19> 34.1069, <20> 21.4435;
param workload[JOB] := <1> 83.1215, <2> 6.8581, <3> 651.7758, <4> 930.5062, <5> 228.6144, <6> 1433.6901, <7> 797.5371, <8> 19.6019, <9> 1995.257, <10> 1040.9851, <11> 1686.6299, <12> 60.2704, <13> 850.6847, <14> 2268.1216, <15> 2116.8373, <16> 4.2502, <17> 619.1637, <18> 86.2372, <19> 1163.2806, <20> 459.8237;
param capacity[MACHINE] := <1> 2750.5411, <2> 2750.5411, <3> 2750.5411, <4> 2750.5411, <5> 2750.5411, <6> 2750.5411;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
