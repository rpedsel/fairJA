set JOB := {1 .. 20};
set MACHINE := {1 .. 6};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 22.6251, <2> 20.6834, <3> 25.7114, <4> 14.8537, <5> 48.6548, <6> 27.5173, <7> 10.1246, <8> 9.0237, <9> 6.4995, <10> 3.5111, <11> 35.4241, <12> 21.5946, <13> 47.1967, <14> 42.4769, <15> 24.7291, <16> 31.499, <17> 37.2268, <18> 20.8976, <19> 30.9736, <20> 37.0043;
param workload[JOB] := <1> 511.8952, <2> 427.803, <3> 661.0761, <4> 220.6324, <5> 2367.2896, <6> 757.2018, <7> 102.5075, <8> 81.4272, <9> 42.2435, <10> 12.3278, <11> 1254.8669, <12> 466.3267, <13> 2227.5285, <14> 1804.287, <15> 611.5284, <16> 992.187, <17> 1385.8346, <18> 436.7097, <19> 959.3639, <20> 1369.3182;
param capacity[MACHINE] := <1> 2086.5444, <2> 2086.5444, <3> 2086.5444, <4> 2086.5444, <5> 2086.5444, <6> 2086.5444;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
