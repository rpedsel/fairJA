set JOB := {1 .. 20};
set MACHINE := {1 .. 6};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 23.1873, <2> 29.9581, <3> 28.3898, <4> 26.7964, <5> 23.5271, <6> 30.3423, <7> 26.4571, <8> 23.6629, <9> 18.4571, <10> 26.8544, <11> 22.9638, <12> 26.9026, <13> 22.1091, <14> 27.9007, <15> 26.7076, <16> 23.8106, <17> 28.2625, <18> 31.9361, <19> 29.4932, <20> 25.69;
param workload[JOB] := <1> 537.6509, <2> 897.4878, <3> 805.9807, <4> 718.0471, <5> 553.5244, <6> 920.6552, <7> 699.9781, <8> 559.9328, <9> 340.6645, <10> 721.1588, <11> 527.3361, <12> 723.7499, <13> 488.8123, <14> 778.4491, <15> 713.2959, <16> 566.9447, <17> 798.7689, <18> 1019.9145, <19> 869.8488, <20> 659.9761;
param capacity[MACHINE] := <1> 2317.0294, <2> 2317.0294, <3> 2317.0294, <4> 2317.0294, <5> 2317.0294, <6> 2317.0294;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
