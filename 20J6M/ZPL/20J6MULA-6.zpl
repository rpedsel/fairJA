set JOB := {1 .. 20};
set MACHINE := {1 .. 6};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 26.3612, <2> 25.0819, <3> 24.5251, <4> 15.5946, <5> 43.1028, <6> 9.5914, <7> 7.5582, <8> 28.5302, <9> 16.7325, <10> 2.5884, <11> 28.2384, <12> 28.138, <13> 22.673, <14> 2.8572, <15> 35.5386, <16> 26.7055, <17> 49.8273, <18> 48.4384, <19> 12.8196, <20> 45.6359;
param workload[JOB] := <1> 694.9129, <2> 629.1017, <3> 601.4805, <4> 243.1915, <5> 1857.8514, <6> 91.995, <7> 57.1264, <8> 813.9723, <9> 279.9766, <10> 6.6998, <11> 797.4072, <12> 791.747, <13> 514.0649, <14> 8.1636, <15> 1262.9921, <16> 713.1837, <17> 2482.7598, <18> 2346.2786, <19> 164.3421, <20> 2082.6354;
param capacity[MACHINE] := <1> 2739.9804, <2> 2739.9804, <3> 2739.9804, <4> 2739.9804, <5> 2739.9804, <6> 2739.9804;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
