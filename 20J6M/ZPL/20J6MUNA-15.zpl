set JOB := {1 .. 20};
set MACHINE := {1 .. 6};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 25.1147, <2> 49.8184, <3> 11.8209, <4> 8.0706, <5> 2.7912, <6> 45.2253, <7> 2.7925, <8> 45.6203, <9> 42.1233, <10> 6.1386, <11> 6.6189, <12> 39.7488, <13> 36.4505, <14> 19.5744, <15> 3.0763, <16> 28.4923, <17> 13.5793, <18> 11.2505, <19> 44.9586, <20> 40.435;
param workload[JOB] := <1> 630.7482, <2> 2481.873, <3> 139.7337, <4> 65.1346, <5> 7.7908, <6> 2045.3278, <7> 7.7981, <8> 2081.2118, <9> 1774.3724, <10> 37.6824, <11> 43.8098, <12> 1579.9671, <13> 1328.639, <14> 383.1571, <15> 9.4636, <16> 811.8112, <17> 184.3974, <18> 126.5738, <19> 2021.2757, <20> 1634.9892;
param capacity[MACHINE] := <1> 17395.7567, <2> 17395.7567, <3> 17395.7567, <4> 17395.7567, <5> 17395.7567, <6> 17395.7567;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
