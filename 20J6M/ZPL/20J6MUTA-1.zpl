set JOB := {1 .. 20};
set MACHINE := {1 .. 6};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 5.8282, <2> 39.8057, <3> 27.9264, <4> 29.3088, <5> 30.0765, <6> 41.8131, <7> 49.5934, <8> 18.7184, <9> 34.3914, <10> 33.4944, <11> 18.2957, <12> 21.9473, <13> 22.6909, <14> 4.0744, <15> 42.3053, <16> 8.2724, <17> 10.4234, <18> 6.7486, <19> 30.863, <20> 3.3012;
param workload[JOB] := <1> 33.9679, <2> 1584.4938, <3> 779.8838, <4> 859.0058, <5> 904.5959, <6> 1748.3353, <7> 2459.5053, <8> 350.3785, <9> 1182.7684, <10> 1121.8748, <11> 334.7326, <12> 481.684, <13> 514.8769, <14> 16.6007, <15> 1789.7384, <16> 68.4326, <17> 108.6473, <18> 45.5436, <19> 952.5248, <20> 10.8979;
param capacity[MACHINE] := <1> 1918.5611, <2> 1918.5611, <3> 1918.5611, <4> 1918.5611, <5> 1918.5611, <6> 1918.5611;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
