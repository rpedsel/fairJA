set JOB := {1 .. 20};
set MACHINE := {1 .. 6};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 19.8015, <2> 49.8833, <3> 12.4222, <4> 31.679, <5> 32.7812, <6> 37.3173, <7> 23.4027, <8> 3.6553, <9> 0.2557, <10> 13.5209, <11> 38.8906, <12> 27.1725, <13> 42.8988, <14> 3.8638, <15> 1.3699, <16> 15.3384, <17> 23.5904, <18> 0.7122, <19> 44.4492, <20> 33.5965;
param workload[JOB] := <1> 392.0994, <2> 2488.3436, <3> 154.3111, <4> 1003.559, <5> 1074.6071, <6> 1392.5809, <7> 547.6864, <8> 13.3612, <9> 0.0654, <10> 182.8147, <11> 1512.4788, <12> 738.3448, <13> 1840.307, <14> 14.929, <15> 1.8766, <16> 235.2665, <17> 556.507, <18> 0.5072, <19> 1975.7314, <20> 1128.7248;
param capacity[MACHINE] := <1> 1906.7627, <2> 1906.7627, <3> 1906.7627, <4> 1906.7627, <5> 1906.7627, <6> 1906.7627;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
