set JOB := {1 .. 20};
set MACHINE := {1 .. 6};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 20.2703, <2> 14.7549, <3> 31.2768, <4> 17.7547, <5> 18.0576, <6> 27.2177, <7> 23.6738, <8> 28.0501, <9> 21.2031, <10> 18.7182, <11> 15.7183, <12> 19.5026, <13> 25.2717, <14> 21.7068, <15> 25.8316, <16> 17.1855, <17> 17.5568, <18> 26.2275, <19> 27.5706, <20> 30.2309;
param workload[JOB] := <1> 410.8851, <2> 217.7071, <3> 978.2382, <4> 315.2294, <5> 326.0769, <6> 740.8032, <7> 560.4488, <8> 786.8081, <9> 449.5714, <10> 350.371, <11> 247.065, <12> 380.3514, <13> 638.6588, <14> 471.1852, <15> 667.2716, <16> 295.3414, <17> 308.2412, <18> 687.8818, <19> 760.138, <20> 913.9073;
param capacity[MACHINE] := <1> 1313.2726, <2> 1313.2726, <3> 1313.2726, <4> 1313.2726, <5> 1313.2726, <6> 1313.2726;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
