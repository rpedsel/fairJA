set JOB := {1 .. 20};
set MACHINE := {1 .. 6};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 30.1388, <2> 28.7381, <3> 20.8265, <4> 10.0352, <5> 23.6819, <6> 16.9522, <7> 22.2872, <8> 11.7475, <9> 28.9319, <10> 33.8168, <11> 19.4553, <12> 21.219, <13> 25.3273, <14> 24.9505, <15> 23.6747, <16> 23.442, <17> 31.8828, <18> 28.2383, <19> 23.6171, <20> 16.325;
param workload[JOB] := <1> 908.3473, <2> 825.8784, <3> 433.7431, <4> 100.7052, <5> 560.8324, <6> 287.3771, <7> 496.7193, <8> 138.0038, <9> 837.0548, <10> 1143.576, <11> 378.5087, <12> 450.246, <13> 641.4721, <14> 622.5275, <15> 560.4914, <16> 549.5274, <17> 1016.5129, <18> 797.4016, <19> 557.7674, <20> 266.5056;
param capacity[MACHINE] := <1> 11573.198, <2> 11573.198, <3> 11573.198, <4> 11573.198, <5> 11573.198, <6> 11573.198;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
