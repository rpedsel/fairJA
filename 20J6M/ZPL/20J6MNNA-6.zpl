set JOB := {1 .. 20};
set MACHINE := {1 .. 6};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 30.811, <2> 27.2305, <3> 21.0032, <4> 24.0201, <5> 30.771, <6> 26.6099, <7> 24.8528, <8> 19.1388, <9> 25.5014, <10> 25.2527, <11> 24.8888, <12> 15.9211, <13> 26.1922, <14> 26.7769, <15> 24.9526, <16> 19.7927, <17> 18.1438, <18> 21.8103, <19> 26.8354, <20> 25.1882;
param workload[JOB] := <1> 949.3177, <2> 741.5001, <3> 441.1344, <4> 576.9652, <5> 946.8544, <6> 708.0868, <7> 617.6617, <8> 366.2937, <9> 650.3214, <10> 637.6989, <11> 619.4524, <12> 253.4814, <13> 686.0313, <14> 717.0024, <15> 622.6322, <16> 391.751, <17> 329.1975, <18> 475.6892, <19> 720.1387, <20> 634.4454;
param capacity[MACHINE] := <1> 12085.6558, <2> 12085.6558, <3> 12085.6558, <4> 12085.6558, <5> 12085.6558, <6> 12085.6558;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
