set JOB := {1 .. 20};
set MACHINE := {1 .. 6};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 29.0224, <2> 34.7854, <3> 4.2732, <4> 16.0488, <5> 48.2204, <6> 8.8424, <7> 39.9376, <8> 20.5008, <9> 32.2791, <10> 6.0157, <11> 36.8553, <12> 2.382, <13> 22.8409, <14> 9.3472, <15> 3.9529, <16> 0.4871, <17> 21.5496, <18> 48.3728, <19> 26.7829, <20> 10.4017;
param workload[JOB] := <1> 842.2997, <2> 1210.0241, <3> 18.2602, <4> 257.564, <5> 2325.207, <6> 78.188, <7> 1595.0119, <8> 420.2828, <9> 1041.9403, <10> 36.1886, <11> 1358.3131, <12> 5.6739, <13> 521.7067, <14> 87.3701, <15> 15.6254, <16> 0.2373, <17> 464.3853, <18> 2339.9278, <19> 717.3237, <20> 108.1954;
param capacity[MACHINE] := <1> 1680.4657, <2> 1680.4657, <3> 1680.4657, <4> 1680.4657, <5> 1680.4657, <6> 1680.4657;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
