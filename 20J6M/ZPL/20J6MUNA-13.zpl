set JOB := {1 .. 20};
set MACHINE := {1 .. 6};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 46.8477, <2> 5.821, <3> 43.0525, <4> 13.347, <5> 15.8181, <6> 42.3835, <7> 5.1667, <8> 34.5626, <9> 1.5821, <10> 34.8894, <11> 38.0878, <12> 9.1827, <13> 37.6739, <14> 24.6265, <15> 12.2256, <16> 33.0115, <17> 36.9945, <18> 15.3064, <19> 23.4981, <20> 26.0785;
param workload[JOB] := <1> 2194.707, <2> 33.884, <3> 1853.5178, <4> 178.1424, <5> 250.2123, <6> 1796.3611, <7> 26.6948, <8> 1194.5733, <9> 2.503, <10> 1217.2702, <11> 1450.6805, <12> 84.322, <13> 1419.3227, <14> 606.4645, <15> 149.4653, <16> 1089.7591, <17> 1368.593, <18> 234.2859, <19> 552.1607, <20> 680.0882;
param capacity[MACHINE] := <1> 16383.0078, <2> 16383.0078, <3> 16383.0078, <4> 16383.0078, <5> 16383.0078, <6> 16383.0078;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
