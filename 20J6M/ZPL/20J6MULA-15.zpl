set JOB := {1 .. 20};
set MACHINE := {1 .. 6};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 24.9018, <2> 9.176, <3> 32.5336, <4> 8.1056, <5> 46.7008, <6> 25.7652, <7> 1.6635, <8> 15.132, <9> 6.2214, <10> 5.2297, <11> 14.8447, <12> 49.4195, <13> 15.5212, <14> 28.4406, <15> 37.9172, <16> 29.3923, <17> 11.9317, <18> 0.1959, <19> 17.6828, <20> 8.234;
param workload[JOB] := <1> 620.0996, <2> 84.199, <3> 1058.4351, <4> 65.7008, <5> 2180.9647, <6> 663.8455, <7> 2.7672, <8> 228.9774, <9> 38.7058, <10> 27.3498, <11> 220.3651, <12> 2442.287, <13> 240.9076, <14> 808.8677, <15> 1437.7141, <16> 863.9073, <17> 142.3655, <18> 0.0384, <19> 312.6814, <20> 67.7988;
param capacity[MACHINE] := <1> 1917.9963, <2> 1917.9963, <3> 1917.9963, <4> 1917.9963, <5> 1917.9963, <6> 1917.9963;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
