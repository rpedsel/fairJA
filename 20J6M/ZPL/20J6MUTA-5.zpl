set JOB := {1 .. 20};
set MACHINE := {1 .. 6};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 14.3684, <2> 38.084, <3> 5.4083, <4> 36.0948, <5> 32.2628, <6> 17.6001, <7> 45.5426, <8> 47.0292, <9> 36.8349, <10> 1.914, <11> 19.5407, <12> 18.6776, <13> 2.7599, <14> 34.7158, <15> 33.0561, <16> 35.4251, <17> 49.7225, <18> 0.8324, <19> 34.7716, <20> 18.2614;
param workload[JOB] := <1> 206.4509, <2> 1450.3911, <3> 29.2497, <4> 1302.8346, <5> 1040.8883, <6> 309.7635, <7> 2074.1284, <8> 2211.7457, <9> 1356.8099, <10> 3.6634, <11> 381.839, <12> 348.8527, <13> 7.617, <14> 1205.1868, <15> 1092.7057, <16> 1254.9377, <17> 2472.327, <18> 0.6929, <19> 1209.0642, <20> 333.4787;
param capacity[MACHINE] := <1> 2286.5784, <2> 2286.5784, <3> 2286.5784, <4> 2286.5784, <5> 2286.5784, <6> 2286.5784;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
