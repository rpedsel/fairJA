set JOB := {1 .. 20};
set MACHINE := {1 .. 6};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 22.6848, <2> 26.098, <3> 24.8945, <4> 13.0379, <5> 24.2047, <6> 18.6486, <7> 27.3019, <8> 30.6265, <9> 39.2262, <10> 20.7611, <11> 23.4766, <12> 20.8288, <13> 25.6026, <14> 13.9279, <15> 26.9047, <16> 23.5969, <17> 24.4356, <18> 20.5286, <19> 26.5045, <20> 31.6173;
param workload[JOB] := <1> 514.6002, <2> 681.1056, <3> 619.7361, <4> 169.9868, <5> 585.8675, <6> 347.7703, <7> 745.3937, <8> 937.9825, <9> 1538.6948, <10> 431.0233, <11> 551.1507, <12> 433.8389, <13> 655.4931, <14> 193.9864, <15> 723.8629, <16> 556.8137, <17> 597.0985, <18> 421.4234, <19> 702.4885, <20> 999.6537;
param capacity[MACHINE] := <1> 1550.9963, <2> 1550.9963, <3> 1550.9963, <4> 1550.9963, <5> 1550.9963, <6> 1550.9963;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
