set JOB := {1 .. 20};
set MACHINE := {1 .. 6};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 20.9656, <2> 28.2384, <3> 24.0092, <4> 24.4947, <5> 21.9097, <6> 25.3694, <7> 23.7956, <8> 17.5195, <9> 26.442, <10> 29.2367, <11> 28.6475, <12> 25.6094, <13> 29.1061, <14> 25.5284, <15> 13.4637, <16> 30.2923, <17> 14.2562, <18> 27.5255, <19> 24.1367, <20> 26.4264;
param workload[JOB] := <1> 439.5564, <2> 797.4072, <3> 576.4417, <4> 599.9903, <5> 480.035, <6> 643.6065, <7> 566.2306, <8> 306.9329, <9> 699.1794, <10> 854.7846, <11> 820.6793, <12> 655.8414, <13> 847.1651, <14> 651.6992, <15> 181.2712, <16> 917.6234, <17> 203.2392, <18> 757.6532, <19> 582.5803, <20> 698.3546;
param capacity[MACHINE] := <1> 12280.2715, <2> 12280.2715, <3> 12280.2715, <4> 12280.2715, <5> 12280.2715, <6> 12280.2715;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
