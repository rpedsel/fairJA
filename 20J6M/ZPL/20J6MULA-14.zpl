set JOB := {1 .. 20};
set MACHINE := {1 .. 6};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 12.1011, <2> 32.6423, <3> 0.6701, <4> 43.7593, <5> 43.5131, <6> 17.6224, <7> 12.8682, <8> 25.1764, <9> 1.8737, <10> 17.0221, <11> 22.5709, <12> 34.4302, <13> 41.2864, <14> 35.1704, <15> 33.7974, <16> 34.1718, <17> 32.907, <18> 45.8191, <19> 8.0728, <20> 8.279;
param workload[JOB] := <1> 146.4366, <2> 1065.5197, <3> 0.449, <4> 1914.8763, <5> 1893.3899, <6> 310.549, <7> 165.5906, <8> 633.8511, <9> 3.5108, <10> 289.7519, <11> 509.4455, <12> 1185.4387, <13> 1704.5668, <14> 1236.957, <15> 1142.2642, <16> 1167.7119, <17> 1082.8706, <18> 2099.3899, <19> 65.1701, <20> 68.5418;
param capacity[MACHINE] := <1> 2781.0469, <2> 2781.0469, <3> 2781.0469, <4> 2781.0469, <5> 2781.0469, <6> 2781.0469;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
