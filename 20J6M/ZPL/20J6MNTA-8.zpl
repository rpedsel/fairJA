set JOB := {1 .. 20};
set MACHINE := {1 .. 6};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 26.7181, <2> 28.443, <3> 23.826, <4> 28.1738, <5> 27.7115, <6> 25.8874, <7> 30.526, <8> 26.635, <9> 30.1275, <10> 22.9543, <11> 22.0613, <12> 20.971, <13> 30.4954, <14> 24.5525, <15> 24.291, <16> 32.5473, <17> 33.265, <18> 24.0924, <19> 31.1795, <20> 27.7706;
param workload[JOB] := <1> 713.8569, <2> 809.0042, <3> 567.6783, <4> 793.763, <5> 767.9272, <6> 670.1575, <7> 931.8367, <8> 709.4232, <9> 907.6663, <10> 526.8999, <11> 486.701, <12> 439.7828, <13> 929.9694, <14> 602.8253, <15> 590.0527, <16> 1059.3267, <17> 1106.5602, <18> 580.4437, <19> 972.1612, <20> 771.2062;
param capacity[MACHINE] := <1> 1867.1553, <2> 1867.1553, <3> 1867.1553, <4> 1867.1553, <5> 1867.1553, <6> 1867.1553;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
