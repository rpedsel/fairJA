set JOB := {1 .. 20};
set MACHINE := {1 .. 6};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 17.3292, <2> 23.5828, <3> 30.4722, <4> 16.9224, <5> 26.6149, <6> 25.3972, <7> 24.6241, <8> 25.9541, <9> 25.9585, <10> 27.9458, <11> 12.4817, <12> 27.3771, <13> 28.1203, <14> 30.2216, <15> 31.7757, <16> 27.561, <17> 31.6884, <18> 32.6548, <19> 22.3787, <20> 25.3289;
param workload[JOB] := <1> 300.3012, <2> 556.1485, <3> 928.555, <4> 286.3676, <5> 708.3529, <6> 645.0178, <7> 606.3463, <8> 673.6153, <9> 673.8437, <10> 780.9677, <11> 155.7928, <12> 749.5056, <13> 790.7513, <14> 913.3451, <15> 1009.6951, <16> 759.6087, <17> 1004.1547, <18> 1066.336, <19> 500.8062, <20> 641.5532;
param capacity[MACHINE] := <1> 2291.8441, <2> 2291.8441, <3> 2291.8441, <4> 2291.8441, <5> 2291.8441, <6> 2291.8441;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
