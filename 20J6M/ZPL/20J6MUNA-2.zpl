set JOB := {1 .. 20};
set MACHINE := {1 .. 6};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 17.0562, <2> 5.4706, <3> 31.1959, <4> 16.7114, <5> 23.8141, <6> 14.1599, <7> 30.6455, <8> 43.0578, <9> 36.909, <10> 21.5232, <11> 2.4745, <12> 2.4741, <13> 44.8521, <14> 27.1026, <15> 12.3084, <16> 3.3121, <17> 24.4665, <18> 36.667, <19> 15.3235, <20> 2.6956;
param workload[JOB] := <1> 290.914, <2> 29.9275, <3> 973.1842, <4> 279.2709, <5> 567.1114, <6> 200.5028, <7> 939.1467, <8> 1853.9741, <9> 1362.2743, <10> 463.2481, <11> 6.1232, <12> 6.1212, <13> 2011.7109, <14> 734.5509, <15> 151.4967, <16> 10.97, <17> 598.6096, <18> 1344.4689, <19> 234.8097, <20> 7.2663;
param capacity[MACHINE] := <1> 12065.6814, <2> 12065.6814, <3> 12065.6814, <4> 12065.6814, <5> 12065.6814, <6> 12065.6814;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
