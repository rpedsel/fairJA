set JOB := {1 .. 20};
set MACHINE := {1 .. 6};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 20.8937, <2> 27.3006, <3> 32.7845, <4> 28.0973, <5> 31.4875, <6> 15.7562, <7> 26.0767, <8> 38.5738, <9> 19.1604, <10> 24.2951, <11> 29.6701, <12> 28.4971, <13> 23.5985, <14> 22.4626, <15> 29.7764, <16> 26.5168, <17> 22.3751, <18> 26.4154, <19> 19.5341, <20> 29.0662;
param workload[JOB] := <1> 436.5467, <2> 745.3228, <3> 1074.8234, <4> 789.4583, <5> 991.4627, <6> 248.2578, <7> 679.9943, <8> 1487.938, <9> 367.1209, <10> 590.2519, <11> 880.3148, <12> 812.0847, <13> 556.8892, <14> 504.5684, <15> 886.634, <16> 703.1407, <17> 500.6451, <18> 697.7734, <19> 381.5811, <20> 844.844;
param capacity[MACHINE] := <1> 14179.6522, <2> 14179.6522, <3> 14179.6522, <4> 14179.6522, <5> 14179.6522, <6> 14179.6522;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
