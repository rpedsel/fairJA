set JOB := {1 .. 20};
set MACHINE := {1 .. 6};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 33.211, <2> 26.5836, <3> 26.0478, <4> 29.9001, <5> 28.98, <6> 18.263, <7> 22.365, <8> 24.9748, <9> 17.5174, <10> 24.2239, <11> 23.0963, <12> 34.4102, <13> 16.2302, <14> 27.2902, <15> 30.9911, <16> 28.9483, <17> 20.2866, <18> 33.5635, <19> 29.9737, <20> 24.2624;
param workload[JOB] := <1> 1102.9705, <2> 706.6878, <3> 678.4879, <4> 894.016, <5> 839.8404, <6> 333.5372, <7> 500.1932, <8> 623.7406, <9> 306.8593, <10> 586.7973, <11> 533.4391, <12> 1184.0619, <13> 263.4194, <14> 744.755, <15> 960.4483, <16> 838.0041, <17> 411.5461, <18> 1126.5085, <19> 898.4227, <20> 588.6641;
param capacity[MACHINE] := <1> 14122.3994, <2> 14122.3994, <3> 14122.3994, <4> 14122.3994, <5> 14122.3994, <6> 14122.3994;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
