set JOB := {1 .. 20};
set MACHINE := {1 .. 6};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 20.8779, <2> 42.3989, <3> 3.4207, <4> 1.1066, <5> 3.0725, <6> 28.0258, <7> 20.2363, <8> 37.2799, <9> 46.4048, <10> 19.8523, <11> 42.8266, <12> 28.5183, <13> 14.4418, <14> 46.6035, <15> 7.7592, <16> 48.7156, <17> 3.7011, <18> 36.5462, <19> 34.6501, <20> 16.7917;
param workload[JOB] := <1> 435.8867, <2> 1797.6667, <3> 11.7012, <4> 1.2246, <5> 9.4403, <6> 785.4455, <7> 409.5078, <8> 1389.7909, <9> 2153.4055, <10> 394.1138, <11> 1834.1177, <12> 813.2934, <13> 208.5656, <14> 2171.8862, <15> 60.2052, <16> 2373.2097, <17> 13.6981, <18> 1335.6247, <19> 1200.6294, <20> 281.9612;
param capacity[MACHINE] := <1> 2946.8957, <2> 2946.8957, <3> 2946.8957, <4> 2946.8957, <5> 2946.8957, <6> 2946.8957;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
