set JOB := {1 .. 20};
set MACHINE := {1 .. 6};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 23.7687, <2> 22.4563, <3> 27.1067, <4> 20.5038, <5> 34.3835, <6> 20.3249, <7> 17.2238, <8> 29.1404, <9> 12.7743, <10> 33.0572, <11> 16.6714, <12> 27.2203, <13> 27.7849, <14> 32.4453, <15> 30.21, <16> 26.3204, <17> 16.8054, <18> 20.5753, <19> 19.4245, <20> 30.4827;
param workload[JOB] := <1> 564.9511, <2> 504.2854, <3> 734.7732, <4> 420.4058, <5> 1182.2251, <6> 413.1016, <7> 296.6593, <8> 849.1629, <9> 163.1827, <10> 1092.7785, <11> 277.9356, <12> 740.9447, <13> 772.0007, <14> 1052.6975, <15> 912.6441, <16> 692.7635, <17> 282.4215, <18> 423.343, <19> 377.3112, <20> 929.195;
param capacity[MACHINE] := <1> 2113.7971, <2> 2113.7971, <3> 2113.7971, <4> 2113.7971, <5> 2113.7971, <6> 2113.7971;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
