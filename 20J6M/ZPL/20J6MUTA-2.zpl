set JOB := {1 .. 20};
set MACHINE := {1 .. 6};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 3.3409, <2> 5.1435, <3> 7.8321, <4> 27.4803, <5> 5.4673, <6> 49.7276, <7> 19.1072, <8> 16.3778, <9> 2.0877, <10> 29.1473, <11> 37.3497, <12> 0.2579, <13> 40.1953, <14> 49.4098, <15> 11.1181, <16> 33.4951, <17> 34.7895, <18> 2.2584, <19> 30.6504, <20> 20.7487;
param workload[JOB] := <1> 11.1616, <2> 26.4556, <3> 61.3418, <4> 755.1669, <5> 29.8914, <6> 2472.8342, <7> 365.0851, <8> 268.2323, <9> 4.3585, <10> 849.5651, <11> 1395.0001, <12> 0.0665, <13> 1615.6621, <14> 2441.3283, <15> 123.6121, <16> 1121.9217, <17> 1210.3093, <18> 5.1004, <19> 939.447, <20> 430.5086;
param capacity[MACHINE] := <1> 1765.8811, <2> 1765.8811, <3> 1765.8811, <4> 1765.8811, <5> 1765.8811, <6> 1765.8811;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
