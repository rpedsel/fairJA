set JOB := {1 .. 20};
set MACHINE := {1 .. 6};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 25.5528, <2> 17.3917, <3> 27.2804, <4> 29.7886, <5> 27.3708, <6> 28.64, <7> 24.9794, <8> 16.0022, <9> 24.9188, <10> 32.0032, <11> 29.5367, <12> 20.2889, <13> 21.8843, <14> 20.9372, <15> 25.2778, <16> 26.0122, <17> 28.6222, <18> 23.1236, <19> 30.2965, <20> 27.0748;
param workload[JOB] := <1> 652.9456, <2> 302.4712, <3> 744.2202, <4> 887.3607, <5> 749.1607, <6> 820.2496, <7> 623.9704, <8> 256.0704, <9> 620.9466, <10> 1024.2048, <11> 872.4166, <12> 411.6395, <13> 478.9226, <14> 438.3663, <15> 638.9672, <16> 676.6345, <17> 819.2303, <18> 534.7009, <19> 917.8779, <20> 733.0448;
param capacity[MACHINE] := <1> 2200.5668, <2> 2200.5668, <3> 2200.5668, <4> 2200.5668, <5> 2200.5668, <6> 2200.5668;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
