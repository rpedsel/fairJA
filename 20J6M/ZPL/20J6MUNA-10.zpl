set JOB := {1 .. 20};
set MACHINE := {1 .. 6};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 31.6839, <2> 13.484, <3> 11.4343, <4> 46.0349, <5> 8.7156, <6> 43.0905, <7> 25.7645, <8> 10.4941, <9> 43.1934, <10> 32.7255, <11> 26.6143, <12> 33.6587, <13> 31.5171, <14> 2.8155, <15> 13.695, <16> 28.5889, <17> 23.1935, <18> 2.9696, <19> 7.1572, <20> 23.7271;
param workload[JOB] := <1> 1003.8695, <2> 181.8183, <3> 130.7432, <4> 2119.212, <5> 75.9617, <6> 1856.7912, <7> 663.8095, <8> 110.1261, <9> 1865.6698, <10> 1070.9584, <11> 708.321, <12> 1132.9081, <13> 993.3276, <14> 7.927, <15> 187.553, <16> 817.3252, <17> 537.9384, <18> 8.8185, <19> 51.2255, <20> 562.9753;
param capacity[MACHINE] := <1> 14087.2793, <2> 14087.2793, <3> 14087.2793, <4> 14087.2793, <5> 14087.2793, <6> 14087.2793;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
