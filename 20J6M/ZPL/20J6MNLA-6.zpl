set JOB := {1 .. 20};
set MACHINE := {1 .. 6};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 28.1945, <2> 24.9493, <3> 28.6267, <4> 20.3262, <5> 22.8825, <6> 26.0311, <7> 17.6103, <8> 30.2786, <9> 31.6108, <10> 21.6985, <11> 11.5272, <12> 24.9875, <13> 21.3807, <14> 23.6939, <15> 22.0441, <16> 20.6632, <17> 18.5678, <18> 32.8475, <19> 30.8214, <20> 15.3126;
param workload[JOB] := <1> 794.9298, <2> 622.4676, <3> 819.488, <4> 413.1544, <5> 523.6088, <6> 677.6182, <7> 310.1227, <8> 916.7936, <9> 999.2427, <10> 470.8249, <11> 132.8763, <12> 624.3752, <13> 457.1343, <14> 561.4009, <15> 485.9423, <16> 426.9678, <17> 344.7632, <18> 1078.9583, <19> 949.9587, <20> 234.4757;
param capacity[MACHINE] := <1> 1974.1839, <2> 1974.1839, <3> 1974.1839, <4> 1974.1839, <5> 1974.1839, <6> 1974.1839;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
