set JOB := {1 .. 20};
set MACHINE := {1 .. 6};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 25.3875, <2> 19.894, <3> 30.6503, <4> 25.3369, <5> 24.8481, <6> 26.8629, <7> 30.2295, <8> 22.7624, <9> 22.3002, <10> 21.6895, <11> 19.2571, <12> 29.2041, <13> 29.1854, <14> 19.5485, <15> 22.1861, <16> 20.9472, <17> 25.5965, <18> 29.3419, <19> 23.2739, <20> 27.3232;
param workload[JOB] := <1> 25.3875, <2> 19.894, <3> 30.6503, <4> 25.3369, <5> 24.8481, <6> 26.8629, <7> 30.2295, <8> 22.7624, <9> 22.3002, <10> 21.6895, <11> 19.2571, <12> 29.2041, <13> 29.1854, <14> 19.5485, <15> 22.1861, <16> 20.9472, <17> 25.5965, <18> 29.3419, <19> 23.2739, <20> 27.3232;
param capacity[MACHINE] := <1> 495.8252, <2> 495.8252, <3> 495.8252, <4> 495.8252, <5> 495.8252, <6> 495.8252;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
