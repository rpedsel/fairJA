set JOB := {1 .. 20};
set MACHINE := {1 .. 6};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 32.6356, <2> 21.5291, <3> 22.2792, <4> 31.5151, <5> 23.4564, <6> 21.0896, <7> 25.8045, <8> 25.4728, <9> 17.3255, <10> 23.9586, <11> 21.4355, <12> 19.6767, <13> 31.8857, <14> 32.8152, <15> 20.428, <16> 29.0054, <17> 31.2256, <18> 23.4236, <19> 18.6121, <20> 16.8323;
param workload[JOB] := <1> 32.6356, <2> 21.5291, <3> 22.2792, <4> 31.5151, <5> 23.4564, <6> 21.0896, <7> 25.8045, <8> 25.4728, <9> 17.3255, <10> 23.9586, <11> 21.4355, <12> 19.6767, <13> 31.8857, <14> 32.8152, <15> 20.428, <16> 29.0054, <17> 31.2256, <18> 23.4236, <19> 18.6121, <20> 16.8323;
param capacity[MACHINE] := <1> 490.4065, <2> 490.4065, <3> 490.4065, <4> 490.4065, <5> 490.4065, <6> 490.4065;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
