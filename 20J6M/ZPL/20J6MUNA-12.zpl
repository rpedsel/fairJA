set JOB := {1 .. 20};
set MACHINE := {1 .. 6};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 14.8166, <2> 0.9617, <3> 12.9783, <4> 37.2237, <5> 47.6484, <6> 20.0382, <7> 19.9129, <8> 35.0649, <9> 5.9225, <10> 39.1382, <11> 9.5494, <12> 2.6879, <13> 30.3847, <14> 8.071, <15> 23.532, <16> 49.8655, <17> 9.4942, <18> 4.8252, <19> 1.8692, <20> 6.0874;
param workload[JOB] := <1> 219.5316, <2> 0.9249, <3> 168.4363, <4> 1385.6038, <5> 2270.37, <6> 401.5295, <7> 396.5236, <8> 1229.5472, <9> 35.076, <10> 1531.7987, <11> 91.191, <12> 7.2248, <13> 923.23, <14> 65.141, <15> 553.755, <16> 2486.5681, <17> 90.1398, <18> 23.2826, <19> 3.4939, <20> 37.0564;
param capacity[MACHINE] := <1> 11920.4242, <2> 11920.4242, <3> 11920.4242, <4> 11920.4242, <5> 11920.4242, <6> 11920.4242;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
