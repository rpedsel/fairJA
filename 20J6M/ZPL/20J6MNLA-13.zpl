set JOB := {1 .. 20};
set MACHINE := {1 .. 6};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 19.1112, <2> 22.3859, <3> 21.3543, <4> 34.1894, <5> 25.9492, <6> 36.9132, <7> 26.3945, <8> 28.0716, <9> 22.0627, <10> 22.6773, <11> 30.4078, <12> 32.5424, <13> 29.9143, <14> 13.3156, <15> 36.4258, <16> 24.9801, <17> 22.6361, <18> 17.848, <19> 29.9311, <20> 25.9298;
param workload[JOB] := <1> 365.238, <2> 501.1285, <3> 456.0061, <4> 1168.9151, <5> 673.361, <6> 1362.5843, <7> 696.6696, <8> 788.0147, <9> 486.7627, <10> 514.2599, <11> 924.6343, <12> 1059.0078, <13> 894.8653, <14> 177.3052, <15> 1326.8389, <16> 624.0054, <17> 512.393, <18> 318.5511, <19> 895.8707, <20> 672.3545;
param capacity[MACHINE] := <1> 2403.1277, <2> 2403.1277, <3> 2403.1277, <4> 2403.1277, <5> 2403.1277, <6> 2403.1277;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
