set JOB := {1 .. 20};
set MACHINE := {1 .. 6};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 13.1526, <2> 17.6159, <3> 23.9616, <4> 22.0585, <5> 27.9162, <6> 29.0495, <7> 17.074, <8> 27.2536, <9> 26.4397, <10> 30.9262, <11> 18.2955, <12> 23.1966, <13> 18.5725, <14> 26.1297, <15> 21.945, <16> 26.1867, <17> 30.6402, <18> 27.6323, <19> 28.4966, <20> 32.3124;
param workload[JOB] := <1> 172.9909, <2> 310.3199, <3> 574.1583, <4> 486.5774, <5> 779.3142, <6> 843.8735, <7> 291.5215, <8> 742.7587, <9> 699.0577, <10> 956.4298, <11> 334.7253, <12> 538.0823, <13> 344.9378, <14> 682.7612, <15> 481.583, <16> 685.7433, <17> 938.8219, <18> 763.544, <19> 812.0562, <20> 1044.0912;
param capacity[MACHINE] := <1> 1560.4185, <2> 1560.4185, <3> 1560.4185, <4> 1560.4185, <5> 1560.4185, <6> 1560.4185;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
