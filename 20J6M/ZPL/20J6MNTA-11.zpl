set JOB := {1 .. 20};
set MACHINE := {1 .. 6};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 31.2202, <2> 33.7221, <3> 36.5655, <4> 23.707, <5> 23.363, <6> 29.6244, <7> 22.2275, <8> 29.3221, <9> 30.7472, <10> 19.4318, <11> 23.7054, <12> 26.2195, <13> 18.3569, <14> 30.1646, <15> 32.9161, <16> 29.4764, <17> 26.9969, <18> 25.7422, <19> 28.3435, <20> 17.9951;
param workload[JOB] := <1> 974.7009, <2> 1137.18, <3> 1337.0358, <4> 562.0218, <5> 545.8298, <6> 877.6051, <7> 494.0618, <8> 859.7855, <9> 945.3903, <10> 377.5949, <11> 561.946, <12> 687.4622, <13> 336.9758, <14> 909.9031, <15> 1083.4696, <16> 868.8582, <17> 728.8326, <18> 662.6609, <19> 803.354, <20> 323.8236;
param capacity[MACHINE] := <1> 1884.8115, <2> 1884.8115, <3> 1884.8115, <4> 1884.8115, <5> 1884.8115, <6> 1884.8115;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
