set JOB := {1 .. 20};
set MACHINE := {1 .. 6};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 23.1185, <2> 20.9068, <3> 24.222, <4> 19.0665, <5> 17.7975, <6> 24.5566, <7> 21.4997, <8> 25.7967, <9> 27.3503, <10> 24.4761, <11> 31.0713, <12> 22.6568, <13> 22.5694, <14> 18.5044, <15> 30.5554, <16> 23.2603, <17> 27.8383, <18> 19.6984, <19> 24.3079, <20> 26.9588;
param workload[JOB] := <1> 534.465, <2> 437.0943, <3> 586.7053, <4> 363.5314, <5> 316.751, <6> 603.0266, <7> 462.2371, <8> 665.4697, <9> 748.0389, <10> 599.0795, <11> 965.4257, <12> 513.3306, <13> 509.3778, <14> 342.4128, <15> 933.6325, <16> 541.0416, <17> 774.9709, <18> 388.027, <19> 590.874, <20> 726.7769;
param capacity[MACHINE] := <1> 1450.2835, <2> 1450.2835, <3> 1450.2835, <4> 1450.2835, <5> 1450.2835, <6> 1450.2835;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
