set JOB := {1 .. 20};
set MACHINE := {1 .. 6};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 34.4281, <2> 31.761, <3> 33.8444, <4> 8.0823, <5> 3.6014, <6> 12.5642, <7> 49.5948, <8> 25.8366, <9> 35.0758, <10> 21.2429, <11> 9.4881, <12> 34.1246, <13> 9.3168, <14> 47.2862, <15> 22.6537, <16> 42.9478, <17> 32.4574, <18> 2.8595, <19> 6.502, <20> 27.0208;
param workload[JOB] := <1> 1185.2941, <2> 1008.7611, <3> 1145.4434, <4> 65.3236, <5> 12.9701, <6> 157.8591, <7> 2459.6442, <8> 667.5299, <9> 1230.3117, <10> 451.2608, <11> 90.024, <12> 1164.4883, <13> 86.8028, <14> 2235.9847, <15> 513.1901, <16> 1844.5135, <17> 1053.4828, <18> 8.1767, <19> 42.276, <20> 730.1236;
param capacity[MACHINE] := <1> 2692.2434, <2> 2692.2434, <3> 2692.2434, <4> 2692.2434, <5> 2692.2434, <6> 2692.2434;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
