set JOB := {1 .. 20};
set MACHINE := {1 .. 6};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 29.7423, <2> 21.5967, <3> 16.1994, <4> 18.2292, <5> 27.1998, <6> 29.2637, <7> 28.8708, <8> 26.6004, <9> 28.8643, <10> 20.5194, <11> 25.585, <12> 24.5945, <13> 22.6153, <14> 19.6874, <15> 20.4928, <16> 25.2965, <17> 20.2439, <18> 25.9327, <19> 23.8619, <20> 23.8133;
param workload[JOB] := <1> 29.7423, <2> 21.5967, <3> 16.1994, <4> 18.2292, <5> 27.1998, <6> 29.2637, <7> 28.8708, <8> 26.6004, <9> 28.8643, <10> 20.5194, <11> 25.585, <12> 24.5945, <13> 22.6153, <14> 19.6874, <15> 20.4928, <16> 25.2965, <17> 20.2439, <18> 25.9327, <19> 23.8619, <20> 23.8133;
param capacity[MACHINE] := <1> 479.2093, <2> 479.2093, <3> 479.2093, <4> 479.2093, <5> 479.2093, <6> 479.2093;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
