set JOB := {1 .. 20};
set MACHINE := {1 .. 6};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 25.4439, <2> 26.0889, <3> 20.0238, <4> 25.4097, <5> 25.9837, <6> 34.3798, <7> 22.837, <8> 30.8035, <9> 22.5027, <10> 36.2625, <11> 17.8564, <12> 27.1105, <13> 29.0626, <14> 24.9512, <15> 25.4663, <16> 29.8395, <17> 32.5066, <18> 26.8369, <19> 26.3673, <20> 28.6757;
param workload[JOB] := <1> 647.392, <2> 680.6307, <3> 400.9526, <4> 645.6529, <5> 675.1527, <6> 1181.9706, <7> 521.5286, <8> 948.8556, <9> 506.3715, <10> 1314.9689, <11> 318.851, <12> 734.9792, <13> 844.6347, <14> 622.5624, <15> 648.5324, <16> 890.3958, <17> 1056.679, <18> 720.2192, <19> 695.2345, <20> 822.2958;
param capacity[MACHINE] := <1> 14877.8601, <2> 14877.8601, <3> 14877.8601, <4> 14877.8601, <5> 14877.8601, <6> 14877.8601;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
