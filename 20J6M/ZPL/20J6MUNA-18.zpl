set JOB := {1 .. 20};
set MACHINE := {1 .. 6};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 5.5718, <2> 22.1784, <3> 48.3691, <4> 47.3389, <5> 38.155, <6> 11.9501, <7> 17.6473, <8> 40.7489, <9> 41.3635, <10> 49.5053, <11> 14.742, <12> 6.2581, <13> 29.6643, <14> 48.0205, <15> 22.9934, <16> 43.2855, <17> 11.2506, <18> 25.2983, <19> 9.8258, <20> 12.6476;
param workload[JOB] := <1> 31.045, <2> 491.8814, <3> 2339.5698, <4> 2240.9715, <5> 1455.804, <6> 142.8049, <7> 311.4272, <8> 1660.4729, <9> 1710.9391, <10> 2450.7747, <11> 217.3266, <12> 39.1638, <13> 879.9707, <14> 2305.9684, <15> 528.6964, <16> 1873.6345, <17> 126.576, <18> 640.004, <19> 96.5463, <20> 159.9618;
param capacity[MACHINE] := <1> 19703.539, <2> 19703.539, <3> 19703.539, <4> 19703.539, <5> 19703.539, <6> 19703.539;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
