set JOB := {1 .. 20};
set MACHINE := {1 .. 6};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 21.8163, <2> 25.5075, <3> 23.961, <4> 15.8956, <5> 34.4902, <6> 28.3568, <7> 30.4388, <8> 20.2716, <9> 22.2692, <10> 27.2085, <11> 20.1056, <12> 23.9005, <13> 36.8116, <14> 25.2249, <15> 29.1879, <16> 33.7065, <17> 29.8861, <18> 23.8498, <19> 16.1174, <20> 32.531;
param workload[JOB] := <1> 21.8163, <2> 25.5075, <3> 23.961, <4> 15.8956, <5> 34.4902, <6> 28.3568, <7> 30.4388, <8> 20.2716, <9> 22.2692, <10> 27.2085, <11> 20.1056, <12> 23.9005, <13> 36.8116, <14> 25.2249, <15> 29.1879, <16> 33.7065, <17> 29.8861, <18> 23.8498, <19> 16.1174, <20> 32.531;
param capacity[MACHINE] := <1> 521.5368, <2> 521.5368, <3> 521.5368, <4> 521.5368, <5> 521.5368, <6> 521.5368;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
