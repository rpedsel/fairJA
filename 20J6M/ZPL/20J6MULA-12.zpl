set JOB := {1 .. 20};
set MACHINE := {1 .. 6};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 20.4637, <2> 13.6615, <3> 34.5217, <4> 11.1408, <5> 28.8585, <6> 45.8591, <7> 25.2566, <8> 19.4118, <9> 14.8959, <10> 42.452, <11> 1.7527, <12> 23.6846, <13> 14.3619, <14> 22.1157, <15> 15.4338, <16> 3.5569, <17> 6.9102, <18> 30.1401, <19> 40.9536, <20> 23.6133;
param workload[JOB] := <1> 418.763, <2> 186.6366, <3> 1191.7478, <4> 124.1174, <5> 832.813, <6> 2103.0571, <7> 637.8958, <8> 376.818, <9> 221.8878, <10> 1802.1723, <11> 3.072, <12> 560.9603, <13> 206.2642, <14> 489.1042, <15> 238.2022, <16> 12.6515, <17> 47.7509, <18> 908.4256, <19> 1677.1974, <20> 557.5879;
param capacity[MACHINE] := <1> 2099.5208, <2> 2099.5208, <3> 2099.5208, <4> 2099.5208, <5> 2099.5208, <6> 2099.5208;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
