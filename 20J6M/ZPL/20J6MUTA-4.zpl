set JOB := {1 .. 20};
set MACHINE := {1 .. 6};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 38.0874, <2> 25.729, <3> 8.1511, <4> 21.7559, <5> 48.8138, <6> 12.0358, <7> 32.7645, <8> 29.539, <9> 6.8666, <10> 19.6984, <11> 19.0132, <12> 38.9498, <13> 46.7656, <14> 6.5567, <15> 35.4856, <16> 39.1531, <17> 43.2406, <18> 44.326, <19> 8.8062, <20> 40.1273;
param workload[JOB] := <1> 1450.65, <2> 661.9814, <3> 66.4404, <4> 473.3192, <5> 2382.7871, <6> 144.8605, <7> 1073.5125, <8> 872.5525, <9> 47.1502, <10> 388.027, <11> 361.5018, <12> 1517.0869, <13> 2187.0213, <14> 42.9903, <15> 1259.2278, <16> 1532.9652, <17> 1869.7495, <18> 1964.7943, <19> 77.5492, <20> 1610.2002;
param capacity[MACHINE] := <1> 2498.0459, <2> 2498.0459, <3> 2498.0459, <4> 2498.0459, <5> 2498.0459, <6> 2498.0459;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
