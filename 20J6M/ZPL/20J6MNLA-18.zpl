set JOB := {1 .. 20};
set MACHINE := {1 .. 6};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 29.1589, <2> 27.839, <3> 38.5133, <4> 23.7266, <5> 14.0634, <6> 18.2848, <7> 24.6675, <8> 26.2915, <9> 22.5437, <10> 23.8301, <11> 22.2944, <12> 31.9963, <13> 31.8943, <14> 17.9189, <15> 20.9353, <16> 23.2092, <17> 21.2711, <18> 19.1376, <19> 32.9408, <20> 29.8039;
param workload[JOB] := <1> 850.2414, <2> 775.0099, <3> 1483.2743, <4> 562.9515, <5> 197.7792, <6> 334.3339, <7> 608.4856, <8> 691.243, <9> 508.2184, <10> 567.8737, <11> 497.0403, <12> 1023.7632, <13> 1017.2464, <14> 321.087, <15> 438.2868, <16> 538.667, <17> 452.4597, <18> 366.2477, <19> 1085.0963, <20> 888.2725;
param capacity[MACHINE] := <1> 2201.263, <2> 2201.263, <3> 2201.263, <4> 2201.263, <5> 2201.263, <6> 2201.263;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
