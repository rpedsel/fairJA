set JOB := {1 .. 20};
set MACHINE := {1 .. 6};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 24.5586, <2> 0.0764, <3> 43.5714, <4> 36.7256, <5> 2.3953, <6> 22.9637, <7> 13.6832, <8> 27.2228, <9> 8.8267, <10> 39.3126, <11> 29.5179, <12> 7.3633, <13> 48.5869, <14> 43.3623, <15> 1.4882, <16> 27.3715, <17> 20.8708, <18> 4.9464, <19> 29.5889, <20> 15.0818;
param workload[JOB] := <1> 603.1248, <2> 0.0058, <3> 1898.4669, <4> 1348.7697, <5> 5.7375, <6> 527.3315, <7> 187.23, <8> 741.0808, <9> 77.9106, <10> 1545.4805, <11> 871.3064, <12> 54.2182, <13> 2360.6869, <14> 1880.2891, <15> 2.2147, <16> 749.199, <17> 435.5903, <18> 24.4669, <19> 875.503, <20> 227.4607;
param capacity[MACHINE] := <1> 1802.0092, <2> 1802.0092, <3> 1802.0092, <4> 1802.0092, <5> 1802.0092, <6> 1802.0092;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
