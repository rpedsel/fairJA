set JOB := {1 .. 20};
set MACHINE := {1 .. 6};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 16.7831, <2> 32.6001, <3> 37.2776, <4> 22.4785, <5> 7.8285, <6> 34.5296, <7> 13.3308, <8> 21.1164, <9> 21.1583, <10> 22.254, <11> 31.3682, <12> 20.0563, <13> 44.4133, <14> 43.8415, <15> 17.1252, <16> 41.2648, <17> 31.1052, <18> 10.4313, <19> 17.3918, <20> 16.9731;
param workload[JOB] := <1> 16.7831, <2> 32.6001, <3> 37.2776, <4> 22.4785, <5> 7.8285, <6> 34.5296, <7> 13.3308, <8> 21.1164, <9> 21.1583, <10> 22.254, <11> 31.3682, <12> 20.0563, <13> 44.4133, <14> 43.8415, <15> 17.1252, <16> 41.2648, <17> 31.1052, <18> 10.4313, <19> 17.3918, <20> 16.9731;
param capacity[MACHINE] := <1> 503.3276, <2> 503.3276, <3> 503.3276, <4> 503.3276, <5> 503.3276, <6> 503.3276;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
