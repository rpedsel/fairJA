set JOB := {1 .. 20};
set MACHINE := {1 .. 6};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 22.5652, <2> 5.201, <3> 31.2988, <4> 4.2226, <5> 42.0647, <6> 17.4649, <7> 15.1209, <8> 27.0706, <9> 38.2099, <10> 3.1395, <11> 22.581, <12> 10.6148, <13> 6.3326, <14> 17.1563, <15> 37.5059, <16> 0.5942, <17> 31.649, <18> 20.448, <19> 21.8974, <20> 21.293;
param workload[JOB] := <1> 509.1883, <2> 27.0504, <3> 979.6149, <4> 17.8304, <5> 1769.439, <6> 305.0227, <7> 228.6416, <8> 732.8174, <9> 1459.9965, <10> 9.8565, <11> 509.9016, <12> 112.674, <13> 40.1018, <14> 294.3386, <15> 1406.6925, <16> 0.3531, <17> 1001.6592, <18> 418.1207, <19> 479.4961, <20> 453.3918;
param capacity[MACHINE] := <1> 1344.5233, <2> 1344.5233, <3> 1344.5233, <4> 1344.5233, <5> 1344.5233, <6> 1344.5233;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
