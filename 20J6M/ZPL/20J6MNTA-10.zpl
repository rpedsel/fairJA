set JOB := {1 .. 20};
set MACHINE := {1 .. 6};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 29.4234, <2> 28.0562, <3> 26.9778, <4> 33.2225, <5> 25.2271, <6> 25.8479, <7> 25.5531, <8> 21.5207, <9> 17.2774, <10> 14.9133, <11> 26.7792, <12> 30.7038, <13> 31.3543, <14> 24.335, <15> 33.8381, <16> 26.4096, <17> 21.4238, <18> 22.4956, <19> 17.0767, <20> 26.3127;
param workload[JOB] := <1> 865.7365, <2> 787.1504, <3> 727.8017, <4> 1103.7345, <5> 636.4066, <6> 668.1139, <7> 652.9609, <8> 463.1405, <9> 298.5086, <10> 222.4065, <11> 717.1256, <12> 942.7233, <13> 983.0921, <14> 592.1922, <15> 1145.017, <16> 697.467, <17> 458.9792, <18> 506.052, <19> 291.6137, <20> 692.3582;
param capacity[MACHINE] := <1> 1681.5725, <2> 1681.5725, <3> 1681.5725, <4> 1681.5725, <5> 1681.5725, <6> 1681.5725;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
