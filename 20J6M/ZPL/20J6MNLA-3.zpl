set JOB := {1 .. 20};
set MACHINE := {1 .. 6};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 23.7101, <2> 21.2683, <3> 25.2914, <4> 21.5869, <5> 27.2057, <6> 15.6395, <7> 37.9623, <8> 22.3078, <9> 27.2163, <10> 26.3527, <11> 19.774, <12> 30.7502, <13> 28.4908, <14> 21.2133, <15> 33.1663, <16> 30.0, <17> 21.4804, <18> 27.6706, <19> 19.5134, <20> 27.0427;
param workload[JOB] := <1> 562.1688, <2> 452.3406, <3> 639.6549, <4> 465.9943, <5> 740.1501, <6> 244.594, <7> 1441.1362, <8> 497.6379, <9> 740.727, <10> 694.4648, <11> 391.0111, <12> 945.5748, <13> 811.7257, <14> 450.0041, <15> 1100.0035, <16> 900.0, <17> 461.4076, <18> 765.6621, <19> 380.7728, <20> 731.3076;
param capacity[MACHINE] := <1> 2236.0563, <2> 2236.0563, <3> 2236.0563, <4> 2236.0563, <5> 2236.0563, <6> 2236.0563;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
