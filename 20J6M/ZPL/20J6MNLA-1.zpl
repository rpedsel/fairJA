set JOB := {1 .. 20};
set MACHINE := {1 .. 6};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 28.5751, <2> 20.5505, <3> 17.0466, <4> 30.6775, <5> 30.4428, <6> 24.5559, <7> 25.4187, <8> 8.7632, <9> 25.2569, <10> 29.3901, <11> 25.5778, <12> 20.7868, <13> 24.2116, <14> 21.4041, <15> 34.3824, <16> 23.5604, <17> 23.1406, <18> 22.9578, <19> 26.4003, <20> 28.8123;
param workload[JOB] := <1> 816.5363, <2> 422.3231, <3> 290.5866, <4> 941.109, <5> 926.7641, <6> 602.9922, <7> 646.1103, <8> 76.7937, <9> 637.911, <10> 863.778, <11> 654.2239, <12> 432.0911, <13> 586.2016, <14> 458.1355, <15> 1182.1494, <16> 555.0924, <17> 535.4874, <18> 527.0606, <19> 696.9758, <20> 830.1486;
param capacity[MACHINE] := <1> 2113.7451, <2> 2113.7451, <3> 2113.7451, <4> 2113.7451, <5> 2113.7451, <6> 2113.7451;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
