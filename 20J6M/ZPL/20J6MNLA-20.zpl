set JOB := {1 .. 20};
set MACHINE := {1 .. 6};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 25.4579, <2> 30.2772, <3> 26.3092, <4> 24.552, <5> 22.5314, <6> 20.1372, <7> 31.1741, <8> 23.8409, <9> 23.2642, <10> 21.9979, <11> 32.9092, <12> 24.7586, <13> 30.791, <14> 15.9493, <15> 19.6238, <16> 24.1934, <17> 24.4272, <18> 32.2391, <19> 19.1151, <20> 24.9947;
param workload[JOB] := <1> 648.1047, <2> 916.7088, <3> 692.174, <4> 602.8007, <5> 507.664, <6> 405.5068, <7> 971.8245, <8> 568.3885, <9> 541.223, <10> 483.9076, <11> 1083.0154, <12> 612.9883, <13> 948.0857, <14> 254.3802, <15> 385.0935, <16> 585.3206, <17> 596.6881, <18> 1039.3596, <19> 365.387, <20> 624.735;
param capacity[MACHINE] := <1> 2138.8927, <2> 2138.8927, <3> 2138.8927, <4> 2138.8927, <5> 2138.8927, <6> 2138.8927;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
