set JOB := {1 .. 20};
set MACHINE := {1 .. 6};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 16.8264, <2> 33.4277, <3> 49.2199, <4> 23.4837, <5> 43.8039, <6> 10.4107, <7> 28.874, <8> 29.2254, <9> 13.0708, <10> 18.6919, <11> 3.2819, <12> 26.4114, <13> 1.6761, <14> 45.8057, <15> 19.7501, <16> 44.1822, <17> 49.2807, <18> 16.0751, <19> 9.7496, <20> 45.4161;
param workload[JOB] := <1> 283.1277, <2> 1117.4111, <3> 2422.5986, <4> 551.4842, <5> 1918.7817, <6> 108.3827, <7> 833.7079, <8> 854.124, <9> 170.8458, <10> 349.3871, <11> 10.7709, <12> 697.562, <13> 2.8093, <14> 2098.1622, <15> 390.0665, <16> 1952.0668, <17> 2428.5874, <18> 258.4088, <19> 95.0547, <20> 2062.6221;
param capacity[MACHINE] := <1> 3100.9936, <2> 3100.9936, <3> 3100.9936, <4> 3100.9936, <5> 3100.9936, <6> 3100.9936;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
