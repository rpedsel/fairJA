set JOB := {1 .. 20};
set MACHINE := {1 .. 6};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 13.7128, <2> 20.602, <3> 5.5652, <4> 0.5378, <5> 28.7511, <6> 27.0188, <7> 10.9591, <8> 1.8748, <9> 17.9812, <10> 9.4701, <11> 14.4214, <12> 31.1136, <13> 24.8295, <14> 34.4112, <15> 26.8029, <16> 12.3678, <17> 22.892, <18> 24.4516, <19> 42.1178, <20> 1.902;
param workload[JOB] := <1> 188.0409, <2> 424.4424, <3> 30.9715, <4> 0.2892, <5> 826.6258, <6> 730.0156, <7> 120.1019, <8> 3.5149, <9> 323.3236, <10> 89.6828, <11> 207.9768, <12> 968.0561, <13> 616.5041, <14> 1184.1307, <15> 718.3954, <16> 152.9625, <17> 524.0437, <18> 597.8807, <19> 1773.9091, <20> 3.6176;
param capacity[MACHINE] := <1> 9484.4853, <2> 9484.4853, <3> 9484.4853, <4> 9484.4853, <5> 9484.4853, <6> 9484.4853;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
