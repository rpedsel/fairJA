set JOB := {1 .. 20};
set MACHINE := {1 .. 6};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 10.797, <2> 19.164, <3> 10.0217, <4> 24.0443, <5> 16.707, <6> 42.0384, <7> 48.3603, <8> 49.2396, <9> 7.0034, <10> 8.7082, <11> 16.2384, <12> 14.4116, <13> 9.1758, <14> 33.7956, <15> 5.8303, <16> 31.9781, <17> 42.5797, <18> 15.995, <19> 31.522, <20> 30.5123;
param workload[JOB] := <1> 116.5752, <2> 367.2589, <3> 100.4345, <4> 578.1284, <5> 279.1238, <6> 1767.2271, <7> 2338.7186, <8> 2424.5382, <9> 49.0476, <10> 75.8327, <11> 263.6856, <12> 207.6942, <13> 84.1953, <14> 1142.1426, <15> 33.9924, <16> 1022.5989, <17> 1813.0309, <18> 255.84, <19> 993.6365, <20> 931.0005;
param capacity[MACHINE] := <1> 1855.5878, <2> 1855.5878, <3> 1855.5878, <4> 1855.5878, <5> 1855.5878, <6> 1855.5878;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
