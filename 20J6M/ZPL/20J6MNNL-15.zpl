set JOB := {1 .. 20};
set MACHINE := {1 .. 6};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 29.6177, <2> 31.7361, <3> 24.3452, <4> 24.7742, <5> 17.8189, <6> 22.0064, <7> 25.6845, <8> 26.1106, <9> 24.1863, <10> 26.4828, <11> 28.5108, <12> 23.0483, <13> 28.17, <14> 13.4393, <15> 28.1376, <16> 28.5081, <17> 22.7393, <18> 21.5958, <19> 21.8846, <20> 20.5721;
param workload[JOB] := <1> 29.6177, <2> 31.7361, <3> 24.3452, <4> 24.7742, <5> 17.8189, <6> 22.0064, <7> 25.6845, <8> 26.1106, <9> 24.1863, <10> 26.4828, <11> 28.5108, <12> 23.0483, <13> 28.17, <14> 13.4393, <15> 28.1376, <16> 28.5081, <17> 22.7393, <18> 21.5958, <19> 21.8846, <20> 20.5721;
param capacity[MACHINE] := <1> 489.3686, <2> 489.3686, <3> 489.3686, <4> 489.3686, <5> 489.3686, <6> 489.3686;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
