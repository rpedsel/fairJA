set JOB := {1 .. 20};
set MACHINE := {1 .. 6};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 29.2351, <2> 35.7251, <3> 31.7255, <4> 28.2831, <5> 15.3457, <6> 43.9677, <7> 20.0868, <8> 31.4579, <9> 33.3369, <10> 29.2817, <11> 3.5566, <12> 13.1632, <13> 30.7946, <14> 23.3336, <15> 11.0459, <16> 48.742, <17> 43.2016, <18> 4.0342, <19> 25.2189, <20> 34.4941;
param workload[JOB] := <1> 854.6911, <2> 1276.2828, <3> 1006.5074, <4> 799.9337, <5> 235.4905, <6> 1933.1586, <7> 403.4795, <8> 989.5995, <9> 1111.3489, <10> 857.418, <11> 12.6494, <12> 173.2698, <13> 948.3074, <14> 544.4569, <15> 122.0119, <16> 2375.7826, <17> 1866.3782, <18> 16.2748, <19> 635.9929, <20> 1189.8429;
param capacity[MACHINE] := <1> 17352.8768, <2> 17352.8768, <3> 17352.8768, <4> 17352.8768, <5> 17352.8768, <6> 17352.8768;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
