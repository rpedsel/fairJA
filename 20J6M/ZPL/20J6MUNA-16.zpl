set JOB := {1 .. 20};
set MACHINE := {1 .. 6};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 9.3902, <2> 11.6013, <3> 43.2091, <4> 32.8207, <5> 37.3218, <6> 22.1803, <7> 31.4793, <8> 2.4296, <9> 13.9215, <10> 14.4602, <11> 26.3715, <12> 8.1561, <13> 27.652, <14> 45.4889, <15> 37.7562, <16> 18.2043, <17> 21.9946, <18> 44.8758, <19> 11.0498, <20> 42.8382;
param workload[JOB] := <1> 88.1759, <2> 134.5902, <3> 1867.0263, <4> 1077.1983, <5> 1392.9168, <6> 491.9657, <7> 990.9463, <8> 5.903, <9> 193.8082, <10> 209.0974, <11> 695.456, <12> 66.522, <13> 764.6331, <14> 2069.24, <15> 1425.5306, <16> 331.3965, <17> 483.7624, <18> 2013.8374, <19> 122.0981, <20> 1835.1114;
param capacity[MACHINE] := <1> 16259.2156, <2> 16259.2156, <3> 16259.2156, <4> 16259.2156, <5> 16259.2156, <6> 16259.2156;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
