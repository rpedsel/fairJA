set JOB := {1 .. 20};
set MACHINE := {1 .. 6};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 16.9646, <2> 20.6974, <3> 1.4952, <4> 1.503, <5> 1.0292, <6> 41.2263, <7> 7.943, <8> 11.3721, <9> 7.6103, <10> 43.094, <11> 26.5926, <12> 27.6417, <13> 3.4352, <14> 18.7393, <15> 8.774, <16> 27.1939, <17> 46.7316, <18> 28.3941, <19> 16.0376, <20> 37.9463;
param workload[JOB] := <1> 287.7977, <2> 428.3824, <3> 2.2356, <4> 2.259, <5> 1.0593, <6> 1699.6078, <7> 63.0912, <8> 129.3247, <9> 57.9167, <10> 1857.0928, <11> 707.1664, <12> 764.0636, <13> 11.8006, <14> 351.1614, <15> 76.9831, <16> 739.5082, <17> 2183.8424, <18> 806.2249, <19> 257.2046, <20> 1439.9217;
param capacity[MACHINE] := <1> 1977.774, <2> 1977.774, <3> 1977.774, <4> 1977.774, <5> 1977.774, <6> 1977.774;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
