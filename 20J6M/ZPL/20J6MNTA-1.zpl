set JOB := {1 .. 20};
set MACHINE := {1 .. 6};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 26.9857, <2> 24.4489, <3> 18.1418, <4> 24.7935, <5> 25.9279, <6> 32.8868, <7> 26.066, <8> 28.7107, <9> 24.9978, <10> 36.5534, <11> 31.5007, <12> 20.7166, <13> 21.9644, <14> 21.062, <15> 24.3074, <16> 23.2331, <17> 30.4554, <18> 20.7053, <19> 25.2232, <20> 23.7833;
param workload[JOB] := <1> 728.228, <2> 597.7487, <3> 329.1249, <4> 614.7176, <5> 672.256, <6> 1081.5416, <7> 679.4364, <8> 824.3043, <9> 624.89, <10> 1336.1511, <11> 992.2941, <12> 429.1775, <13> 482.4349, <14> 443.6078, <15> 590.8497, <16> 539.7769, <17> 927.5314, <18> 428.7094, <19> 636.2098, <20> 565.6454;
param capacity[MACHINE] := <1> 1690.5794, <2> 1690.5794, <3> 1690.5794, <4> 1690.5794, <5> 1690.5794, <6> 1690.5794;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
