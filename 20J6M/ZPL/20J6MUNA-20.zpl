set JOB := {1 .. 20};
set MACHINE := {1 .. 6};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 35.8682, <2> 46.3948, <3> 45.7986, <4> 31.7099, <5> 13.8234, <6> 20.0603, <7> 40.0993, <8> 3.0632, <9> 49.9336, <10> 38.3876, <11> 38.7788, <12> 0.0283, <13> 7.9576, <14> 28.1057, <15> 39.0627, <16> 10.6832, <17> 48.5272, <18> 38.9574, <19> 37.4791, <20> 29.3681;
param workload[JOB] := <1> 1286.5278, <2> 2152.4775, <3> 2097.5118, <4> 1005.5178, <5> 191.0864, <6> 402.4156, <7> 1607.9539, <8> 9.3832, <9> 2493.3644, <10> 1473.6078, <11> 1503.7953, <12> 0.0008, <13> 63.3234, <14> 789.9304, <15> 1525.8945, <16> 114.1308, <17> 2354.8891, <18> 1517.679, <19> 1404.6829, <20> 862.4853;
param capacity[MACHINE] := <1> 22856.6577, <2> 22856.6577, <3> 22856.6577, <4> 22856.6577, <5> 22856.6577, <6> 22856.6577;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
