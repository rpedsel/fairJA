set JOB := {1 .. 20};
set MACHINE := {1 .. 6};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 31.0493, <2> 24.6355, <3> 31.1646, <4> 22.3313, <5> 26.9518, <6> 26.9851, <7> 28.1063, <8> 19.9342, <9> 34.3517, <10> 32.168, <11> 23.9188, <12> 33.072, <13> 24.9574, <14> 16.4212, <15> 18.9047, <16> 22.4719, <17> 28.3059, <18> 26.9528, <19> 18.5506, <20> 26.7092;
param workload[JOB] := <1> 964.059, <2> 606.9079, <3> 971.2323, <4> 498.687, <5> 726.3995, <6> 728.1956, <7> 789.9641, <8> 397.3723, <9> 1180.0393, <10> 1034.7802, <11> 572.109, <12> 1093.7572, <13> 622.8718, <14> 269.6558, <15> 357.3877, <16> 504.9863, <17> 801.224, <18> 726.4534, <19> 344.1248, <20> 713.3814;
param capacity[MACHINE] := <1> 1737.9486, <2> 1737.9486, <3> 1737.9486, <4> 1737.9486, <5> 1737.9486, <6> 1737.9486;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
