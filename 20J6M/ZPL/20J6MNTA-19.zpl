set JOB := {1 .. 20};
set MACHINE := {1 .. 6};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 20.1765, <2> 13.5143, <3> 22.4669, <4> 32.6879, <5> 25.2521, <6> 17.2491, <7> 23.1052, <8> 28.2063, <9> 19.6628, <10> 17.6759, <11> 20.929, <12> 15.6639, <13> 21.1575, <14> 17.2395, <15> 33.7706, <16> 21.6412, <17> 34.269, <18> 29.1507, <19> 24.25, <20> 21.623;
param workload[JOB] := <1> 407.0912, <2> 182.6363, <3> 504.7616, <4> 1068.4988, <5> 637.6686, <6> 297.5315, <7> 533.8503, <8> 795.5954, <9> 386.6257, <10> 312.4374, <11> 438.023, <12> 245.3578, <13> 447.6398, <14> 297.2004, <15> 1140.4534, <16> 468.3415, <17> 1174.3644, <18> 849.7633, <19> 588.0625, <20> 467.5541;
param capacity[MACHINE] := <1> 1405.4321, <2> 1405.4321, <3> 1405.4321, <4> 1405.4321, <5> 1405.4321, <6> 1405.4321;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
