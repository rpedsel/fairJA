set JOB := {1 .. 20};
set MACHINE := {1 .. 6};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 2.199, <2> 33.6635, <3> 49.1772, <4> 10.2418, <5> 21.3996, <6> 41.1929, <7> 45.2892, <8> 4.466, <9> 28.388, <10> 13.9506, <11> 14.7404, <12> 43.329, <13> 36.7409, <14> 31.9743, <15> 44.6536, <16> 22.1261, <17> 22.437, <18> 38.5102, <19> 1.525, <20> 8.2876;
param workload[JOB] := <1> 4.8356, <2> 1133.2312, <3> 2418.397, <4> 104.8945, <5> 457.9429, <6> 1696.855, <7> 2051.1116, <8> 19.9452, <9> 805.8785, <10> 194.6192, <11> 217.2794, <12> 1877.4022, <13> 1349.8937, <14> 1022.3559, <15> 1993.944, <16> 489.5643, <17> 503.419, <18> 1483.0355, <19> 2.3256, <20> 68.6843;
param capacity[MACHINE] := <1> 17895.6146, <2> 17895.6146, <3> 17895.6146, <4> 17895.6146, <5> 17895.6146, <6> 17895.6146;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
