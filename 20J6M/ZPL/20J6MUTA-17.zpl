set JOB := {1 .. 20};
set MACHINE := {1 .. 6};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 2.4348, <2> 16.4998, <3> 0.1994, <4> 6.0178, <5> 10.1922, <6> 39.624, <7> 14.4741, <8> 5.4358, <9> 1.6932, <10> 31.2819, <11> 21.3968, <12> 3.3892, <13> 1.6822, <14> 2.6448, <15> 35.3572, <16> 45.5693, <17> 21.747, <18> 20.48, <19> 4.2423, <20> 46.5128;
param workload[JOB] := <1> 5.9283, <2> 272.2434, <3> 0.0398, <4> 36.2139, <5> 103.8809, <6> 1570.0614, <7> 209.4996, <8> 29.5479, <9> 2.8669, <10> 978.5573, <11> 457.8231, <12> 11.4867, <13> 2.8298, <14> 6.995, <15> 1250.1316, <16> 2076.5611, <17> 472.932, <18> 419.4304, <19> 17.9971, <20> 2163.4406;
param capacity[MACHINE] := <1> 1261.0583, <2> 1261.0583, <3> 1261.0583, <4> 1261.0583, <5> 1261.0583, <6> 1261.0583;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
