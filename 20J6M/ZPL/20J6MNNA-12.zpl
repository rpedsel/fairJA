set JOB := {1 .. 20};
set MACHINE := {1 .. 6};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 28.146, <2> 24.7475, <3> 28.0993, <4> 26.0176, <5> 19.713, <6> 19.9586, <7> 24.1363, <8> 28.4085, <9> 25.7922, <10> 25.5651, <11> 21.8165, <12> 20.0184, <13> 29.6381, <14> 19.6599, <15> 29.3387, <16> 20.2489, <17> 16.7994, <18> 24.1735, <19> 20.166, <20> 20.0758;
param workload[JOB] := <1> 792.1973, <2> 612.4388, <3> 789.5707, <4> 676.9155, <5> 388.6024, <6> 398.3457, <7> 582.561, <8> 807.0429, <9> 665.2376, <10> 653.5743, <11> 475.9597, <12> 400.7363, <13> 878.417, <14> 386.5117, <15> 860.7593, <16> 410.018, <17> 282.2198, <18> 584.3581, <19> 406.6676, <20> 403.0377;
param capacity[MACHINE] := <1> 11455.1714, <2> 11455.1714, <3> 11455.1714, <4> 11455.1714, <5> 11455.1714, <6> 11455.1714;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
