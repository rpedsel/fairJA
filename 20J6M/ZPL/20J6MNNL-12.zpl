set JOB := {1 .. 20};
set MACHINE := {1 .. 6};
set JM := JOB * MACHINE;

param benefit[JOB] := <1> 21.0994, <2> 26.0896, <3> 20.4144, <4> 29.7954, <5> 29.3197, <6> 19.1141, <7> 19.6985, <8> 29.8211, <9> 18.4788, <10> 32.4729, <11> 21.6508, <12> 18.4554, <13> 20.0741, <14> 24.1173, <15> 20.8821, <16> 17.3802, <17> 27.5395, <18> 18.2392, <19> 31.6677, <20> 24.4629;
param workload[JOB] := <1> 21.0994, <2> 26.0896, <3> 20.4144, <4> 29.7954, <5> 29.3197, <6> 19.1141, <7> 19.6985, <8> 29.8211, <9> 18.4788, <10> 32.4729, <11> 21.6508, <12> 18.4554, <13> 20.0741, <14> 24.1173, <15> 20.8821, <16> 17.3802, <17> 27.5395, <18> 18.2392, <19> 31.6677, <20> 24.4629;
param capacity[MACHINE] := <1> 470.7731, <2> 470.7731, <3> 470.7731, <4> 470.7731, <5> 470.7731, <6> 470.7731;

var x[JM];
var z;
maximize minBenefit: z;
subto Z:
   forall <m> in MACHINE do
      sum <j> in JOB : benefit[j] * x[j,m] >= z;
subto K:
   forall <m> in MACHINE do
      sum <j> in JOB : workload[j] * x[j,m] <= capacity[m];
subto X:
   forall <j> in JOB do
      sum <m> in MACHINE : x[j,m] <= 1;
subto A:
   forall <j,m> in JM do
      x[j,m] >= 0;
